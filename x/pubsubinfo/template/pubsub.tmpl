{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "model/additional/entx_pubsub_config" }}
	{{- range $f := $.Fields }}
		{{- if $annotation := $f.Annotations.INFRA9_PUBSUBHOOK }}
			{{- if $annotation.IsNamespacedDataJSONField }}
				{{ $arg := "v" }}
				{{ $func := print $f.StructField "HasKey" }}
				// {{ $func }} checks if {{$f.StructField}} contains given value
				func {{ $func }}({{ $arg}} string) predicate.{{ $.Name }} {
						return predicate.{{ $.Name }}(func(s *sql.Selector) {
								s.Where(sqljson.HasKey(s.C({{ $f.Constant }}), sqljson.DotPath({{ $arg }})))
						})
				}
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}


{{ define "pubsubhooks/pubsub" }}
{{ with extend $ "Package" "pubsubhooks" }}
	{{ template "header" . }}
{{ end }}

{{ $genPackage := base $.Config.Package }}

{{- range $node := $.Nodes }}
		{{- if $nodeAnnotation := $node.Annotations.INFRA9_PUBSUBHOOK }}
		func {{ $node.Name }}Hooks() []ent.Hook {
			return []ent.Hook{
			hook.On(
				func(next ent.Mutator) ent.Mutator {
					return hook.{{ $node.Name }}Func(func(ctx context.Context, m *generated.{{ $node.Name }}Mutation) (ent.Value, error) {
						// complete the mutation before we process the event
						retValue, err := next.Mutate(ctx, m)
						if err != nil {
							return retValue, err
						}

						queueName := "{{ $nodeAnnotation.QueueName }}"
						additionalSubjects := []gidx.PrefixedID{}

						objID, ok := m.{{ $node.ID.MutationGet }}()
						if !ok {
							return nil, fmt.Errorf("object doesn't have an id %s", objID)
						}

						changeset := []pubsubx.FieldChange{}

						{{- range $f := $node.Fields }}
							{{- if $f.Sensitive }}
								// sensitive field, only return <redacted>
								_, ok = m.{{ $f.MutationGet }}()
								if ok {
									changeset = append(changeset, pubsubx.FieldChange{
										Field:         "{{ $f.Name | camel }}",
										PreviousValue: "<redacted>",
										CurrentValue:  "<redacted>",
									})
							{{- else }}
								{{ $f.Name }}, ok := m.{{ $f.MutationGet }}()
								{{- $currentValue := print "cv_" $f.Name }}
								{{ $currentValue }} := ""
								{{- $annotation := $f.Annotations.INFRA9_PUBSUBHOOK }}
								{{- if or $annotation.IsAdditionalSubjectField (contains $nodeAnnotation.QueueName $f.Name) }}
									if !ok && !m.Op().Is(ent.OpCreate) {
										// since we are doing an update or delete and these fields didn't change, load the "old" value
										{{ $f.Name }}, err = m.{{ $f.MutationGetOld }}(ctx)
										if err != nil {
											return nil, err
										}
									}

									{{- if or ($annotation.IsAdditionalSubjectField) }}
										additionalSubjects = append(additionalSubjects, {{ $f.Name }})
									{{- end }}

									{{- if contains $nodeAnnotation.QueueName $f.Name }}
										{{- if $f.IsTime }}
											{{ $currentValue }} = {{ $f.Name }}.Format(time.RFC3339)
										{{- else if $f.HasValueScanner }}
											{{ $currentValue }} = {{ $f.Name }}.Value()
										{{- else }}
											{{ $currentValue }} = fmt.Sprintf("%s", {{ $f.Name }})
										{{- end }}
										queueName = strings.ReplaceAll(queueName, "%{{ $f.Name }}%",  {{ $currentValue }})
									{{ end }}
								{{ end }}

								if ok {
									{{- if $f.Sensitive }}
										changeset = append(changeset, pubsubx.FieldChange{
											Field:         "{{ $f.Name | camel }}",
											PreviousValue: "<sensitive>",
											CurrentValue:  "<sensitive>",
										})
									{{- else }}
										{{- if not (contains $nodeAnnotation.QueueName $f.Name) }}
											{{- if $f.IsTime }}
												{{ $currentValue }} = {{ $f.Name }}.Format(time.RFC3339)
											{{- else if $f.HasValueScanner }}
												{{ $currentValue }} = {{ $f.Name }}.Value()
											{{- else }}
												{{ $currentValue }} = fmt.Sprintf("%s", {{ $f.Name }})
											{{- end }}
											queueName = strings.ReplaceAll(queueName, "%{{ $f.Name }}%",  {{ $currentValue }})
										{{ end }}

										{{- $prevVar := print "pv_" $f.Name }}
										{{ $prevVar }} := ""
										if !m.Op().Is(ent.OpCreate) {
											ov, err := m.{{ $f.MutationGetOld }}(ctx)
											if err != nil {
												{{ $prevVar }} = "<unknown>"
											} else {
												{{- if $f.IsTime }}
												{{ $prevVar }} = ov.Format(time.RFC3339)
												{{- else if $f.HasValueScanner }}
												{{ $prevVar }} = ov.Value()
												{{- else }}
												{{ $prevVar }} = fmt.Sprintf("%s", ov)
												{{- end }}
											}
										}

										changeset = append(changeset, pubsubx.FieldChange{
											Field:         "{{ $f.Name }}",
											PreviousValue: {{ $prevVar }},
											CurrentValue: {{ $currentValue }},
										})
									{{- end }}
								}
							{{ end }}
						{{ end }}

					msg := pubsubx.ChangeMessage{
						EventType:    					fmt.Sprintf("%s.%s", eventType(m.Op()), queueName),
						SubjectID:    					objID,
						AdditionalSubjectIDs: 	additionalSubjects,
						Timestamp: 							time.Now().UTC(),
						FieldChanges: 					changeset,
					}

					fmt.Println("Pubsub message to send: ")

					b, err := json.MarshalIndent(msg, "", "  ")
					fmt.Println(string(b))

						return retValue, nil
					})},
				ent.OpCreate|ent.OpUpdate|ent.OpUpdateOne,
			),

			// Delete Hook
			hook.On(
				func(next ent.Mutator) ent.Mutator {
					return hook.LoadBalancerFunc(func(ctx context.Context, m *generated.LoadBalancerMutation) (ent.Value, error) {
						queueName := "{{ $nodeAnnotation.QueueName }}"
						additionalSubjects := []gidx.PrefixedID{}

						objID, ok := m.{{ $node.ID.MutationGet }}()
						if !ok {
							return nil, fmt.Errorf("object doesn't have an id %s", objID)
						}

						dbObj, err := m.Client().{{ $node.Name }}.Get(ctx, objID)
						if err != nil {
							return nil, fmt.Errorf("failed to load object to get values for pubsub, err %w", err)
						}

						{{- range $f := $node.Fields }}
							{{- if not $f.Sensitive }}
								{{- $annotation := $f.Annotations.INFRA9_PUBSUBHOOK }}
								{{- if or $annotation.IsAdditionalSubjectField (contains $nodeAnnotation.QueueName $f.Name) }}
									{{- if $annotation.IsAdditionalSubjectField }}
										additionalSubjects = append(additionalSubjects, dbObj.{{ $f.MutationGet }})
									{{- end }}
									{{- if contains $nodeAnnotation.QueueName $f.Name }}
										{{- $currentValue := print "value_" $f.Name }}
										{{- if $f.IsTime }}
											{{ $currentValue }} := dbObj.{{ $f.MutationGet }}.Format(time.RFC3339)
										{{- else if $f.HasValueScanner }}
											{{ $currentValue }} := dbObj.{{ $f.MutationGet }}.Value()
										{{- else }}
											{{ $currentValue }} := fmt.Sprintf("%s", dbObj.{{ $f.MutationGet }})
										{{- end }}
										queueName = strings.ReplaceAll(queueName, "%{{ $f.Name }}%",  {{ $currentValue }})
									{{ end }}
								{{ end }}
							{{ end }}
						{{ end }}

					// we have all the info we need, now complete the mutation before we process the event
						retValue, err := next.Mutate(ctx, m)
						if err != nil {
							return retValue, err
						}

					msg := pubsubx.ChangeMessage{
						EventType:    					fmt.Sprintf("%s.%s", eventType(m.Op()), queueName),
						SubjectID:    					objID,
						AdditionalSubjectIDs: 	additionalSubjects,
						Timestamp: 							time.Now().UTC(),
					}

					fmt.Println("Pubsub message to send: ")

					b, err := json.MarshalIndent(msg, "", "  ")
					fmt.Println(string(b))

						return retValue, nil
					})},
				ent.OpDelete|ent.OpDeleteOne,
			),
		}
	}
	{{- end }}
{{- end }}


func PubsubHooks(c *{{ $genPackage }}.Client) {
	{{- range $node := $.Nodes }}
		{{- if $nodeAnnotation := $node.Annotations.INFRA9_PUBSUBHOOK }}
			c.{{ $node.Name }}.Use({{ $node.Name }}Hooks()...)
		{{ end }}
	{{ end }}
}

func eventType(op ent.Op) string {
	switch op {
	case ent.OpCreate:
		return "created"
	case ent.OpUpdate, ent.OpUpdateOne:
		return "updated"
	case ent.OpDelete, ent.OpDeleteOne:
		return "deleted"
	default:
		return "unknown"
	}
}

{{ end }}
