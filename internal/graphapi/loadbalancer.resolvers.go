package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"

	"go.infratographer.com/load-balancer-api/internal/ent/generated"
	"go.infratographer.com/x/gidx"
)

// LoadBalancerCreate is the resolver for the loadBalancerCreate field.
func (r *mutationResolver) LoadBalancerCreate(ctx context.Context, input generated.CreateLoadBalancerInput) (*LoadBalancerCreatePayload, error) {
	// TODO: authz check here, stub of what this might look like
	// r.authClient.CheckPermissions(
	// 	authzclient.Check{Subject: actor.ID, Action: "loadBalancerCreate", On: input.TenantID},
	// 	authzclient.Check{Subject: input.TenantID, Action: "enabled", On: input.LocationID},
	// 	authzclient.Check{Subject: input.TenantID, Action: "enabled", On: input.ProviderID},
	// 	authzclient.Check{Subject: input.TenantID, Action: "enabled", On: config.ResourceProvider.Name},
	// )
	lb, err := r.client.LoadBalancer.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &LoadBalancerCreatePayload{LoadBalancer: lb}, nil
}

// LoadBalancerUpdate is the resolver for the loadBalancerUpdate field.
func (r *mutationResolver) LoadBalancerUpdate(ctx context.Context, id gidx.PrefixedID, input generated.UpdateLoadBalancerInput) (*LoadBalancerUpdatePayload, error) {
	// TODO: authz check here, stub of what this might look like; using update/delete but this might be just write or mutate
	// r.authClient.CheckPermissions(
	// 	authzclient.Check{Subject: actor.ID, Action: "update", On: id},
	// )
	lb, err := r.client.LoadBalancer.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	lb, err = lb.Update().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &LoadBalancerUpdatePayload{LoadBalancer: lb}, nil
}

// LoadBalancerDelete is the resolver for the loadBalancerDelete field.
func (r *mutationResolver) LoadBalancerDelete(ctx context.Context, id gidx.PrefixedID) (*LoadBalancerDeletePayload, error) {
	// TODO: authz check here, stub of what this might look like; using update/delete but this might be just write or mutate
	// r.authClient.CheckPermissions(
	// 	authzclient.Check{Subject: actor.ID, Action: "delete", On: id},
	// )
	if err := r.client.LoadBalancer.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, err
	}

	return &LoadBalancerDeletePayload{DeletedID: &id}, nil
}

// LoadBalancer is the resolver for the loadBalancer field.
func (r *queryResolver) LoadBalancer(ctx context.Context, id gidx.PrefixedID) (*generated.LoadBalancer, error) {
	// TODO: authz check here, stub of what this might look like
	// r.authClient.CheckPermissions(
	// 	authzclient.Check{Subject: actor.ID, Action: "read", On: id},
	// )
	return r.client.LoadBalancer.Get(ctx, id)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
