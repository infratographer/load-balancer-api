package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/labstack/gommon/log"
	"go.infratographer.com/load-balancer-api/internal/ent/generated"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/origin"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/gidx"
)

// LoadBalancerPoolCreate is the resolver for the LoadBalancerPoolCreate field.
func (r *mutationResolver) LoadBalancerPoolCreate(ctx context.Context, input generated.CreateLoadBalancerPoolInput) (*LoadBalancerPoolCreatePayload, error) {
	// TODO: authz check here
	pool, err := r.client.Pool.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &LoadBalancerPoolCreatePayload{LoadBalancerPool: pool}, nil
}

// LoadBalancerPoolUpdate is the resolver for the LoadBalancerPoolUpdate field.
func (r *mutationResolver) LoadBalancerPoolUpdate(ctx context.Context, id gidx.PrefixedID, input generated.UpdateLoadBalancerPoolInput) (*LoadBalancerPoolUpdatePayload, error) {
	// TODO: authz check here
	pool, err := r.client.Pool.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	pool, err = pool.Update().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &LoadBalancerPoolUpdatePayload{LoadBalancerPool: pool}, nil
}

// LoadBalancerPoolDelete is the resolver for the loadBalancerPoolDelete field.
func (r *mutationResolver) LoadBalancerPoolDelete(ctx context.Context, id gidx.PrefixedID) (*LoadBalancerPoolDeletePayload, error) {
	// TODO: return the requestID echo generates or we could use the root trace id
	var (
		err error
		tx  *generated.Tx
	)

	tx, err = r.client.BeginTx(ctx, &sql.TxOptions{})
	if err != nil {
		return nil, err
	}

	// todo: cleanup pool assigments

	// cleanup origins associated with pool
	origins, err := tx.Origin.Query().Where(predicate.Origin(origin.PoolIDEQ(id))).All(ctx)
	if err != nil {
		if rerr := tx.Rollback(); rerr != nil {
			log.Error(fmt.Errorf("%w: %v", err, rerr).Error())
		}
		return nil, err
	}

	for _, o := range origins {
		if err = tx.Origin.DeleteOne(o).Exec(ctx); err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				log.Error(fmt.Errorf("%w: %v", err, rerr).Error())
			}
			return nil, err
		}
	}

	// delete pool
	if err = tx.Pool.DeleteOneID(id).Exec(ctx); err != nil {
		if rerr := tx.Rollback(); rerr != nil {
			log.Error(fmt.Errorf("%w: %v", err, rerr).Error())
		}
		return nil, err
	}

	if err = tx.Commit(); err != nil {
		if rerr := tx.Rollback(); rerr != nil {
			log.Error(fmt.Errorf("%w: %v", err, rerr).Error())
		}
		return nil, err
	}

	return &LoadBalancerPoolDeletePayload{DeletedID: &id}, nil
}

// LoadBalancerPool is the resolver for the loadBalancerPool field.
func (r *queryResolver) LoadBalancerPool(ctx context.Context, id gidx.PrefixedID) (*generated.Pool, error) {
	return r.client.Pool.Get(ctx, id)
}
