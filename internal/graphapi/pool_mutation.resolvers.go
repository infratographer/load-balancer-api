package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/labstack/gommon/log"
	"go.infratographer.com/load-balancer-api/internal/ent/generated"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/pool"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/gidx"
)

// CreatePool is the resolver for the createPool field.
func (r *mutationResolver) CreatePool(ctx context.Context, input generated.CreateLoadBalancerPoolInput) (*generated.Pool, error) {
	// TODO: authz check here
	return r.client.Pool.Create().SetInput(input).Save(ctx)
}

// UpdatePool is the resolver for the updatePool field.
func (r *mutationResolver) UpdatePool(ctx context.Context, id gidx.PrefixedID, input generated.UpdateLoadBalancerPoolInput) (*generated.Pool, error) {
	// TODO: authz check here
	pool, err := r.client.Pool.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	return pool.Update().SetInput(input).Save(ctx)
}

// DeletePool is the resolver for the deletePool field.
func (r *mutationResolver) DeletePool(ctx context.Context, id gidx.PrefixedID) (gidx.PrefixedID, error) {
	// TODO: return the requestID echo generates or we could use the root trace id
	var (
		err error
		tx  *generated.Tx
	)

	defer func() {
		if err != nil {
			if rerr := tx.Rollback(); rerr != nil {
				log.Error(fmt.Errorf("%w: %v", err, rerr).Error())
			}
		}
	}()

	tx, err = r.client.BeginTx(ctx, &sql.TxOptions{})
	if err != nil {
		return "", err
	}

	// todo: cleanup pool assigments

	// cleanup origins associated with pool
	_, err = tx.Origin.Delete().Where(predicate.Origin(pool.IDEQ(id))).Exec(ctx)
	if err != nil {
		return "", err
	}

	// delete pool
	if err = tx.Pool.DeleteOneID(id).Exec(ctx); err != nil {
		return "", err
	}

	if err = tx.Commit(); err != nil {
		return "", err
	}

	return id, nil
}
