package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"

	"entgo.io/contrib/entgql"
	"go.infratographer.com/load-balancer-api/internal/ent/generated"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancer"
	"go.infratographer.com/x/gidx"
)

// LoadBalancers is the resolver for the loadBalancers field.
func (r *iPResolver) LoadBalancers(ctx context.Context, obj *IP, after *entgql.Cursor[gidx.PrefixedID], first *int, before *entgql.Cursor[gidx.PrefixedID], last *int, orderBy *generated.LoadBalancerOrder, where *generated.LoadBalancerWhereInput) (*generated.LoadBalancerConnection, error) {
	return r.client.LoadBalancer.Query().Where(loadbalancer.OwnerID(obj.scopedToOwnerID), loadbalancer.IPID(obj.ID)).Paginate(ctx, after, first, before, last, generated.WithLoadBalancerOrder(orderBy), generated.WithLoadBalancerFilter(where.Filter))
}

// IP is the resolver for the ip field.
func (r *loadBalancerResolver) IP(ctx context.Context, obj *generated.LoadBalancer) (*IP, error) {
	return &IP{ID: obj.IPID, scopedToOwnerID: obj.OwnerID}, nil
}

// IP returns IPResolver implementation.
func (r *Resolver) IP() IPResolver { return &iPResolver{r} }

type iPResolver struct{ *Resolver }
