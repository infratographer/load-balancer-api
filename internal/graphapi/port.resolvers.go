package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"

	"go.infratographer.com/load-balancer-api/internal/ent/generated"
	"go.infratographer.com/x/gidx"
)

// LoadBalancerPortCreate is the resolver for the loadBalancerPortCreate field.
func (r *mutationResolver) LoadBalancerPortCreate(ctx context.Context, input generated.CreateLoadBalancerPortInput) (*LoadBalancerPortCreatePayload, error) {
	p, err := r.client.Port.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}
	return &LoadBalancerPortCreatePayload{LoadBalancerPort: p}, nil
}

// LoadBalancerPortUpdate is the resolver for the loadBalancerPortUpdate field.
func (r *mutationResolver) LoadBalancerPortUpdate(ctx context.Context, id gidx.PrefixedID, input generated.UpdateLoadBalancerPortInput) (*LoadBalancerPortUpdatePayload, error) {
	p, err := r.client.Port.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	p, err = p.Update().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &LoadBalancerPortUpdatePayload{LoadBalancerPort: p}, nil
}

// LoadBalancerPortDelete is the resolver for the loadBalancerPortDelete field.
func (r *mutationResolver) LoadBalancerPortDelete(ctx context.Context, id gidx.PrefixedID) (*LoadBalancerPortDeletePayload, error) {
	if err := r.client.Port.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, err
	}

	return &LoadBalancerPortDeletePayload{DeletedID: id}, nil
}
