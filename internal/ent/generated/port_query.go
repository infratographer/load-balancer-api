// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancer"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/pool"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/port"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/gidx"
)

// PortQuery is the builder for querying Port entities.
type PortQuery struct {
	config
	ctx              *QueryContext
	order            []port.OrderOption
	inters           []Interceptor
	predicates       []predicate.Port
	withPools        *PoolQuery
	withLoadBalancer *LoadBalancerQuery
	modifiers        []func(*sql.Selector)
	loadTotal        []func(context.Context, []*Port) error
	withNamedPools   map[string]*PoolQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PortQuery builder.
func (pq *PortQuery) Where(ps ...predicate.Port) *PortQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *PortQuery) Limit(limit int) *PortQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *PortQuery) Offset(offset int) *PortQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *PortQuery) Unique(unique bool) *PortQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *PortQuery) Order(o ...port.OrderOption) *PortQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryPools chains the current query on the "pools" edge.
func (pq *PortQuery) QueryPools() *PoolQuery {
	query := (&PoolClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(port.Table, port.FieldID, selector),
			sqlgraph.To(pool.Table, pool.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, port.PoolsTable, port.PoolsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLoadBalancer chains the current query on the "load_balancer" edge.
func (pq *PortQuery) QueryLoadBalancer() *LoadBalancerQuery {
	query := (&LoadBalancerClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(port.Table, port.FieldID, selector),
			sqlgraph.To(loadbalancer.Table, loadbalancer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, port.LoadBalancerTable, port.LoadBalancerColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Port entity from the query.
// Returns a *NotFoundError when no Port was found.
func (pq *PortQuery) First(ctx context.Context) (*Port, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{port.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *PortQuery) FirstX(ctx context.Context) *Port {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Port ID from the query.
// Returns a *NotFoundError when no Port ID was found.
func (pq *PortQuery) FirstID(ctx context.Context) (id gidx.PrefixedID, err error) {
	var ids []gidx.PrefixedID
	if ids, err = pq.Limit(1).IDs(setContextOp(ctx, pq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{port.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *PortQuery) FirstIDX(ctx context.Context) gidx.PrefixedID {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Port entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Port entity is found.
// Returns a *NotFoundError when no Port entities are found.
func (pq *PortQuery) Only(ctx context.Context) (*Port, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{port.Label}
	default:
		return nil, &NotSingularError{port.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *PortQuery) OnlyX(ctx context.Context) *Port {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Port ID in the query.
// Returns a *NotSingularError when more than one Port ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *PortQuery) OnlyID(ctx context.Context) (id gidx.PrefixedID, err error) {
	var ids []gidx.PrefixedID
	if ids, err = pq.Limit(2).IDs(setContextOp(ctx, pq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{port.Label}
	default:
		err = &NotSingularError{port.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *PortQuery) OnlyIDX(ctx context.Context) gidx.PrefixedID {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Ports.
func (pq *PortQuery) All(ctx context.Context) ([]*Port, error) {
	ctx = setContextOp(ctx, pq.ctx, "All")
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Port, *PortQuery]()
	return withInterceptors[[]*Port](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *PortQuery) AllX(ctx context.Context) []*Port {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Port IDs.
func (pq *PortQuery) IDs(ctx context.Context) (ids []gidx.PrefixedID, err error) {
	if pq.ctx.Unique == nil && pq.path != nil {
		pq.Unique(true)
	}
	ctx = setContextOp(ctx, pq.ctx, "IDs")
	if err = pq.Select(port.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *PortQuery) IDsX(ctx context.Context) []gidx.PrefixedID {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *PortQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, "Count")
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*PortQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *PortQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *PortQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, "Exist")
	switch _, err := pq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *PortQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PortQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *PortQuery) Clone() *PortQuery {
	if pq == nil {
		return nil
	}
	return &PortQuery{
		config:           pq.config,
		ctx:              pq.ctx.Clone(),
		order:            append([]port.OrderOption{}, pq.order...),
		inters:           append([]Interceptor{}, pq.inters...),
		predicates:       append([]predicate.Port{}, pq.predicates...),
		withPools:        pq.withPools.Clone(),
		withLoadBalancer: pq.withLoadBalancer.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithPools tells the query-builder to eager-load the nodes that are connected to
// the "pools" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PortQuery) WithPools(opts ...func(*PoolQuery)) *PortQuery {
	query := (&PoolClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPools = query
	return pq
}

// WithLoadBalancer tells the query-builder to eager-load the nodes that are connected to
// the "load_balancer" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PortQuery) WithLoadBalancer(opts ...func(*LoadBalancerQuery)) *PortQuery {
	query := (&LoadBalancerClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withLoadBalancer = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Port.Query().
//		GroupBy(port.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (pq *PortQuery) GroupBy(field string, fields ...string) *PortGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PortGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = port.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Port.Query().
//		Select(port.FieldCreatedAt).
//		Scan(ctx, &v)
func (pq *PortQuery) Select(fields ...string) *PortSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &PortSelect{PortQuery: pq}
	sbuild.label = port.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PortSelect configured with the given aggregations.
func (pq *PortQuery) Aggregate(fns ...AggregateFunc) *PortSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *PortQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !port.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *PortQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Port, error) {
	var (
		nodes       = []*Port{}
		_spec       = pq.querySpec()
		loadedTypes = [2]bool{
			pq.withPools != nil,
			pq.withLoadBalancer != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Port).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Port{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withPools; query != nil {
		if err := pq.loadPools(ctx, query, nodes,
			func(n *Port) { n.Edges.Pools = []*Pool{} },
			func(n *Port, e *Pool) { n.Edges.Pools = append(n.Edges.Pools, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withLoadBalancer; query != nil {
		if err := pq.loadLoadBalancer(ctx, query, nodes, nil,
			func(n *Port, e *LoadBalancer) { n.Edges.LoadBalancer = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedPools {
		if err := pq.loadPools(ctx, query, nodes,
			func(n *Port) { n.appendNamedPools(name) },
			func(n *Port, e *Pool) { n.appendNamedPools(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range pq.loadTotal {
		if err := pq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *PortQuery) loadPools(ctx context.Context, query *PoolQuery, nodes []*Port, init func(*Port), assign func(*Port, *Pool)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[gidx.PrefixedID]*Port)
	nids := make(map[gidx.PrefixedID]map[*Port]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(port.PoolsTable)
		s.Join(joinT).On(s.C(pool.FieldID), joinT.C(port.PoolsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(port.PoolsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(port.PoolsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(gidx.PrefixedID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*gidx.PrefixedID)
				inValue := *values[1].(*gidx.PrefixedID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Port]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Pool](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "pools" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PortQuery) loadLoadBalancer(ctx context.Context, query *LoadBalancerQuery, nodes []*Port, init func(*Port), assign func(*Port, *LoadBalancer)) error {
	ids := make([]gidx.PrefixedID, 0, len(nodes))
	nodeids := make(map[gidx.PrefixedID][]*Port)
	for i := range nodes {
		fk := nodes[i].LoadBalancerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(loadbalancer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "load_balancer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pq *PortQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	_spec.Node.Columns = pq.ctx.Fields
	if len(pq.ctx.Fields) > 0 {
		_spec.Unique = pq.ctx.Unique != nil && *pq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *PortQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(port.Table, port.Columns, sqlgraph.NewFieldSpec(port.FieldID, field.TypeString))
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, port.FieldID)
		for i := range fields {
			if fields[i] != port.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if pq.withLoadBalancer != nil {
			_spec.Node.AddColumnOnce(port.FieldLoadBalancerID)
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *PortQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(port.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = port.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedPools tells the query-builder to eager-load the nodes that are connected to the "pools"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PortQuery) WithNamedPools(name string, opts ...func(*PoolQuery)) *PortQuery {
	query := (&PoolClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedPools == nil {
		pq.withNamedPools = make(map[string]*PoolQuery)
	}
	pq.withNamedPools[name] = query
	return pq
}

// PortGroupBy is the group-by builder for Port entities.
type PortGroupBy struct {
	selector
	build *PortQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *PortGroupBy) Aggregate(fns ...AggregateFunc) *PortGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *PortGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, "GroupBy")
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PortQuery, *PortGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *PortGroupBy) sqlScan(ctx context.Context, root *PortQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PortSelect is the builder for selecting fields of Port entities.
type PortSelect struct {
	*PortQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *PortSelect) Aggregate(fns ...AggregateFunc) *PortSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *PortSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, "Select")
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PortQuery, *PortSelect](ctx, ps.PortQuery, ps, ps.inters, v)
}

func (ps *PortSelect) sqlScan(ctx context.Context, root *PortQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
