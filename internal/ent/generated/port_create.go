// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancer"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/pool"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/port"
	"go.infratographer.com/x/gidx"
)

// PortCreate is the builder for creating a Port entity.
type PortCreate struct {
	config
	mutation *PortMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PortCreate) SetCreatedAt(t time.Time) *PortCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PortCreate) SetNillableCreatedAt(t *time.Time) *PortCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PortCreate) SetUpdatedAt(t time.Time) *PortCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PortCreate) SetNillableUpdatedAt(t *time.Time) *PortCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PortCreate) SetDeletedAt(t time.Time) *PortCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PortCreate) SetNillableDeletedAt(t *time.Time) *PortCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetDeletedBy sets the "deleted_by" field.
func (pc *PortCreate) SetDeletedBy(s string) *PortCreate {
	pc.mutation.SetDeletedBy(s)
	return pc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pc *PortCreate) SetNillableDeletedBy(s *string) *PortCreate {
	if s != nil {
		pc.SetDeletedBy(*s)
	}
	return pc
}

// SetCreatedBy sets the "created_by" field.
func (pc *PortCreate) SetCreatedBy(s string) *PortCreate {
	pc.mutation.SetCreatedBy(s)
	return pc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pc *PortCreate) SetNillableCreatedBy(s *string) *PortCreate {
	if s != nil {
		pc.SetCreatedBy(*s)
	}
	return pc
}

// SetUpdatedBy sets the "updated_by" field.
func (pc *PortCreate) SetUpdatedBy(s string) *PortCreate {
	pc.mutation.SetUpdatedBy(s)
	return pc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pc *PortCreate) SetNillableUpdatedBy(s *string) *PortCreate {
	if s != nil {
		pc.SetUpdatedBy(*s)
	}
	return pc
}

// SetNumber sets the "number" field.
func (pc *PortCreate) SetNumber(i int) *PortCreate {
	pc.mutation.SetNumber(i)
	return pc
}

// SetName sets the "name" field.
func (pc *PortCreate) SetName(s string) *PortCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pc *PortCreate) SetNillableName(s *string) *PortCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetLoadBalancerID sets the "load_balancer_id" field.
func (pc *PortCreate) SetLoadBalancerID(gi gidx.PrefixedID) *PortCreate {
	pc.mutation.SetLoadBalancerID(gi)
	return pc
}

// SetID sets the "id" field.
func (pc *PortCreate) SetID(gi gidx.PrefixedID) *PortCreate {
	pc.mutation.SetID(gi)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PortCreate) SetNillableID(gi *gidx.PrefixedID) *PortCreate {
	if gi != nil {
		pc.SetID(*gi)
	}
	return pc
}

// AddPoolIDs adds the "pools" edge to the Pool entity by IDs.
func (pc *PortCreate) AddPoolIDs(ids ...gidx.PrefixedID) *PortCreate {
	pc.mutation.AddPoolIDs(ids...)
	return pc
}

// AddPools adds the "pools" edges to the Pool entity.
func (pc *PortCreate) AddPools(p ...*Pool) *PortCreate {
	ids := make([]gidx.PrefixedID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPoolIDs(ids...)
}

// SetLoadBalancer sets the "load_balancer" edge to the LoadBalancer entity.
func (pc *PortCreate) SetLoadBalancer(l *LoadBalancer) *PortCreate {
	return pc.SetLoadBalancerID(l.ID)
}

// Mutation returns the PortMutation object of the builder.
func (pc *PortCreate) Mutation() *PortMutation {
	return pc.mutation
}

// Save creates the Port in the database.
func (pc *PortCreate) Save(ctx context.Context) (*Port, error) {
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PortCreate) SaveX(ctx context.Context) *Port {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PortCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PortCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PortCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if port.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized port.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := port.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if port.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized port.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := port.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		if port.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized port.DefaultID (forgotten import generated/runtime?)")
		}
		v := port.DefaultID()
		pc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PortCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Port.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Port.updated_at"`)}
	}
	if _, ok := pc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`generated: missing required field "Port.number"`)}
	}
	if v, ok := pc.mutation.Number(); ok {
		if err := port.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`generated: validator failed for field "Port.number": %w`, err)}
		}
	}
	if _, ok := pc.mutation.LoadBalancerID(); !ok {
		return &ValidationError{Name: "load_balancer_id", err: errors.New(`generated: missing required field "Port.load_balancer_id"`)}
	}
	if v, ok := pc.mutation.LoadBalancerID(); ok {
		if err := port.LoadBalancerIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "load_balancer_id", err: fmt.Errorf(`generated: validator failed for field "Port.load_balancer_id": %w`, err)}
		}
	}
	if v, ok := pc.mutation.ID(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`generated: validator failed for field "Port.id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.LoadBalancerID(); !ok {
		return &ValidationError{Name: "load_balancer", err: errors.New(`generated: missing required edge "Port.load_balancer"`)}
	}
	return nil
}

func (pc *PortCreate) sqlSave(ctx context.Context) (*Port, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gidx.PrefixedID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PortCreate) createSpec() (*Port, *sqlgraph.CreateSpec) {
	var (
		_node = &Port{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(port.Table, sqlgraph.NewFieldSpec(port.FieldID, field.TypeString))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(port.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(port.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(port.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.DeletedBy(); ok {
		_spec.SetField(port.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.SetField(port.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.SetField(port.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pc.mutation.Number(); ok {
		_spec.SetField(port.FieldNumber, field.TypeInt, value)
		_node.Number = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(port.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := pc.mutation.PoolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   port.PoolsTable,
			Columns: port.PoolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pool.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.LoadBalancerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   port.LoadBalancerTable,
			Columns: []string{port.LoadBalancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(loadbalancer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LoadBalancerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PortCreateBulk is the builder for creating many Port entities in bulk.
type PortCreateBulk struct {
	config
	err      error
	builders []*PortCreate
}

// Save creates the Port entities in the database.
func (pcb *PortCreateBulk) Save(ctx context.Context) ([]*Port, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Port, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PortMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PortCreateBulk) SaveX(ctx context.Context) []*Port {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PortCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PortCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
