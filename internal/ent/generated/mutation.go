// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancer"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/origin"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/pool"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/port"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/predicate"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/provider"
	"go.infratographer.com/x/gidx"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLoadBalancer = "LoadBalancer"
	TypeOrigin       = "Origin"
	TypePool         = "Pool"
	TypePort         = "Port"
	TypeProvider     = "Provider"
)

// LoadBalancerMutation represents an operation that mutates the LoadBalancer nodes in the graph.
type LoadBalancerMutation struct {
	config
	op              Op
	typ             string
	id              *gidx.PrefixedID
	created_at      *time.Time
	updated_at      *time.Time
	name            *string
	owner_id        *gidx.PrefixedID
	location_id     *gidx.PrefixedID
	clearedFields   map[string]struct{}
	ports           map[gidx.PrefixedID]struct{}
	removedports    map[gidx.PrefixedID]struct{}
	clearedports    bool
	provider        *gidx.PrefixedID
	clearedprovider bool
	done            bool
	oldValue        func(context.Context) (*LoadBalancer, error)
	predicates      []predicate.LoadBalancer
}

var _ ent.Mutation = (*LoadBalancerMutation)(nil)

// loadbalancerOption allows management of the mutation configuration using functional options.
type loadbalancerOption func(*LoadBalancerMutation)

// newLoadBalancerMutation creates new mutation for the LoadBalancer entity.
func newLoadBalancerMutation(c config, op Op, opts ...loadbalancerOption) *LoadBalancerMutation {
	m := &LoadBalancerMutation{
		config:        c,
		op:            op,
		typ:           TypeLoadBalancer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLoadBalancerID sets the ID field of the mutation.
func withLoadBalancerID(id gidx.PrefixedID) loadbalancerOption {
	return func(m *LoadBalancerMutation) {
		var (
			err   error
			once  sync.Once
			value *LoadBalancer
		)
		m.oldValue = func(ctx context.Context) (*LoadBalancer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LoadBalancer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLoadBalancer sets the old LoadBalancer of the mutation.
func withLoadBalancer(node *LoadBalancer) loadbalancerOption {
	return func(m *LoadBalancerMutation) {
		m.oldValue = func(context.Context) (*LoadBalancer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LoadBalancerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LoadBalancerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of LoadBalancer entities.
func (m *LoadBalancerMutation) SetID(id gidx.PrefixedID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LoadBalancerMutation) ID() (id gidx.PrefixedID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LoadBalancerMutation) IDs(ctx context.Context) ([]gidx.PrefixedID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []gidx.PrefixedID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LoadBalancer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *LoadBalancerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LoadBalancerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the LoadBalancer entity.
// If the LoadBalancer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoadBalancerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LoadBalancerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LoadBalancerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LoadBalancerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the LoadBalancer entity.
// If the LoadBalancer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoadBalancerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LoadBalancerMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *LoadBalancerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LoadBalancerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the LoadBalancer entity.
// If the LoadBalancer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoadBalancerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LoadBalancerMutation) ResetName() {
	m.name = nil
}

// SetOwnerID sets the "owner_id" field.
func (m *LoadBalancerMutation) SetOwnerID(gi gidx.PrefixedID) {
	m.owner_id = &gi
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *LoadBalancerMutation) OwnerID() (r gidx.PrefixedID, exists bool) {
	v := m.owner_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the LoadBalancer entity.
// If the LoadBalancer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoadBalancerMutation) OldOwnerID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *LoadBalancerMutation) ResetOwnerID() {
	m.owner_id = nil
}

// SetLocationID sets the "location_id" field.
func (m *LoadBalancerMutation) SetLocationID(gi gidx.PrefixedID) {
	m.location_id = &gi
}

// LocationID returns the value of the "location_id" field in the mutation.
func (m *LoadBalancerMutation) LocationID() (r gidx.PrefixedID, exists bool) {
	v := m.location_id
	if v == nil {
		return
	}
	return *v, true
}

// OldLocationID returns the old "location_id" field's value of the LoadBalancer entity.
// If the LoadBalancer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoadBalancerMutation) OldLocationID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocationID: %w", err)
	}
	return oldValue.LocationID, nil
}

// ResetLocationID resets all changes to the "location_id" field.
func (m *LoadBalancerMutation) ResetLocationID() {
	m.location_id = nil
}

// SetProviderID sets the "provider_id" field.
func (m *LoadBalancerMutation) SetProviderID(gi gidx.PrefixedID) {
	m.provider = &gi
}

// ProviderID returns the value of the "provider_id" field in the mutation.
func (m *LoadBalancerMutation) ProviderID() (r gidx.PrefixedID, exists bool) {
	v := m.provider
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderID returns the old "provider_id" field's value of the LoadBalancer entity.
// If the LoadBalancer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoadBalancerMutation) OldProviderID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderID: %w", err)
	}
	return oldValue.ProviderID, nil
}

// ResetProviderID resets all changes to the "provider_id" field.
func (m *LoadBalancerMutation) ResetProviderID() {
	m.provider = nil
}

// AddPortIDs adds the "ports" edge to the Port entity by ids.
func (m *LoadBalancerMutation) AddPortIDs(ids ...gidx.PrefixedID) {
	if m.ports == nil {
		m.ports = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		m.ports[ids[i]] = struct{}{}
	}
}

// ClearPorts clears the "ports" edge to the Port entity.
func (m *LoadBalancerMutation) ClearPorts() {
	m.clearedports = true
}

// PortsCleared reports if the "ports" edge to the Port entity was cleared.
func (m *LoadBalancerMutation) PortsCleared() bool {
	return m.clearedports
}

// RemovePortIDs removes the "ports" edge to the Port entity by IDs.
func (m *LoadBalancerMutation) RemovePortIDs(ids ...gidx.PrefixedID) {
	if m.removedports == nil {
		m.removedports = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		delete(m.ports, ids[i])
		m.removedports[ids[i]] = struct{}{}
	}
}

// RemovedPorts returns the removed IDs of the "ports" edge to the Port entity.
func (m *LoadBalancerMutation) RemovedPortsIDs() (ids []gidx.PrefixedID) {
	for id := range m.removedports {
		ids = append(ids, id)
	}
	return
}

// PortsIDs returns the "ports" edge IDs in the mutation.
func (m *LoadBalancerMutation) PortsIDs() (ids []gidx.PrefixedID) {
	for id := range m.ports {
		ids = append(ids, id)
	}
	return
}

// ResetPorts resets all changes to the "ports" edge.
func (m *LoadBalancerMutation) ResetPorts() {
	m.ports = nil
	m.clearedports = false
	m.removedports = nil
}

// ClearProvider clears the "provider" edge to the Provider entity.
func (m *LoadBalancerMutation) ClearProvider() {
	m.clearedprovider = true
	m.clearedFields[loadbalancer.FieldProviderID] = struct{}{}
}

// ProviderCleared reports if the "provider" edge to the Provider entity was cleared.
func (m *LoadBalancerMutation) ProviderCleared() bool {
	return m.clearedprovider
}

// ProviderIDs returns the "provider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderID instead. It exists only for internal usage by the builders.
func (m *LoadBalancerMutation) ProviderIDs() (ids []gidx.PrefixedID) {
	if id := m.provider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProvider resets all changes to the "provider" edge.
func (m *LoadBalancerMutation) ResetProvider() {
	m.provider = nil
	m.clearedprovider = false
}

// Where appends a list predicates to the LoadBalancerMutation builder.
func (m *LoadBalancerMutation) Where(ps ...predicate.LoadBalancer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LoadBalancerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LoadBalancerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LoadBalancer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LoadBalancerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LoadBalancerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LoadBalancer).
func (m *LoadBalancerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LoadBalancerMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, loadbalancer.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, loadbalancer.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, loadbalancer.FieldName)
	}
	if m.owner_id != nil {
		fields = append(fields, loadbalancer.FieldOwnerID)
	}
	if m.location_id != nil {
		fields = append(fields, loadbalancer.FieldLocationID)
	}
	if m.provider != nil {
		fields = append(fields, loadbalancer.FieldProviderID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LoadBalancerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case loadbalancer.FieldCreatedAt:
		return m.CreatedAt()
	case loadbalancer.FieldUpdatedAt:
		return m.UpdatedAt()
	case loadbalancer.FieldName:
		return m.Name()
	case loadbalancer.FieldOwnerID:
		return m.OwnerID()
	case loadbalancer.FieldLocationID:
		return m.LocationID()
	case loadbalancer.FieldProviderID:
		return m.ProviderID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LoadBalancerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case loadbalancer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case loadbalancer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case loadbalancer.FieldName:
		return m.OldName(ctx)
	case loadbalancer.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case loadbalancer.FieldLocationID:
		return m.OldLocationID(ctx)
	case loadbalancer.FieldProviderID:
		return m.OldProviderID(ctx)
	}
	return nil, fmt.Errorf("unknown LoadBalancer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LoadBalancerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case loadbalancer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case loadbalancer.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case loadbalancer.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case loadbalancer.FieldOwnerID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case loadbalancer.FieldLocationID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocationID(v)
		return nil
	case loadbalancer.FieldProviderID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderID(v)
		return nil
	}
	return fmt.Errorf("unknown LoadBalancer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LoadBalancerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LoadBalancerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LoadBalancerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LoadBalancer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LoadBalancerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LoadBalancerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LoadBalancerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LoadBalancer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LoadBalancerMutation) ResetField(name string) error {
	switch name {
	case loadbalancer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case loadbalancer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case loadbalancer.FieldName:
		m.ResetName()
		return nil
	case loadbalancer.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case loadbalancer.FieldLocationID:
		m.ResetLocationID()
		return nil
	case loadbalancer.FieldProviderID:
		m.ResetProviderID()
		return nil
	}
	return fmt.Errorf("unknown LoadBalancer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LoadBalancerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.ports != nil {
		edges = append(edges, loadbalancer.EdgePorts)
	}
	if m.provider != nil {
		edges = append(edges, loadbalancer.EdgeProvider)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LoadBalancerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case loadbalancer.EdgePorts:
		ids := make([]ent.Value, 0, len(m.ports))
		for id := range m.ports {
			ids = append(ids, id)
		}
		return ids
	case loadbalancer.EdgeProvider:
		if id := m.provider; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LoadBalancerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedports != nil {
		edges = append(edges, loadbalancer.EdgePorts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LoadBalancerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case loadbalancer.EdgePorts:
		ids := make([]ent.Value, 0, len(m.removedports))
		for id := range m.removedports {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LoadBalancerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedports {
		edges = append(edges, loadbalancer.EdgePorts)
	}
	if m.clearedprovider {
		edges = append(edges, loadbalancer.EdgeProvider)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LoadBalancerMutation) EdgeCleared(name string) bool {
	switch name {
	case loadbalancer.EdgePorts:
		return m.clearedports
	case loadbalancer.EdgeProvider:
		return m.clearedprovider
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LoadBalancerMutation) ClearEdge(name string) error {
	switch name {
	case loadbalancer.EdgeProvider:
		m.ClearProvider()
		return nil
	}
	return fmt.Errorf("unknown LoadBalancer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LoadBalancerMutation) ResetEdge(name string) error {
	switch name {
	case loadbalancer.EdgePorts:
		m.ResetPorts()
		return nil
	case loadbalancer.EdgeProvider:
		m.ResetProvider()
		return nil
	}
	return fmt.Errorf("unknown LoadBalancer edge %s", name)
}

// OriginMutation represents an operation that mutates the Origin nodes in the graph.
type OriginMutation struct {
	config
	op             Op
	typ            string
	id             *gidx.PrefixedID
	created_at     *time.Time
	updated_at     *time.Time
	name           *string
	target         *string
	port_number    *int
	addport_number *int
	active         *bool
	clearedFields  map[string]struct{}
	pool           *gidx.PrefixedID
	clearedpool    bool
	done           bool
	oldValue       func(context.Context) (*Origin, error)
	predicates     []predicate.Origin
}

var _ ent.Mutation = (*OriginMutation)(nil)

// originOption allows management of the mutation configuration using functional options.
type originOption func(*OriginMutation)

// newOriginMutation creates new mutation for the Origin entity.
func newOriginMutation(c config, op Op, opts ...originOption) *OriginMutation {
	m := &OriginMutation{
		config:        c,
		op:            op,
		typ:           TypeOrigin,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOriginID sets the ID field of the mutation.
func withOriginID(id gidx.PrefixedID) originOption {
	return func(m *OriginMutation) {
		var (
			err   error
			once  sync.Once
			value *Origin
		)
		m.oldValue = func(ctx context.Context) (*Origin, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Origin.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrigin sets the old Origin of the mutation.
func withOrigin(node *Origin) originOption {
	return func(m *OriginMutation) {
		m.oldValue = func(context.Context) (*Origin, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OriginMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OriginMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Origin entities.
func (m *OriginMutation) SetID(id gidx.PrefixedID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OriginMutation) ID() (id gidx.PrefixedID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OriginMutation) IDs(ctx context.Context) ([]gidx.PrefixedID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []gidx.PrefixedID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Origin.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OriginMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OriginMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Origin entity.
// If the Origin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OriginMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OriginMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OriginMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OriginMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Origin entity.
// If the Origin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OriginMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OriginMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *OriginMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OriginMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Origin entity.
// If the Origin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OriginMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OriginMutation) ResetName() {
	m.name = nil
}

// SetTarget sets the "target" field.
func (m *OriginMutation) SetTarget(s string) {
	m.target = &s
}

// Target returns the value of the "target" field in the mutation.
func (m *OriginMutation) Target() (r string, exists bool) {
	v := m.target
	if v == nil {
		return
	}
	return *v, true
}

// OldTarget returns the old "target" field's value of the Origin entity.
// If the Origin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OriginMutation) OldTarget(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTarget is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTarget requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTarget: %w", err)
	}
	return oldValue.Target, nil
}

// ResetTarget resets all changes to the "target" field.
func (m *OriginMutation) ResetTarget() {
	m.target = nil
}

// SetPortNumber sets the "port_number" field.
func (m *OriginMutation) SetPortNumber(i int) {
	m.port_number = &i
	m.addport_number = nil
}

// PortNumber returns the value of the "port_number" field in the mutation.
func (m *OriginMutation) PortNumber() (r int, exists bool) {
	v := m.port_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPortNumber returns the old "port_number" field's value of the Origin entity.
// If the Origin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OriginMutation) OldPortNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPortNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPortNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPortNumber: %w", err)
	}
	return oldValue.PortNumber, nil
}

// AddPortNumber adds i to the "port_number" field.
func (m *OriginMutation) AddPortNumber(i int) {
	if m.addport_number != nil {
		*m.addport_number += i
	} else {
		m.addport_number = &i
	}
}

// AddedPortNumber returns the value that was added to the "port_number" field in this mutation.
func (m *OriginMutation) AddedPortNumber() (r int, exists bool) {
	v := m.addport_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetPortNumber resets all changes to the "port_number" field.
func (m *OriginMutation) ResetPortNumber() {
	m.port_number = nil
	m.addport_number = nil
}

// SetActive sets the "active" field.
func (m *OriginMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *OriginMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Origin entity.
// If the Origin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OriginMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *OriginMutation) ResetActive() {
	m.active = nil
}

// SetPoolID sets the "pool_id" field.
func (m *OriginMutation) SetPoolID(gi gidx.PrefixedID) {
	m.pool = &gi
}

// PoolID returns the value of the "pool_id" field in the mutation.
func (m *OriginMutation) PoolID() (r gidx.PrefixedID, exists bool) {
	v := m.pool
	if v == nil {
		return
	}
	return *v, true
}

// OldPoolID returns the old "pool_id" field's value of the Origin entity.
// If the Origin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OriginMutation) OldPoolID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoolID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoolID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoolID: %w", err)
	}
	return oldValue.PoolID, nil
}

// ResetPoolID resets all changes to the "pool_id" field.
func (m *OriginMutation) ResetPoolID() {
	m.pool = nil
}

// ClearPool clears the "pool" edge to the Pool entity.
func (m *OriginMutation) ClearPool() {
	m.clearedpool = true
	m.clearedFields[origin.FieldPoolID] = struct{}{}
}

// PoolCleared reports if the "pool" edge to the Pool entity was cleared.
func (m *OriginMutation) PoolCleared() bool {
	return m.clearedpool
}

// PoolIDs returns the "pool" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PoolID instead. It exists only for internal usage by the builders.
func (m *OriginMutation) PoolIDs() (ids []gidx.PrefixedID) {
	if id := m.pool; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPool resets all changes to the "pool" edge.
func (m *OriginMutation) ResetPool() {
	m.pool = nil
	m.clearedpool = false
}

// Where appends a list predicates to the OriginMutation builder.
func (m *OriginMutation) Where(ps ...predicate.Origin) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OriginMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OriginMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Origin, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OriginMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OriginMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Origin).
func (m *OriginMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OriginMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, origin.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, origin.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, origin.FieldName)
	}
	if m.target != nil {
		fields = append(fields, origin.FieldTarget)
	}
	if m.port_number != nil {
		fields = append(fields, origin.FieldPortNumber)
	}
	if m.active != nil {
		fields = append(fields, origin.FieldActive)
	}
	if m.pool != nil {
		fields = append(fields, origin.FieldPoolID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OriginMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case origin.FieldCreatedAt:
		return m.CreatedAt()
	case origin.FieldUpdatedAt:
		return m.UpdatedAt()
	case origin.FieldName:
		return m.Name()
	case origin.FieldTarget:
		return m.Target()
	case origin.FieldPortNumber:
		return m.PortNumber()
	case origin.FieldActive:
		return m.Active()
	case origin.FieldPoolID:
		return m.PoolID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OriginMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case origin.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case origin.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case origin.FieldName:
		return m.OldName(ctx)
	case origin.FieldTarget:
		return m.OldTarget(ctx)
	case origin.FieldPortNumber:
		return m.OldPortNumber(ctx)
	case origin.FieldActive:
		return m.OldActive(ctx)
	case origin.FieldPoolID:
		return m.OldPoolID(ctx)
	}
	return nil, fmt.Errorf("unknown Origin field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OriginMutation) SetField(name string, value ent.Value) error {
	switch name {
	case origin.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case origin.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case origin.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case origin.FieldTarget:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTarget(v)
		return nil
	case origin.FieldPortNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPortNumber(v)
		return nil
	case origin.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case origin.FieldPoolID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoolID(v)
		return nil
	}
	return fmt.Errorf("unknown Origin field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OriginMutation) AddedFields() []string {
	var fields []string
	if m.addport_number != nil {
		fields = append(fields, origin.FieldPortNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OriginMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case origin.FieldPortNumber:
		return m.AddedPortNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OriginMutation) AddField(name string, value ent.Value) error {
	switch name {
	case origin.FieldPortNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPortNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Origin numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OriginMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OriginMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OriginMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Origin nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OriginMutation) ResetField(name string) error {
	switch name {
	case origin.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case origin.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case origin.FieldName:
		m.ResetName()
		return nil
	case origin.FieldTarget:
		m.ResetTarget()
		return nil
	case origin.FieldPortNumber:
		m.ResetPortNumber()
		return nil
	case origin.FieldActive:
		m.ResetActive()
		return nil
	case origin.FieldPoolID:
		m.ResetPoolID()
		return nil
	}
	return fmt.Errorf("unknown Origin field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OriginMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.pool != nil {
		edges = append(edges, origin.EdgePool)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OriginMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case origin.EdgePool:
		if id := m.pool; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OriginMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OriginMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OriginMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpool {
		edges = append(edges, origin.EdgePool)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OriginMutation) EdgeCleared(name string) bool {
	switch name {
	case origin.EdgePool:
		return m.clearedpool
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OriginMutation) ClearEdge(name string) error {
	switch name {
	case origin.EdgePool:
		m.ClearPool()
		return nil
	}
	return fmt.Errorf("unknown Origin unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OriginMutation) ResetEdge(name string) error {
	switch name {
	case origin.EdgePool:
		m.ResetPool()
		return nil
	}
	return fmt.Errorf("unknown Origin edge %s", name)
}

// PoolMutation represents an operation that mutates the Pool nodes in the graph.
type PoolMutation struct {
	config
	op             Op
	typ            string
	id             *gidx.PrefixedID
	created_at     *time.Time
	updated_at     *time.Time
	name           *string
	protocol       *pool.Protocol
	owner_id       *gidx.PrefixedID
	clearedFields  map[string]struct{}
	ports          map[gidx.PrefixedID]struct{}
	removedports   map[gidx.PrefixedID]struct{}
	clearedports   bool
	origins        map[gidx.PrefixedID]struct{}
	removedorigins map[gidx.PrefixedID]struct{}
	clearedorigins bool
	done           bool
	oldValue       func(context.Context) (*Pool, error)
	predicates     []predicate.Pool
}

var _ ent.Mutation = (*PoolMutation)(nil)

// poolOption allows management of the mutation configuration using functional options.
type poolOption func(*PoolMutation)

// newPoolMutation creates new mutation for the Pool entity.
func newPoolMutation(c config, op Op, opts ...poolOption) *PoolMutation {
	m := &PoolMutation{
		config:        c,
		op:            op,
		typ:           TypePool,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPoolID sets the ID field of the mutation.
func withPoolID(id gidx.PrefixedID) poolOption {
	return func(m *PoolMutation) {
		var (
			err   error
			once  sync.Once
			value *Pool
		)
		m.oldValue = func(ctx context.Context) (*Pool, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Pool.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPool sets the old Pool of the mutation.
func withPool(node *Pool) poolOption {
	return func(m *PoolMutation) {
		m.oldValue = func(context.Context) (*Pool, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PoolMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PoolMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Pool entities.
func (m *PoolMutation) SetID(id gidx.PrefixedID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PoolMutation) ID() (id gidx.PrefixedID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PoolMutation) IDs(ctx context.Context) ([]gidx.PrefixedID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []gidx.PrefixedID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Pool.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PoolMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PoolMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Pool entity.
// If the Pool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PoolMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PoolMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PoolMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PoolMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Pool entity.
// If the Pool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PoolMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PoolMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *PoolMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PoolMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Pool entity.
// If the Pool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PoolMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PoolMutation) ResetName() {
	m.name = nil
}

// SetProtocol sets the "protocol" field.
func (m *PoolMutation) SetProtocol(po pool.Protocol) {
	m.protocol = &po
}

// Protocol returns the value of the "protocol" field in the mutation.
func (m *PoolMutation) Protocol() (r pool.Protocol, exists bool) {
	v := m.protocol
	if v == nil {
		return
	}
	return *v, true
}

// OldProtocol returns the old "protocol" field's value of the Pool entity.
// If the Pool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PoolMutation) OldProtocol(ctx context.Context) (v pool.Protocol, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProtocol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProtocol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProtocol: %w", err)
	}
	return oldValue.Protocol, nil
}

// ResetProtocol resets all changes to the "protocol" field.
func (m *PoolMutation) ResetProtocol() {
	m.protocol = nil
}

// SetOwnerID sets the "owner_id" field.
func (m *PoolMutation) SetOwnerID(gi gidx.PrefixedID) {
	m.owner_id = &gi
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *PoolMutation) OwnerID() (r gidx.PrefixedID, exists bool) {
	v := m.owner_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the Pool entity.
// If the Pool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PoolMutation) OldOwnerID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *PoolMutation) ResetOwnerID() {
	m.owner_id = nil
}

// AddPortIDs adds the "ports" edge to the Port entity by ids.
func (m *PoolMutation) AddPortIDs(ids ...gidx.PrefixedID) {
	if m.ports == nil {
		m.ports = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		m.ports[ids[i]] = struct{}{}
	}
}

// ClearPorts clears the "ports" edge to the Port entity.
func (m *PoolMutation) ClearPorts() {
	m.clearedports = true
}

// PortsCleared reports if the "ports" edge to the Port entity was cleared.
func (m *PoolMutation) PortsCleared() bool {
	return m.clearedports
}

// RemovePortIDs removes the "ports" edge to the Port entity by IDs.
func (m *PoolMutation) RemovePortIDs(ids ...gidx.PrefixedID) {
	if m.removedports == nil {
		m.removedports = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		delete(m.ports, ids[i])
		m.removedports[ids[i]] = struct{}{}
	}
}

// RemovedPorts returns the removed IDs of the "ports" edge to the Port entity.
func (m *PoolMutation) RemovedPortsIDs() (ids []gidx.PrefixedID) {
	for id := range m.removedports {
		ids = append(ids, id)
	}
	return
}

// PortsIDs returns the "ports" edge IDs in the mutation.
func (m *PoolMutation) PortsIDs() (ids []gidx.PrefixedID) {
	for id := range m.ports {
		ids = append(ids, id)
	}
	return
}

// ResetPorts resets all changes to the "ports" edge.
func (m *PoolMutation) ResetPorts() {
	m.ports = nil
	m.clearedports = false
	m.removedports = nil
}

// AddOriginIDs adds the "origins" edge to the Origin entity by ids.
func (m *PoolMutation) AddOriginIDs(ids ...gidx.PrefixedID) {
	if m.origins == nil {
		m.origins = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		m.origins[ids[i]] = struct{}{}
	}
}

// ClearOrigins clears the "origins" edge to the Origin entity.
func (m *PoolMutation) ClearOrigins() {
	m.clearedorigins = true
}

// OriginsCleared reports if the "origins" edge to the Origin entity was cleared.
func (m *PoolMutation) OriginsCleared() bool {
	return m.clearedorigins
}

// RemoveOriginIDs removes the "origins" edge to the Origin entity by IDs.
func (m *PoolMutation) RemoveOriginIDs(ids ...gidx.PrefixedID) {
	if m.removedorigins == nil {
		m.removedorigins = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		delete(m.origins, ids[i])
		m.removedorigins[ids[i]] = struct{}{}
	}
}

// RemovedOrigins returns the removed IDs of the "origins" edge to the Origin entity.
func (m *PoolMutation) RemovedOriginsIDs() (ids []gidx.PrefixedID) {
	for id := range m.removedorigins {
		ids = append(ids, id)
	}
	return
}

// OriginsIDs returns the "origins" edge IDs in the mutation.
func (m *PoolMutation) OriginsIDs() (ids []gidx.PrefixedID) {
	for id := range m.origins {
		ids = append(ids, id)
	}
	return
}

// ResetOrigins resets all changes to the "origins" edge.
func (m *PoolMutation) ResetOrigins() {
	m.origins = nil
	m.clearedorigins = false
	m.removedorigins = nil
}

// Where appends a list predicates to the PoolMutation builder.
func (m *PoolMutation) Where(ps ...predicate.Pool) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PoolMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PoolMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Pool, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PoolMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PoolMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Pool).
func (m *PoolMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PoolMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, pool.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, pool.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, pool.FieldName)
	}
	if m.protocol != nil {
		fields = append(fields, pool.FieldProtocol)
	}
	if m.owner_id != nil {
		fields = append(fields, pool.FieldOwnerID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PoolMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pool.FieldCreatedAt:
		return m.CreatedAt()
	case pool.FieldUpdatedAt:
		return m.UpdatedAt()
	case pool.FieldName:
		return m.Name()
	case pool.FieldProtocol:
		return m.Protocol()
	case pool.FieldOwnerID:
		return m.OwnerID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PoolMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pool.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case pool.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case pool.FieldName:
		return m.OldName(ctx)
	case pool.FieldProtocol:
		return m.OldProtocol(ctx)
	case pool.FieldOwnerID:
		return m.OldOwnerID(ctx)
	}
	return nil, fmt.Errorf("unknown Pool field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PoolMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pool.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case pool.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case pool.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case pool.FieldProtocol:
		v, ok := value.(pool.Protocol)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProtocol(v)
		return nil
	case pool.FieldOwnerID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	}
	return fmt.Errorf("unknown Pool field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PoolMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PoolMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PoolMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Pool numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PoolMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PoolMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PoolMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Pool nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PoolMutation) ResetField(name string) error {
	switch name {
	case pool.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case pool.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case pool.FieldName:
		m.ResetName()
		return nil
	case pool.FieldProtocol:
		m.ResetProtocol()
		return nil
	case pool.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	}
	return fmt.Errorf("unknown Pool field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PoolMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.ports != nil {
		edges = append(edges, pool.EdgePorts)
	}
	if m.origins != nil {
		edges = append(edges, pool.EdgeOrigins)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PoolMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pool.EdgePorts:
		ids := make([]ent.Value, 0, len(m.ports))
		for id := range m.ports {
			ids = append(ids, id)
		}
		return ids
	case pool.EdgeOrigins:
		ids := make([]ent.Value, 0, len(m.origins))
		for id := range m.origins {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PoolMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedports != nil {
		edges = append(edges, pool.EdgePorts)
	}
	if m.removedorigins != nil {
		edges = append(edges, pool.EdgeOrigins)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PoolMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case pool.EdgePorts:
		ids := make([]ent.Value, 0, len(m.removedports))
		for id := range m.removedports {
			ids = append(ids, id)
		}
		return ids
	case pool.EdgeOrigins:
		ids := make([]ent.Value, 0, len(m.removedorigins))
		for id := range m.removedorigins {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PoolMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedports {
		edges = append(edges, pool.EdgePorts)
	}
	if m.clearedorigins {
		edges = append(edges, pool.EdgeOrigins)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PoolMutation) EdgeCleared(name string) bool {
	switch name {
	case pool.EdgePorts:
		return m.clearedports
	case pool.EdgeOrigins:
		return m.clearedorigins
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PoolMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Pool unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PoolMutation) ResetEdge(name string) error {
	switch name {
	case pool.EdgePorts:
		m.ResetPorts()
		return nil
	case pool.EdgeOrigins:
		m.ResetOrigins()
		return nil
	}
	return fmt.Errorf("unknown Pool edge %s", name)
}

// PortMutation represents an operation that mutates the Port nodes in the graph.
type PortMutation struct {
	config
	op                   Op
	typ                  string
	id                   *gidx.PrefixedID
	created_at           *time.Time
	updated_at           *time.Time
	number               *int
	addnumber            *int
	name                 *string
	clearedFields        map[string]struct{}
	pools                map[gidx.PrefixedID]struct{}
	removedpools         map[gidx.PrefixedID]struct{}
	clearedpools         bool
	load_balancer        *gidx.PrefixedID
	clearedload_balancer bool
	done                 bool
	oldValue             func(context.Context) (*Port, error)
	predicates           []predicate.Port
}

var _ ent.Mutation = (*PortMutation)(nil)

// portOption allows management of the mutation configuration using functional options.
type portOption func(*PortMutation)

// newPortMutation creates new mutation for the Port entity.
func newPortMutation(c config, op Op, opts ...portOption) *PortMutation {
	m := &PortMutation{
		config:        c,
		op:            op,
		typ:           TypePort,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPortID sets the ID field of the mutation.
func withPortID(id gidx.PrefixedID) portOption {
	return func(m *PortMutation) {
		var (
			err   error
			once  sync.Once
			value *Port
		)
		m.oldValue = func(ctx context.Context) (*Port, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Port.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPort sets the old Port of the mutation.
func withPort(node *Port) portOption {
	return func(m *PortMutation) {
		m.oldValue = func(context.Context) (*Port, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PortMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PortMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Port entities.
func (m *PortMutation) SetID(id gidx.PrefixedID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PortMutation) ID() (id gidx.PrefixedID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PortMutation) IDs(ctx context.Context) ([]gidx.PrefixedID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []gidx.PrefixedID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Port.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PortMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PortMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Port entity.
// If the Port object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PortMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PortMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PortMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PortMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Port entity.
// If the Port object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PortMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PortMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetNumber sets the "number" field.
func (m *PortMutation) SetNumber(i int) {
	m.number = &i
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *PortMutation) Number() (r int, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the Port entity.
// If the Port object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PortMutation) OldNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds i to the "number" field.
func (m *PortMutation) AddNumber(i int) {
	if m.addnumber != nil {
		*m.addnumber += i
	} else {
		m.addnumber = &i
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *PortMutation) AddedNumber() (r int, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *PortMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetName sets the "name" field.
func (m *PortMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PortMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Port entity.
// If the Port object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PortMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PortMutation) ResetName() {
	m.name = nil
}

// SetLoadBalancerID sets the "load_balancer_id" field.
func (m *PortMutation) SetLoadBalancerID(gi gidx.PrefixedID) {
	m.load_balancer = &gi
}

// LoadBalancerID returns the value of the "load_balancer_id" field in the mutation.
func (m *PortMutation) LoadBalancerID() (r gidx.PrefixedID, exists bool) {
	v := m.load_balancer
	if v == nil {
		return
	}
	return *v, true
}

// OldLoadBalancerID returns the old "load_balancer_id" field's value of the Port entity.
// If the Port object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PortMutation) OldLoadBalancerID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoadBalancerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoadBalancerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoadBalancerID: %w", err)
	}
	return oldValue.LoadBalancerID, nil
}

// ResetLoadBalancerID resets all changes to the "load_balancer_id" field.
func (m *PortMutation) ResetLoadBalancerID() {
	m.load_balancer = nil
}

// AddPoolIDs adds the "pools" edge to the Pool entity by ids.
func (m *PortMutation) AddPoolIDs(ids ...gidx.PrefixedID) {
	if m.pools == nil {
		m.pools = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		m.pools[ids[i]] = struct{}{}
	}
}

// ClearPools clears the "pools" edge to the Pool entity.
func (m *PortMutation) ClearPools() {
	m.clearedpools = true
}

// PoolsCleared reports if the "pools" edge to the Pool entity was cleared.
func (m *PortMutation) PoolsCleared() bool {
	return m.clearedpools
}

// RemovePoolIDs removes the "pools" edge to the Pool entity by IDs.
func (m *PortMutation) RemovePoolIDs(ids ...gidx.PrefixedID) {
	if m.removedpools == nil {
		m.removedpools = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		delete(m.pools, ids[i])
		m.removedpools[ids[i]] = struct{}{}
	}
}

// RemovedPools returns the removed IDs of the "pools" edge to the Pool entity.
func (m *PortMutation) RemovedPoolsIDs() (ids []gidx.PrefixedID) {
	for id := range m.removedpools {
		ids = append(ids, id)
	}
	return
}

// PoolsIDs returns the "pools" edge IDs in the mutation.
func (m *PortMutation) PoolsIDs() (ids []gidx.PrefixedID) {
	for id := range m.pools {
		ids = append(ids, id)
	}
	return
}

// ResetPools resets all changes to the "pools" edge.
func (m *PortMutation) ResetPools() {
	m.pools = nil
	m.clearedpools = false
	m.removedpools = nil
}

// ClearLoadBalancer clears the "load_balancer" edge to the LoadBalancer entity.
func (m *PortMutation) ClearLoadBalancer() {
	m.clearedload_balancer = true
	m.clearedFields[port.FieldLoadBalancerID] = struct{}{}
}

// LoadBalancerCleared reports if the "load_balancer" edge to the LoadBalancer entity was cleared.
func (m *PortMutation) LoadBalancerCleared() bool {
	return m.clearedload_balancer
}

// LoadBalancerIDs returns the "load_balancer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LoadBalancerID instead. It exists only for internal usage by the builders.
func (m *PortMutation) LoadBalancerIDs() (ids []gidx.PrefixedID) {
	if id := m.load_balancer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLoadBalancer resets all changes to the "load_balancer" edge.
func (m *PortMutation) ResetLoadBalancer() {
	m.load_balancer = nil
	m.clearedload_balancer = false
}

// Where appends a list predicates to the PortMutation builder.
func (m *PortMutation) Where(ps ...predicate.Port) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PortMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PortMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Port, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PortMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PortMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Port).
func (m *PortMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PortMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, port.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, port.FieldUpdatedAt)
	}
	if m.number != nil {
		fields = append(fields, port.FieldNumber)
	}
	if m.name != nil {
		fields = append(fields, port.FieldName)
	}
	if m.load_balancer != nil {
		fields = append(fields, port.FieldLoadBalancerID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PortMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case port.FieldCreatedAt:
		return m.CreatedAt()
	case port.FieldUpdatedAt:
		return m.UpdatedAt()
	case port.FieldNumber:
		return m.Number()
	case port.FieldName:
		return m.Name()
	case port.FieldLoadBalancerID:
		return m.LoadBalancerID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PortMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case port.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case port.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case port.FieldNumber:
		return m.OldNumber(ctx)
	case port.FieldName:
		return m.OldName(ctx)
	case port.FieldLoadBalancerID:
		return m.OldLoadBalancerID(ctx)
	}
	return nil, fmt.Errorf("unknown Port field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PortMutation) SetField(name string, value ent.Value) error {
	switch name {
	case port.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case port.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case port.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	case port.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case port.FieldLoadBalancerID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoadBalancerID(v)
		return nil
	}
	return fmt.Errorf("unknown Port field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PortMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, port.FieldNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PortMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case port.FieldNumber:
		return m.AddedNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PortMutation) AddField(name string, value ent.Value) error {
	switch name {
	case port.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Port numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PortMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PortMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PortMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Port nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PortMutation) ResetField(name string) error {
	switch name {
	case port.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case port.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case port.FieldNumber:
		m.ResetNumber()
		return nil
	case port.FieldName:
		m.ResetName()
		return nil
	case port.FieldLoadBalancerID:
		m.ResetLoadBalancerID()
		return nil
	}
	return fmt.Errorf("unknown Port field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PortMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.pools != nil {
		edges = append(edges, port.EdgePools)
	}
	if m.load_balancer != nil {
		edges = append(edges, port.EdgeLoadBalancer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PortMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case port.EdgePools:
		ids := make([]ent.Value, 0, len(m.pools))
		for id := range m.pools {
			ids = append(ids, id)
		}
		return ids
	case port.EdgeLoadBalancer:
		if id := m.load_balancer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PortMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpools != nil {
		edges = append(edges, port.EdgePools)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PortMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case port.EdgePools:
		ids := make([]ent.Value, 0, len(m.removedpools))
		for id := range m.removedpools {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PortMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpools {
		edges = append(edges, port.EdgePools)
	}
	if m.clearedload_balancer {
		edges = append(edges, port.EdgeLoadBalancer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PortMutation) EdgeCleared(name string) bool {
	switch name {
	case port.EdgePools:
		return m.clearedpools
	case port.EdgeLoadBalancer:
		return m.clearedload_balancer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PortMutation) ClearEdge(name string) error {
	switch name {
	case port.EdgeLoadBalancer:
		m.ClearLoadBalancer()
		return nil
	}
	return fmt.Errorf("unknown Port unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PortMutation) ResetEdge(name string) error {
	switch name {
	case port.EdgePools:
		m.ResetPools()
		return nil
	case port.EdgeLoadBalancer:
		m.ResetLoadBalancer()
		return nil
	}
	return fmt.Errorf("unknown Port edge %s", name)
}

// ProviderMutation represents an operation that mutates the Provider nodes in the graph.
type ProviderMutation struct {
	config
	op                    Op
	typ                   string
	id                    *gidx.PrefixedID
	created_at            *time.Time
	updated_at            *time.Time
	name                  *string
	owner_id              *gidx.PrefixedID
	clearedFields         map[string]struct{}
	load_balancers        map[gidx.PrefixedID]struct{}
	removedload_balancers map[gidx.PrefixedID]struct{}
	clearedload_balancers bool
	done                  bool
	oldValue              func(context.Context) (*Provider, error)
	predicates            []predicate.Provider
}

var _ ent.Mutation = (*ProviderMutation)(nil)

// providerOption allows management of the mutation configuration using functional options.
type providerOption func(*ProviderMutation)

// newProviderMutation creates new mutation for the Provider entity.
func newProviderMutation(c config, op Op, opts ...providerOption) *ProviderMutation {
	m := &ProviderMutation{
		config:        c,
		op:            op,
		typ:           TypeProvider,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProviderID sets the ID field of the mutation.
func withProviderID(id gidx.PrefixedID) providerOption {
	return func(m *ProviderMutation) {
		var (
			err   error
			once  sync.Once
			value *Provider
		)
		m.oldValue = func(ctx context.Context) (*Provider, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Provider.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProvider sets the old Provider of the mutation.
func withProvider(node *Provider) providerOption {
	return func(m *ProviderMutation) {
		m.oldValue = func(context.Context) (*Provider, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProviderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProviderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Provider entities.
func (m *ProviderMutation) SetID(id gidx.PrefixedID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProviderMutation) ID() (id gidx.PrefixedID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProviderMutation) IDs(ctx context.Context) ([]gidx.PrefixedID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []gidx.PrefixedID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Provider.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ProviderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProviderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProviderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProviderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProviderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProviderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *ProviderMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProviderMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProviderMutation) ResetName() {
	m.name = nil
}

// SetOwnerID sets the "owner_id" field.
func (m *ProviderMutation) SetOwnerID(gi gidx.PrefixedID) {
	m.owner_id = &gi
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *ProviderMutation) OwnerID() (r gidx.PrefixedID, exists bool) {
	v := m.owner_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldOwnerID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *ProviderMutation) ResetOwnerID() {
	m.owner_id = nil
}

// AddLoadBalancerIDs adds the "load_balancers" edge to the LoadBalancer entity by ids.
func (m *ProviderMutation) AddLoadBalancerIDs(ids ...gidx.PrefixedID) {
	if m.load_balancers == nil {
		m.load_balancers = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		m.load_balancers[ids[i]] = struct{}{}
	}
}

// ClearLoadBalancers clears the "load_balancers" edge to the LoadBalancer entity.
func (m *ProviderMutation) ClearLoadBalancers() {
	m.clearedload_balancers = true
}

// LoadBalancersCleared reports if the "load_balancers" edge to the LoadBalancer entity was cleared.
func (m *ProviderMutation) LoadBalancersCleared() bool {
	return m.clearedload_balancers
}

// RemoveLoadBalancerIDs removes the "load_balancers" edge to the LoadBalancer entity by IDs.
func (m *ProviderMutation) RemoveLoadBalancerIDs(ids ...gidx.PrefixedID) {
	if m.removedload_balancers == nil {
		m.removedload_balancers = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		delete(m.load_balancers, ids[i])
		m.removedload_balancers[ids[i]] = struct{}{}
	}
}

// RemovedLoadBalancers returns the removed IDs of the "load_balancers" edge to the LoadBalancer entity.
func (m *ProviderMutation) RemovedLoadBalancersIDs() (ids []gidx.PrefixedID) {
	for id := range m.removedload_balancers {
		ids = append(ids, id)
	}
	return
}

// LoadBalancersIDs returns the "load_balancers" edge IDs in the mutation.
func (m *ProviderMutation) LoadBalancersIDs() (ids []gidx.PrefixedID) {
	for id := range m.load_balancers {
		ids = append(ids, id)
	}
	return
}

// ResetLoadBalancers resets all changes to the "load_balancers" edge.
func (m *ProviderMutation) ResetLoadBalancers() {
	m.load_balancers = nil
	m.clearedload_balancers = false
	m.removedload_balancers = nil
}

// Where appends a list predicates to the ProviderMutation builder.
func (m *ProviderMutation) Where(ps ...predicate.Provider) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProviderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProviderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Provider, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProviderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProviderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Provider).
func (m *ProviderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProviderMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, provider.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, provider.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, provider.FieldName)
	}
	if m.owner_id != nil {
		fields = append(fields, provider.FieldOwnerID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProviderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case provider.FieldCreatedAt:
		return m.CreatedAt()
	case provider.FieldUpdatedAt:
		return m.UpdatedAt()
	case provider.FieldName:
		return m.Name()
	case provider.FieldOwnerID:
		return m.OwnerID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProviderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case provider.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case provider.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case provider.FieldName:
		return m.OldName(ctx)
	case provider.FieldOwnerID:
		return m.OldOwnerID(ctx)
	}
	return nil, fmt.Errorf("unknown Provider field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case provider.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case provider.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case provider.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case provider.FieldOwnerID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	}
	return fmt.Errorf("unknown Provider field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProviderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProviderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Provider numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProviderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProviderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProviderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Provider nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProviderMutation) ResetField(name string) error {
	switch name {
	case provider.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case provider.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case provider.FieldName:
		m.ResetName()
		return nil
	case provider.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	}
	return fmt.Errorf("unknown Provider field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProviderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.load_balancers != nil {
		edges = append(edges, provider.EdgeLoadBalancers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProviderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case provider.EdgeLoadBalancers:
		ids := make([]ent.Value, 0, len(m.load_balancers))
		for id := range m.load_balancers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProviderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedload_balancers != nil {
		edges = append(edges, provider.EdgeLoadBalancers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProviderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case provider.EdgeLoadBalancers:
		ids := make([]ent.Value, 0, len(m.removedload_balancers))
		for id := range m.removedload_balancers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProviderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedload_balancers {
		edges = append(edges, provider.EdgeLoadBalancers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProviderMutation) EdgeCleared(name string) bool {
	switch name {
	case provider.EdgeLoadBalancers:
		return m.clearedload_balancers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProviderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Provider unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProviderMutation) ResetEdge(name string) error {
	switch name {
	case provider.EdgeLoadBalancers:
		m.ResetLoadBalancers()
		return nil
	}
	return fmt.Errorf("unknown Provider edge %s", name)
}
