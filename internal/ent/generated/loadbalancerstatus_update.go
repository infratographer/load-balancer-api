// Copyright Infratographer, Inc. and/or licensed to Infratographer, Inc. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancerstatus"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/predicate"
)

// LoadBalancerStatusUpdate is the builder for updating LoadBalancerStatus entities.
type LoadBalancerStatusUpdate struct {
	config
	hooks    []Hook
	mutation *LoadBalancerStatusMutation
}

// Where appends a list predicates to the LoadBalancerStatusUpdate builder.
func (lbsu *LoadBalancerStatusUpdate) Where(ps ...predicate.LoadBalancerStatus) *LoadBalancerStatusUpdate {
	lbsu.mutation.Where(ps...)
	return lbsu
}

// SetNamespace sets the "namespace" field.
func (lbsu *LoadBalancerStatusUpdate) SetNamespace(s string) *LoadBalancerStatusUpdate {
	lbsu.mutation.SetNamespace(s)
	return lbsu
}

// SetData sets the "data" field.
func (lbsu *LoadBalancerStatusUpdate) SetData(jm json.RawMessage) *LoadBalancerStatusUpdate {
	lbsu.mutation.SetData(jm)
	return lbsu
}

// AppendData appends jm to the "data" field.
func (lbsu *LoadBalancerStatusUpdate) AppendData(jm json.RawMessage) *LoadBalancerStatusUpdate {
	lbsu.mutation.AppendData(jm)
	return lbsu
}

// Mutation returns the LoadBalancerStatusMutation object of the builder.
func (lbsu *LoadBalancerStatusUpdate) Mutation() *LoadBalancerStatusMutation {
	return lbsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lbsu *LoadBalancerStatusUpdate) Save(ctx context.Context) (int, error) {
	lbsu.defaults()
	return withHooks[int, LoadBalancerStatusMutation](ctx, lbsu.sqlSave, lbsu.mutation, lbsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lbsu *LoadBalancerStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := lbsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lbsu *LoadBalancerStatusUpdate) Exec(ctx context.Context) error {
	_, err := lbsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lbsu *LoadBalancerStatusUpdate) ExecX(ctx context.Context) {
	if err := lbsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lbsu *LoadBalancerStatusUpdate) defaults() {
	if _, ok := lbsu.mutation.UpdatedAt(); !ok {
		v := loadbalancerstatus.UpdateDefaultUpdatedAt()
		lbsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lbsu *LoadBalancerStatusUpdate) check() error {
	if v, ok := lbsu.mutation.Namespace(); ok {
		if err := loadbalancerstatus.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`generated: validator failed for field "LoadBalancerStatus.namespace": %w`, err)}
		}
	}
	if _, ok := lbsu.mutation.LoadBalancerID(); lbsu.mutation.LoadBalancerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "LoadBalancerStatus.load_balancer"`)
	}
	return nil
}

func (lbsu *LoadBalancerStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lbsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(loadbalancerstatus.Table, loadbalancerstatus.Columns, sqlgraph.NewFieldSpec(loadbalancerstatus.FieldID, field.TypeString))
	if ps := lbsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lbsu.mutation.Namespace(); ok {
		_spec.SetField(loadbalancerstatus.FieldNamespace, field.TypeString, value)
	}
	if value, ok := lbsu.mutation.Data(); ok {
		_spec.SetField(loadbalancerstatus.FieldData, field.TypeJSON, value)
	}
	if value, ok := lbsu.mutation.AppendedData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, loadbalancerstatus.FieldData, value)
		})
	}
	if value, ok := lbsu.mutation.UpdatedAt(); ok {
		_spec.SetField(loadbalancerstatus.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lbsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loadbalancerstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lbsu.mutation.done = true
	return n, nil
}

// LoadBalancerStatusUpdateOne is the builder for updating a single LoadBalancerStatus entity.
type LoadBalancerStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoadBalancerStatusMutation
}

// SetNamespace sets the "namespace" field.
func (lbsuo *LoadBalancerStatusUpdateOne) SetNamespace(s string) *LoadBalancerStatusUpdateOne {
	lbsuo.mutation.SetNamespace(s)
	return lbsuo
}

// SetData sets the "data" field.
func (lbsuo *LoadBalancerStatusUpdateOne) SetData(jm json.RawMessage) *LoadBalancerStatusUpdateOne {
	lbsuo.mutation.SetData(jm)
	return lbsuo
}

// AppendData appends jm to the "data" field.
func (lbsuo *LoadBalancerStatusUpdateOne) AppendData(jm json.RawMessage) *LoadBalancerStatusUpdateOne {
	lbsuo.mutation.AppendData(jm)
	return lbsuo
}

// Mutation returns the LoadBalancerStatusMutation object of the builder.
func (lbsuo *LoadBalancerStatusUpdateOne) Mutation() *LoadBalancerStatusMutation {
	return lbsuo.mutation
}

// Where appends a list predicates to the LoadBalancerStatusUpdate builder.
func (lbsuo *LoadBalancerStatusUpdateOne) Where(ps ...predicate.LoadBalancerStatus) *LoadBalancerStatusUpdateOne {
	lbsuo.mutation.Where(ps...)
	return lbsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lbsuo *LoadBalancerStatusUpdateOne) Select(field string, fields ...string) *LoadBalancerStatusUpdateOne {
	lbsuo.fields = append([]string{field}, fields...)
	return lbsuo
}

// Save executes the query and returns the updated LoadBalancerStatus entity.
func (lbsuo *LoadBalancerStatusUpdateOne) Save(ctx context.Context) (*LoadBalancerStatus, error) {
	lbsuo.defaults()
	return withHooks[*LoadBalancerStatus, LoadBalancerStatusMutation](ctx, lbsuo.sqlSave, lbsuo.mutation, lbsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lbsuo *LoadBalancerStatusUpdateOne) SaveX(ctx context.Context) *LoadBalancerStatus {
	node, err := lbsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lbsuo *LoadBalancerStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := lbsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lbsuo *LoadBalancerStatusUpdateOne) ExecX(ctx context.Context) {
	if err := lbsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lbsuo *LoadBalancerStatusUpdateOne) defaults() {
	if _, ok := lbsuo.mutation.UpdatedAt(); !ok {
		v := loadbalancerstatus.UpdateDefaultUpdatedAt()
		lbsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lbsuo *LoadBalancerStatusUpdateOne) check() error {
	if v, ok := lbsuo.mutation.Namespace(); ok {
		if err := loadbalancerstatus.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`generated: validator failed for field "LoadBalancerStatus.namespace": %w`, err)}
		}
	}
	if _, ok := lbsuo.mutation.LoadBalancerID(); lbsuo.mutation.LoadBalancerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "LoadBalancerStatus.load_balancer"`)
	}
	return nil
}

func (lbsuo *LoadBalancerStatusUpdateOne) sqlSave(ctx context.Context) (_node *LoadBalancerStatus, err error) {
	if err := lbsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(loadbalancerstatus.Table, loadbalancerstatus.Columns, sqlgraph.NewFieldSpec(loadbalancerstatus.FieldID, field.TypeString))
	id, ok := lbsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "LoadBalancerStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lbsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loadbalancerstatus.FieldID)
		for _, f := range fields {
			if !loadbalancerstatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != loadbalancerstatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lbsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lbsuo.mutation.Namespace(); ok {
		_spec.SetField(loadbalancerstatus.FieldNamespace, field.TypeString, value)
	}
	if value, ok := lbsuo.mutation.Data(); ok {
		_spec.SetField(loadbalancerstatus.FieldData, field.TypeJSON, value)
	}
	if value, ok := lbsuo.mutation.AppendedData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, loadbalancerstatus.FieldData, value)
		})
	}
	if value, ok := lbsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(loadbalancerstatus.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &LoadBalancerStatus{config: lbsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lbsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loadbalancerstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lbsuo.mutation.done = true
	return _node, nil
}
