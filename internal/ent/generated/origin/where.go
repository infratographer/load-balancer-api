// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package origin

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/gidx"
)

// ID filters vertices based on their ID field.
func ID(id gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldName, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v int32) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldWeight, v))
}

// Target applies equality check predicate on the "target" field. It's identical to TargetEQ.
func Target(v string) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldTarget, v))
}

// PortNumber applies equality check predicate on the "port_number" field. It's identical to PortNumberEQ.
func PortNumber(v int) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldPortNumber, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldActive, v))
}

// PoolID applies equality check predicate on the "pool_id" field. It's identical to PoolIDEQ.
func PoolID(v gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldPoolID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Origin {
	return predicate.Origin(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Origin {
	return predicate.Origin(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Origin {
	return predicate.Origin(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Origin {
	return predicate.Origin(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Origin {
	return predicate.Origin(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Origin {
	return predicate.Origin(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Origin {
	return predicate.Origin(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Origin {
	return predicate.Origin(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Origin {
	return predicate.Origin(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Origin {
	return predicate.Origin(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Origin {
	return predicate.Origin(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Origin {
	return predicate.Origin(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Origin {
	return predicate.Origin(sql.FieldContainsFold(FieldName, v))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v int32) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v int32) predicate.Origin {
	return predicate.Origin(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...int32) predicate.Origin {
	return predicate.Origin(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...int32) predicate.Origin {
	return predicate.Origin(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v int32) predicate.Origin {
	return predicate.Origin(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v int32) predicate.Origin {
	return predicate.Origin(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v int32) predicate.Origin {
	return predicate.Origin(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v int32) predicate.Origin {
	return predicate.Origin(sql.FieldLTE(FieldWeight, v))
}

// TargetEQ applies the EQ predicate on the "target" field.
func TargetEQ(v string) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldTarget, v))
}

// TargetNEQ applies the NEQ predicate on the "target" field.
func TargetNEQ(v string) predicate.Origin {
	return predicate.Origin(sql.FieldNEQ(FieldTarget, v))
}

// TargetIn applies the In predicate on the "target" field.
func TargetIn(vs ...string) predicate.Origin {
	return predicate.Origin(sql.FieldIn(FieldTarget, vs...))
}

// TargetNotIn applies the NotIn predicate on the "target" field.
func TargetNotIn(vs ...string) predicate.Origin {
	return predicate.Origin(sql.FieldNotIn(FieldTarget, vs...))
}

// TargetGT applies the GT predicate on the "target" field.
func TargetGT(v string) predicate.Origin {
	return predicate.Origin(sql.FieldGT(FieldTarget, v))
}

// TargetGTE applies the GTE predicate on the "target" field.
func TargetGTE(v string) predicate.Origin {
	return predicate.Origin(sql.FieldGTE(FieldTarget, v))
}

// TargetLT applies the LT predicate on the "target" field.
func TargetLT(v string) predicate.Origin {
	return predicate.Origin(sql.FieldLT(FieldTarget, v))
}

// TargetLTE applies the LTE predicate on the "target" field.
func TargetLTE(v string) predicate.Origin {
	return predicate.Origin(sql.FieldLTE(FieldTarget, v))
}

// TargetContains applies the Contains predicate on the "target" field.
func TargetContains(v string) predicate.Origin {
	return predicate.Origin(sql.FieldContains(FieldTarget, v))
}

// TargetHasPrefix applies the HasPrefix predicate on the "target" field.
func TargetHasPrefix(v string) predicate.Origin {
	return predicate.Origin(sql.FieldHasPrefix(FieldTarget, v))
}

// TargetHasSuffix applies the HasSuffix predicate on the "target" field.
func TargetHasSuffix(v string) predicate.Origin {
	return predicate.Origin(sql.FieldHasSuffix(FieldTarget, v))
}

// TargetEqualFold applies the EqualFold predicate on the "target" field.
func TargetEqualFold(v string) predicate.Origin {
	return predicate.Origin(sql.FieldEqualFold(FieldTarget, v))
}

// TargetContainsFold applies the ContainsFold predicate on the "target" field.
func TargetContainsFold(v string) predicate.Origin {
	return predicate.Origin(sql.FieldContainsFold(FieldTarget, v))
}

// PortNumberEQ applies the EQ predicate on the "port_number" field.
func PortNumberEQ(v int) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldPortNumber, v))
}

// PortNumberNEQ applies the NEQ predicate on the "port_number" field.
func PortNumberNEQ(v int) predicate.Origin {
	return predicate.Origin(sql.FieldNEQ(FieldPortNumber, v))
}

// PortNumberIn applies the In predicate on the "port_number" field.
func PortNumberIn(vs ...int) predicate.Origin {
	return predicate.Origin(sql.FieldIn(FieldPortNumber, vs...))
}

// PortNumberNotIn applies the NotIn predicate on the "port_number" field.
func PortNumberNotIn(vs ...int) predicate.Origin {
	return predicate.Origin(sql.FieldNotIn(FieldPortNumber, vs...))
}

// PortNumberGT applies the GT predicate on the "port_number" field.
func PortNumberGT(v int) predicate.Origin {
	return predicate.Origin(sql.FieldGT(FieldPortNumber, v))
}

// PortNumberGTE applies the GTE predicate on the "port_number" field.
func PortNumberGTE(v int) predicate.Origin {
	return predicate.Origin(sql.FieldGTE(FieldPortNumber, v))
}

// PortNumberLT applies the LT predicate on the "port_number" field.
func PortNumberLT(v int) predicate.Origin {
	return predicate.Origin(sql.FieldLT(FieldPortNumber, v))
}

// PortNumberLTE applies the LTE predicate on the "port_number" field.
func PortNumberLTE(v int) predicate.Origin {
	return predicate.Origin(sql.FieldLTE(FieldPortNumber, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Origin {
	return predicate.Origin(sql.FieldNEQ(FieldActive, v))
}

// PoolIDEQ applies the EQ predicate on the "pool_id" field.
func PoolIDEQ(v gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldEQ(FieldPoolID, v))
}

// PoolIDNEQ applies the NEQ predicate on the "pool_id" field.
func PoolIDNEQ(v gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldNEQ(FieldPoolID, v))
}

// PoolIDIn applies the In predicate on the "pool_id" field.
func PoolIDIn(vs ...gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldIn(FieldPoolID, vs...))
}

// PoolIDNotIn applies the NotIn predicate on the "pool_id" field.
func PoolIDNotIn(vs ...gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldNotIn(FieldPoolID, vs...))
}

// PoolIDGT applies the GT predicate on the "pool_id" field.
func PoolIDGT(v gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldGT(FieldPoolID, v))
}

// PoolIDGTE applies the GTE predicate on the "pool_id" field.
func PoolIDGTE(v gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldGTE(FieldPoolID, v))
}

// PoolIDLT applies the LT predicate on the "pool_id" field.
func PoolIDLT(v gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldLT(FieldPoolID, v))
}

// PoolIDLTE applies the LTE predicate on the "pool_id" field.
func PoolIDLTE(v gidx.PrefixedID) predicate.Origin {
	return predicate.Origin(sql.FieldLTE(FieldPoolID, v))
}

// PoolIDContains applies the Contains predicate on the "pool_id" field.
func PoolIDContains(v gidx.PrefixedID) predicate.Origin {
	vc := string(v)
	return predicate.Origin(sql.FieldContains(FieldPoolID, vc))
}

// PoolIDHasPrefix applies the HasPrefix predicate on the "pool_id" field.
func PoolIDHasPrefix(v gidx.PrefixedID) predicate.Origin {
	vc := string(v)
	return predicate.Origin(sql.FieldHasPrefix(FieldPoolID, vc))
}

// PoolIDHasSuffix applies the HasSuffix predicate on the "pool_id" field.
func PoolIDHasSuffix(v gidx.PrefixedID) predicate.Origin {
	vc := string(v)
	return predicate.Origin(sql.FieldHasSuffix(FieldPoolID, vc))
}

// PoolIDEqualFold applies the EqualFold predicate on the "pool_id" field.
func PoolIDEqualFold(v gidx.PrefixedID) predicate.Origin {
	vc := string(v)
	return predicate.Origin(sql.FieldEqualFold(FieldPoolID, vc))
}

// PoolIDContainsFold applies the ContainsFold predicate on the "pool_id" field.
func PoolIDContainsFold(v gidx.PrefixedID) predicate.Origin {
	vc := string(v)
	return predicate.Origin(sql.FieldContainsFold(FieldPoolID, vc))
}

// HasPool applies the HasEdge predicate on the "pool" edge.
func HasPool() predicate.Origin {
	return predicate.Origin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PoolTable, PoolColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPoolWith applies the HasEdge predicate on the "pool" edge with a given conditions (other predicates).
func HasPoolWith(preds ...predicate.Pool) predicate.Origin {
	return predicate.Origin(func(s *sql.Selector) {
		step := newPoolStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Origin) predicate.Origin {
	return predicate.Origin(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Origin) predicate.Origin {
	return predicate.Origin(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Origin) predicate.Origin {
	return predicate.Origin(sql.NotPredicates(p))
}
