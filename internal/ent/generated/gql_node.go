// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/hashicorp/go-multierror"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancer"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancerannotation"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancerstatus"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/origin"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/pool"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/port"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/provider"
	"go.infratographer.com/x/gidx"
)

// Noder wraps the basic Node method.
type Noder interface {
	IsNode()
}

// IsNode implements the Node interface check for GQLGen.
func (n *LoadBalancer) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *LoadBalancerAnnotation) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *LoadBalancerStatus) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Origin) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Pool) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Port) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Provider) IsNode() {}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, gidx.PrefixedID) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, gidx.PrefixedID) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, gidx.PrefixedID) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id gidx.PrefixedID) (string, error) {
			return "", fmt.Errorf("cannot resolve noder (%v) without its type", id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//	c.Noder(ctx, id)
//	c.Noder(ctx, id, ent.WithNodeType(typeResolver))
func (c *Client) Noder(ctx context.Context, id gidx.PrefixedID, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id gidx.PrefixedID) (Noder, error) {
	switch table {
	case loadbalancer.Table:
		var uid gidx.PrefixedID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.LoadBalancer.Query().
			Where(loadbalancer.ID(uid))
		query, err := query.CollectFields(ctx, "LoadBalancer")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case loadbalancerannotation.Table:
		var uid gidx.PrefixedID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.LoadBalancerAnnotation.Query().
			Where(loadbalancerannotation.ID(uid))
		query, err := query.CollectFields(ctx, "LoadBalancerAnnotation")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case loadbalancerstatus.Table:
		var uid gidx.PrefixedID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.LoadBalancerStatus.Query().
			Where(loadbalancerstatus.ID(uid))
		query, err := query.CollectFields(ctx, "LoadBalancerStatus")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case origin.Table:
		var uid gidx.PrefixedID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Origin.Query().
			Where(origin.ID(uid))
		query, err := query.CollectFields(ctx, "Origin")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case pool.Table:
		var uid gidx.PrefixedID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Pool.Query().
			Where(pool.ID(uid))
		query, err := query.CollectFields(ctx, "Pool")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case port.Table:
		var uid gidx.PrefixedID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Port.Query().
			Where(port.ID(uid))
		query, err := query.CollectFields(ctx, "Port")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case provider.Table:
		var uid gidx.PrefixedID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Provider.Query().
			Where(provider.ID(uid))
		query, err := query.CollectFields(ctx, "Provider")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []gidx.PrefixedID, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]gidx.PrefixedID)
	id2idx := make(map[gidx.PrefixedID][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []gidx.PrefixedID) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[gidx.PrefixedID][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case loadbalancer.Table:
		query := c.LoadBalancer.Query().
			Where(loadbalancer.IDIn(ids...))
		query, err := query.CollectFields(ctx, "LoadBalancer")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case loadbalancerannotation.Table:
		query := c.LoadBalancerAnnotation.Query().
			Where(loadbalancerannotation.IDIn(ids...))
		query, err := query.CollectFields(ctx, "LoadBalancerAnnotation")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case loadbalancerstatus.Table:
		query := c.LoadBalancerStatus.Query().
			Where(loadbalancerstatus.IDIn(ids...))
		query, err := query.CollectFields(ctx, "LoadBalancerStatus")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case origin.Table:
		query := c.Origin.Query().
			Where(origin.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Origin")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case pool.Table:
		query := c.Pool.Query().
			Where(pool.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Pool")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case port.Table:
		query := c.Port.Query().
			Where(port.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Port")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case provider.Table:
		query := c.Provider.Query().
			Where(provider.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Provider")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}
