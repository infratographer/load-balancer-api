// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancer"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancerannotation"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancerstatus"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/origin"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/pool"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/port"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/provider"
	"go.infratographer.com/x/gidx"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (lb *LoadBalancerQuery) CollectFields(ctx context.Context, satisfies ...string) (*LoadBalancerQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return lb, nil
	}
	if err := lb.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return lb, nil
}

func (lb *LoadBalancerQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(loadbalancer.Columns))
		selectedFields = []string{loadbalancer.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "annotations":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&LoadBalancerAnnotationClient{config: lb.config}).Query()
			)
			args := newLoadBalancerAnnotationPaginateArgs(fieldArgs(ctx, new(LoadBalancerAnnotationWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newLoadBalancerAnnotationPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					lb.loadTotal = append(lb.loadTotal, func(ctx context.Context, nodes []*LoadBalancer) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID gidx.PrefixedID `sql:"load_balancer_id"`
							Count  int             `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(loadbalancer.AnnotationsColumn), ids...))
						})
						if err := query.GroupBy(loadbalancer.AnnotationsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[gidx.PrefixedID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					lb.loadTotal = append(lb.loadTotal, func(_ context.Context, nodes []*LoadBalancer) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Annotations)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, "LoadBalancerAnnotation")...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(loadbalancer.AnnotationsColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			lb.WithNamedAnnotations(alias, func(wq *LoadBalancerAnnotationQuery) {
				*wq = *query
			})
		case "statuses":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&LoadBalancerStatusClient{config: lb.config}).Query()
			)
			args := newLoadBalancerStatusPaginateArgs(fieldArgs(ctx, new(LoadBalancerStatusWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newLoadBalancerStatusPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					lb.loadTotal = append(lb.loadTotal, func(ctx context.Context, nodes []*LoadBalancer) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID gidx.PrefixedID `sql:"load_balancer_id"`
							Count  int             `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(loadbalancer.StatusesColumn), ids...))
						})
						if err := query.GroupBy(loadbalancer.StatusesColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[gidx.PrefixedID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					lb.loadTotal = append(lb.loadTotal, func(_ context.Context, nodes []*LoadBalancer) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Statuses)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, "LoadBalancerStatus")...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(loadbalancer.StatusesColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			lb.WithNamedStatuses(alias, func(wq *LoadBalancerStatusQuery) {
				*wq = *query
			})
		case "loadBalancerProvider":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProviderClient{config: lb.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			lb.withProvider = query
			if _, ok := fieldSeen[loadbalancer.FieldProviderID]; !ok {
				selectedFields = append(selectedFields, loadbalancer.FieldProviderID)
				fieldSeen[loadbalancer.FieldProviderID] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[loadbalancer.FieldName]; !ok {
				selectedFields = append(selectedFields, loadbalancer.FieldName)
				fieldSeen[loadbalancer.FieldName] = struct{}{}
			}
		case "tenantID":
			if _, ok := fieldSeen[loadbalancer.FieldTenantID]; !ok {
				selectedFields = append(selectedFields, loadbalancer.FieldTenantID)
				fieldSeen[loadbalancer.FieldTenantID] = struct{}{}
			}
		case "locationID":
			if _, ok := fieldSeen[loadbalancer.FieldLocationID]; !ok {
				selectedFields = append(selectedFields, loadbalancer.FieldLocationID)
				fieldSeen[loadbalancer.FieldLocationID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[loadbalancer.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, loadbalancer.FieldCreatedAt)
				fieldSeen[loadbalancer.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[loadbalancer.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, loadbalancer.FieldUpdatedAt)
				fieldSeen[loadbalancer.FieldUpdatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		lb.Select(selectedFields...)
	}
	return nil
}

type loadbalancerPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []LoadBalancerPaginateOption
}

func newLoadBalancerPaginateArgs(rv map[string]interface{}) *loadbalancerPaginateArgs {
	args := &loadbalancerPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &LoadBalancerOrder{Field: &LoadBalancerOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithLoadBalancerOrder(order))
			}
		case *LoadBalancerOrder:
			if v != nil {
				args.opts = append(args.opts, WithLoadBalancerOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*LoadBalancerWhereInput); ok {
		args.opts = append(args.opts, WithLoadBalancerFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (lba *LoadBalancerAnnotationQuery) CollectFields(ctx context.Context, satisfies ...string) (*LoadBalancerAnnotationQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return lba, nil
	}
	if err := lba.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return lba, nil
}

func (lba *LoadBalancerAnnotationQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(loadbalancerannotation.Columns))
		selectedFields = []string{loadbalancerannotation.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "loadBalancer":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&LoadBalancerClient{config: lba.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			lba.withLoadBalancer = query
			if _, ok := fieldSeen[loadbalancerannotation.FieldLoadBalancerID]; !ok {
				selectedFields = append(selectedFields, loadbalancerannotation.FieldLoadBalancerID)
				fieldSeen[loadbalancerannotation.FieldLoadBalancerID] = struct{}{}
			}
		case "namespace":
			if _, ok := fieldSeen[loadbalancerannotation.FieldNamespace]; !ok {
				selectedFields = append(selectedFields, loadbalancerannotation.FieldNamespace)
				fieldSeen[loadbalancerannotation.FieldNamespace] = struct{}{}
			}
		case "data":
			if _, ok := fieldSeen[loadbalancerannotation.FieldData]; !ok {
				selectedFields = append(selectedFields, loadbalancerannotation.FieldData)
				fieldSeen[loadbalancerannotation.FieldData] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[loadbalancerannotation.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, loadbalancerannotation.FieldCreatedAt)
				fieldSeen[loadbalancerannotation.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[loadbalancerannotation.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, loadbalancerannotation.FieldUpdatedAt)
				fieldSeen[loadbalancerannotation.FieldUpdatedAt] = struct{}{}
			}
		case "loadBalancerID":
			if _, ok := fieldSeen[loadbalancerannotation.FieldLoadBalancerID]; !ok {
				selectedFields = append(selectedFields, loadbalancerannotation.FieldLoadBalancerID)
				fieldSeen[loadbalancerannotation.FieldLoadBalancerID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		lba.Select(selectedFields...)
	}
	return nil
}

type loadbalancerannotationPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []LoadBalancerAnnotationPaginateOption
}

func newLoadBalancerAnnotationPaginateArgs(rv map[string]interface{}) *loadbalancerannotationPaginateArgs {
	args := &loadbalancerannotationPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &LoadBalancerAnnotationOrder{Field: &LoadBalancerAnnotationOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithLoadBalancerAnnotationOrder(order))
			}
		case *LoadBalancerAnnotationOrder:
			if v != nil {
				args.opts = append(args.opts, WithLoadBalancerAnnotationOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*LoadBalancerAnnotationWhereInput); ok {
		args.opts = append(args.opts, WithLoadBalancerAnnotationFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (lbs *LoadBalancerStatusQuery) CollectFields(ctx context.Context, satisfies ...string) (*LoadBalancerStatusQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return lbs, nil
	}
	if err := lbs.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return lbs, nil
}

func (lbs *LoadBalancerStatusQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(loadbalancerstatus.Columns))
		selectedFields = []string{loadbalancerstatus.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "loadBalancer":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&LoadBalancerClient{config: lbs.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			lbs.withLoadBalancer = query
			if _, ok := fieldSeen[loadbalancerstatus.FieldLoadBalancerID]; !ok {
				selectedFields = append(selectedFields, loadbalancerstatus.FieldLoadBalancerID)
				fieldSeen[loadbalancerstatus.FieldLoadBalancerID] = struct{}{}
			}
		case "namespace":
			if _, ok := fieldSeen[loadbalancerstatus.FieldNamespace]; !ok {
				selectedFields = append(selectedFields, loadbalancerstatus.FieldNamespace)
				fieldSeen[loadbalancerstatus.FieldNamespace] = struct{}{}
			}
		case "data":
			if _, ok := fieldSeen[loadbalancerstatus.FieldData]; !ok {
				selectedFields = append(selectedFields, loadbalancerstatus.FieldData)
				fieldSeen[loadbalancerstatus.FieldData] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[loadbalancerstatus.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, loadbalancerstatus.FieldCreatedAt)
				fieldSeen[loadbalancerstatus.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[loadbalancerstatus.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, loadbalancerstatus.FieldUpdatedAt)
				fieldSeen[loadbalancerstatus.FieldUpdatedAt] = struct{}{}
			}
		case "loadBalancerID":
			if _, ok := fieldSeen[loadbalancerstatus.FieldLoadBalancerID]; !ok {
				selectedFields = append(selectedFields, loadbalancerstatus.FieldLoadBalancerID)
				fieldSeen[loadbalancerstatus.FieldLoadBalancerID] = struct{}{}
			}
		case "source":
			if _, ok := fieldSeen[loadbalancerstatus.FieldSource]; !ok {
				selectedFields = append(selectedFields, loadbalancerstatus.FieldSource)
				fieldSeen[loadbalancerstatus.FieldSource] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		lbs.Select(selectedFields...)
	}
	return nil
}

type loadbalancerstatusPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []LoadBalancerStatusPaginateOption
}

func newLoadBalancerStatusPaginateArgs(rv map[string]interface{}) *loadbalancerstatusPaginateArgs {
	args := &loadbalancerstatusPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &LoadBalancerStatusOrder{Field: &LoadBalancerStatusOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithLoadBalancerStatusOrder(order))
			}
		case *LoadBalancerStatusOrder:
			if v != nil {
				args.opts = append(args.opts, WithLoadBalancerStatusOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*LoadBalancerStatusWhereInput); ok {
		args.opts = append(args.opts, WithLoadBalancerStatusFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (o *OriginQuery) CollectFields(ctx context.Context, satisfies ...string) (*OriginQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return o, nil
	}
	if err := o.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return o, nil
}

func (o *OriginQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(origin.Columns))
		selectedFields = []string{origin.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "pool":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PoolClient{config: o.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			o.withPool = query
			if _, ok := fieldSeen[origin.FieldPoolID]; !ok {
				selectedFields = append(selectedFields, origin.FieldPoolID)
				fieldSeen[origin.FieldPoolID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[origin.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, origin.FieldCreatedAt)
				fieldSeen[origin.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[origin.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, origin.FieldUpdatedAt)
				fieldSeen[origin.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[origin.FieldName]; !ok {
				selectedFields = append(selectedFields, origin.FieldName)
				fieldSeen[origin.FieldName] = struct{}{}
			}
		case "target":
			if _, ok := fieldSeen[origin.FieldTarget]; !ok {
				selectedFields = append(selectedFields, origin.FieldTarget)
				fieldSeen[origin.FieldTarget] = struct{}{}
			}
		case "portNumber":
			if _, ok := fieldSeen[origin.FieldPortNumber]; !ok {
				selectedFields = append(selectedFields, origin.FieldPortNumber)
				fieldSeen[origin.FieldPortNumber] = struct{}{}
			}
		case "active":
			if _, ok := fieldSeen[origin.FieldActive]; !ok {
				selectedFields = append(selectedFields, origin.FieldActive)
				fieldSeen[origin.FieldActive] = struct{}{}
			}
		case "poolID":
			if _, ok := fieldSeen[origin.FieldPoolID]; !ok {
				selectedFields = append(selectedFields, origin.FieldPoolID)
				fieldSeen[origin.FieldPoolID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		o.Select(selectedFields...)
	}
	return nil
}

type loadbalanceroriginPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []LoadBalancerOriginPaginateOption
}

func newLoadBalancerOriginPaginateArgs(rv map[string]interface{}) *loadbalanceroriginPaginateArgs {
	args := &loadbalanceroriginPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &LoadBalancerOriginOrder{Field: &LoadBalancerOriginOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithLoadBalancerOriginOrder(order))
			}
		case *LoadBalancerOriginOrder:
			if v != nil {
				args.opts = append(args.opts, WithLoadBalancerOriginOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*LoadBalancerOriginWhereInput); ok {
		args.opts = append(args.opts, WithLoadBalancerOriginFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (po *PoolQuery) CollectFields(ctx context.Context, satisfies ...string) (*PoolQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return po, nil
	}
	if err := po.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return po, nil
}

func (po *PoolQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(pool.Columns))
		selectedFields = []string{pool.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "ports":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PortClient{config: po.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			po.WithNamedPorts(alias, func(wq *PortQuery) {
				*wq = *query
			})
		case "origins":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&OriginClient{config: po.config}).Query()
			)
			args := newLoadBalancerOriginPaginateArgs(fieldArgs(ctx, new(LoadBalancerOriginWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newLoadBalancerOriginPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					po.loadTotal = append(po.loadTotal, func(ctx context.Context, nodes []*Pool) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID gidx.PrefixedID `sql:"pool_id"`
							Count  int             `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(pool.OriginsColumn), ids...))
						})
						if err := query.GroupBy(pool.OriginsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[gidx.PrefixedID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					po.loadTotal = append(po.loadTotal, func(_ context.Context, nodes []*Pool) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Origins)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, "Origin")...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(pool.OriginsColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			po.WithNamedOrigins(alias, func(wq *OriginQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[pool.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, pool.FieldCreatedAt)
				fieldSeen[pool.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[pool.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, pool.FieldUpdatedAt)
				fieldSeen[pool.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[pool.FieldName]; !ok {
				selectedFields = append(selectedFields, pool.FieldName)
				fieldSeen[pool.FieldName] = struct{}{}
			}
		case "protocol":
			if _, ok := fieldSeen[pool.FieldProtocol]; !ok {
				selectedFields = append(selectedFields, pool.FieldProtocol)
				fieldSeen[pool.FieldProtocol] = struct{}{}
			}
		case "tenantID":
			if _, ok := fieldSeen[pool.FieldTenantID]; !ok {
				selectedFields = append(selectedFields, pool.FieldTenantID)
				fieldSeen[pool.FieldTenantID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		po.Select(selectedFields...)
	}
	return nil
}

type loadbalancerpoolPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []LoadBalancerPoolPaginateOption
}

func newLoadBalancerPoolPaginateArgs(rv map[string]interface{}) *loadbalancerpoolPaginateArgs {
	args := &loadbalancerpoolPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &LoadBalancerPoolOrder{Field: &LoadBalancerPoolOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithLoadBalancerPoolOrder(order))
			}
		case *LoadBalancerPoolOrder:
			if v != nil {
				args.opts = append(args.opts, WithLoadBalancerPoolOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*LoadBalancerPoolWhereInput); ok {
		args.opts = append(args.opts, WithLoadBalancerPoolFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (po *PortQuery) CollectFields(ctx context.Context, satisfies ...string) (*PortQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return po, nil
	}
	if err := po.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return po, nil
}

func (po *PortQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(port.Columns))
		selectedFields = []string{port.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "pools":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PoolClient{config: po.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			po.WithNamedPools(alias, func(wq *PoolQuery) {
				*wq = *query
			})
		case "loadBalancer":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&LoadBalancerClient{config: po.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			po.withLoadBalancer = query
			if _, ok := fieldSeen[port.FieldLoadBalancerID]; !ok {
				selectedFields = append(selectedFields, port.FieldLoadBalancerID)
				fieldSeen[port.FieldLoadBalancerID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[port.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, port.FieldCreatedAt)
				fieldSeen[port.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[port.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, port.FieldUpdatedAt)
				fieldSeen[port.FieldUpdatedAt] = struct{}{}
			}
		case "number":
			if _, ok := fieldSeen[port.FieldNumber]; !ok {
				selectedFields = append(selectedFields, port.FieldNumber)
				fieldSeen[port.FieldNumber] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[port.FieldName]; !ok {
				selectedFields = append(selectedFields, port.FieldName)
				fieldSeen[port.FieldName] = struct{}{}
			}
		case "loadBalancerID":
			if _, ok := fieldSeen[port.FieldLoadBalancerID]; !ok {
				selectedFields = append(selectedFields, port.FieldLoadBalancerID)
				fieldSeen[port.FieldLoadBalancerID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		po.Select(selectedFields...)
	}
	return nil
}

type loadbalancerportPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []LoadBalancerPortPaginateOption
}

func newLoadBalancerPortPaginateArgs(rv map[string]interface{}) *loadbalancerportPaginateArgs {
	args := &loadbalancerportPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &LoadBalancerPortOrder{Field: &LoadBalancerPortOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithLoadBalancerPortOrder(order))
			}
		case *LoadBalancerPortOrder:
			if v != nil {
				args.opts = append(args.opts, WithLoadBalancerPortOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*LoadBalancerPortWhereInput); ok {
		args.opts = append(args.opts, WithLoadBalancerPortFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *ProviderQuery) CollectFields(ctx context.Context, satisfies ...string) (*ProviderQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pr, nil
	}
	if err := pr.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pr, nil
}

func (pr *ProviderQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(provider.Columns))
		selectedFields = []string{provider.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "loadBalancers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&LoadBalancerClient{config: pr.config}).Query()
			)
			args := newLoadBalancerPaginateArgs(fieldArgs(ctx, new(LoadBalancerWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newLoadBalancerPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					pr.loadTotal = append(pr.loadTotal, func(ctx context.Context, nodes []*Provider) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID gidx.PrefixedID `sql:"provider_id"`
							Count  int             `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(provider.LoadBalancersColumn), ids...))
						})
						if err := query.GroupBy(provider.LoadBalancersColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[gidx.PrefixedID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					pr.loadTotal = append(pr.loadTotal, func(_ context.Context, nodes []*Provider) error {
						for i := range nodes {
							n := len(nodes[i].Edges.LoadBalancers)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, "LoadBalancer")...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(provider.LoadBalancersColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			pr.WithNamedLoadBalancers(alias, func(wq *LoadBalancerQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[provider.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, provider.FieldCreatedAt)
				fieldSeen[provider.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[provider.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, provider.FieldUpdatedAt)
				fieldSeen[provider.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[provider.FieldName]; !ok {
				selectedFields = append(selectedFields, provider.FieldName)
				fieldSeen[provider.FieldName] = struct{}{}
			}
		case "tenantID":
			if _, ok := fieldSeen[provider.FieldTenantID]; !ok {
				selectedFields = append(selectedFields, provider.FieldTenantID)
				fieldSeen[provider.FieldTenantID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pr.Select(selectedFields...)
	}
	return nil
}

type loadbalancerproviderPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []LoadBalancerProviderPaginateOption
}

func newLoadBalancerProviderPaginateArgs(rv map[string]interface{}) *loadbalancerproviderPaginateArgs {
	args := &loadbalancerproviderPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*LoadBalancerProviderWhereInput); ok {
		args.opts = append(args.opts, WithLoadBalancerProviderFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput interface{}, path ...string) map[string]interface{} {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	for _, name := range path {
		var field *graphql.CollectedField
		for _, f := range graphql.CollectFields(oc, fc.Field.Selections, nil) {
			if f.Alias == name {
				field = &f
				break
			}
		}
		if field == nil {
			return nil
		}
		cf, err := fc.Child(ctx, *field)
		if err != nil {
			args := field.ArgumentMap(oc.Variables)
			return unmarshalArgs(ctx, whereInput, args)
		}
		fc = cf
	}
	return fc.Args
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput interface{}, args map[string]interface{}) map[string]interface{} {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if condition is enabled (Node/Nodes) and it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond string) []string {
	if len(satisfies) == 0 {
		return satisfies
	}
	for _, s := range satisfies {
		if typeCond == s {
			return satisfies
		}
	}
	return append(satisfies, typeCond)
}
