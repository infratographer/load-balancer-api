// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancer"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancerannotation"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancerstatus"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/port"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/predicate"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/provider"
	"go.infratographer.com/x/gidx"
)

// LoadBalancerQuery is the builder for querying LoadBalancer entities.
type LoadBalancerQuery struct {
	config
	ctx                  *QueryContext
	order                []loadbalancer.OrderOption
	inters               []Interceptor
	predicates           []predicate.LoadBalancer
	withAnnotations      *LoadBalancerAnnotationQuery
	withStatuses         *LoadBalancerStatusQuery
	withPorts            *PortQuery
	withProvider         *ProviderQuery
	modifiers            []func(*sql.Selector)
	loadTotal            []func(context.Context, []*LoadBalancer) error
	withNamedAnnotations map[string]*LoadBalancerAnnotationQuery
	withNamedStatuses    map[string]*LoadBalancerStatusQuery
	withNamedPorts       map[string]*PortQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LoadBalancerQuery builder.
func (lbq *LoadBalancerQuery) Where(ps ...predicate.LoadBalancer) *LoadBalancerQuery {
	lbq.predicates = append(lbq.predicates, ps...)
	return lbq
}

// Limit the number of records to be returned by this query.
func (lbq *LoadBalancerQuery) Limit(limit int) *LoadBalancerQuery {
	lbq.ctx.Limit = &limit
	return lbq
}

// Offset to start from.
func (lbq *LoadBalancerQuery) Offset(offset int) *LoadBalancerQuery {
	lbq.ctx.Offset = &offset
	return lbq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lbq *LoadBalancerQuery) Unique(unique bool) *LoadBalancerQuery {
	lbq.ctx.Unique = &unique
	return lbq
}

// Order specifies how the records should be ordered.
func (lbq *LoadBalancerQuery) Order(o ...loadbalancer.OrderOption) *LoadBalancerQuery {
	lbq.order = append(lbq.order, o...)
	return lbq
}

// QueryAnnotations chains the current query on the "annotations" edge.
func (lbq *LoadBalancerQuery) QueryAnnotations() *LoadBalancerAnnotationQuery {
	query := (&LoadBalancerAnnotationClient{config: lbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(loadbalancer.Table, loadbalancer.FieldID, selector),
			sqlgraph.To(loadbalancerannotation.Table, loadbalancerannotation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, loadbalancer.AnnotationsTable, loadbalancer.AnnotationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(lbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatuses chains the current query on the "statuses" edge.
func (lbq *LoadBalancerQuery) QueryStatuses() *LoadBalancerStatusQuery {
	query := (&LoadBalancerStatusClient{config: lbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(loadbalancer.Table, loadbalancer.FieldID, selector),
			sqlgraph.To(loadbalancerstatus.Table, loadbalancerstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, loadbalancer.StatusesTable, loadbalancer.StatusesColumn),
		)
		fromU = sqlgraph.SetNeighbors(lbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPorts chains the current query on the "ports" edge.
func (lbq *LoadBalancerQuery) QueryPorts() *PortQuery {
	query := (&PortClient{config: lbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(loadbalancer.Table, loadbalancer.FieldID, selector),
			sqlgraph.To(port.Table, port.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, loadbalancer.PortsTable, loadbalancer.PortsColumn),
		)
		fromU = sqlgraph.SetNeighbors(lbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvider chains the current query on the "provider" edge.
func (lbq *LoadBalancerQuery) QueryProvider() *ProviderQuery {
	query := (&ProviderClient{config: lbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(loadbalancer.Table, loadbalancer.FieldID, selector),
			sqlgraph.To(provider.Table, provider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, loadbalancer.ProviderTable, loadbalancer.ProviderColumn),
		)
		fromU = sqlgraph.SetNeighbors(lbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LoadBalancer entity from the query.
// Returns a *NotFoundError when no LoadBalancer was found.
func (lbq *LoadBalancerQuery) First(ctx context.Context) (*LoadBalancer, error) {
	nodes, err := lbq.Limit(1).All(setContextOp(ctx, lbq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{loadbalancer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lbq *LoadBalancerQuery) FirstX(ctx context.Context) *LoadBalancer {
	node, err := lbq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LoadBalancer ID from the query.
// Returns a *NotFoundError when no LoadBalancer ID was found.
func (lbq *LoadBalancerQuery) FirstID(ctx context.Context) (id gidx.PrefixedID, err error) {
	var ids []gidx.PrefixedID
	if ids, err = lbq.Limit(1).IDs(setContextOp(ctx, lbq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{loadbalancer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lbq *LoadBalancerQuery) FirstIDX(ctx context.Context) gidx.PrefixedID {
	id, err := lbq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LoadBalancer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LoadBalancer entity is found.
// Returns a *NotFoundError when no LoadBalancer entities are found.
func (lbq *LoadBalancerQuery) Only(ctx context.Context) (*LoadBalancer, error) {
	nodes, err := lbq.Limit(2).All(setContextOp(ctx, lbq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{loadbalancer.Label}
	default:
		return nil, &NotSingularError{loadbalancer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lbq *LoadBalancerQuery) OnlyX(ctx context.Context) *LoadBalancer {
	node, err := lbq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LoadBalancer ID in the query.
// Returns a *NotSingularError when more than one LoadBalancer ID is found.
// Returns a *NotFoundError when no entities are found.
func (lbq *LoadBalancerQuery) OnlyID(ctx context.Context) (id gidx.PrefixedID, err error) {
	var ids []gidx.PrefixedID
	if ids, err = lbq.Limit(2).IDs(setContextOp(ctx, lbq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{loadbalancer.Label}
	default:
		err = &NotSingularError{loadbalancer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lbq *LoadBalancerQuery) OnlyIDX(ctx context.Context) gidx.PrefixedID {
	id, err := lbq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LoadBalancers.
func (lbq *LoadBalancerQuery) All(ctx context.Context) ([]*LoadBalancer, error) {
	ctx = setContextOp(ctx, lbq.ctx, "All")
	if err := lbq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LoadBalancer, *LoadBalancerQuery]()
	return withInterceptors[[]*LoadBalancer](ctx, lbq, qr, lbq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lbq *LoadBalancerQuery) AllX(ctx context.Context) []*LoadBalancer {
	nodes, err := lbq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LoadBalancer IDs.
func (lbq *LoadBalancerQuery) IDs(ctx context.Context) (ids []gidx.PrefixedID, err error) {
	if lbq.ctx.Unique == nil && lbq.path != nil {
		lbq.Unique(true)
	}
	ctx = setContextOp(ctx, lbq.ctx, "IDs")
	if err = lbq.Select(loadbalancer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lbq *LoadBalancerQuery) IDsX(ctx context.Context) []gidx.PrefixedID {
	ids, err := lbq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lbq *LoadBalancerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lbq.ctx, "Count")
	if err := lbq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lbq, querierCount[*LoadBalancerQuery](), lbq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lbq *LoadBalancerQuery) CountX(ctx context.Context) int {
	count, err := lbq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lbq *LoadBalancerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lbq.ctx, "Exist")
	switch _, err := lbq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lbq *LoadBalancerQuery) ExistX(ctx context.Context) bool {
	exist, err := lbq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LoadBalancerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lbq *LoadBalancerQuery) Clone() *LoadBalancerQuery {
	if lbq == nil {
		return nil
	}
	return &LoadBalancerQuery{
		config:          lbq.config,
		ctx:             lbq.ctx.Clone(),
		order:           append([]loadbalancer.OrderOption{}, lbq.order...),
		inters:          append([]Interceptor{}, lbq.inters...),
		predicates:      append([]predicate.LoadBalancer{}, lbq.predicates...),
		withAnnotations: lbq.withAnnotations.Clone(),
		withStatuses:    lbq.withStatuses.Clone(),
		withPorts:       lbq.withPorts.Clone(),
		withProvider:    lbq.withProvider.Clone(),
		// clone intermediate query.
		sql:  lbq.sql.Clone(),
		path: lbq.path,
	}
}

// WithAnnotations tells the query-builder to eager-load the nodes that are connected to
// the "annotations" edge. The optional arguments are used to configure the query builder of the edge.
func (lbq *LoadBalancerQuery) WithAnnotations(opts ...func(*LoadBalancerAnnotationQuery)) *LoadBalancerQuery {
	query := (&LoadBalancerAnnotationClient{config: lbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lbq.withAnnotations = query
	return lbq
}

// WithStatuses tells the query-builder to eager-load the nodes that are connected to
// the "statuses" edge. The optional arguments are used to configure the query builder of the edge.
func (lbq *LoadBalancerQuery) WithStatuses(opts ...func(*LoadBalancerStatusQuery)) *LoadBalancerQuery {
	query := (&LoadBalancerStatusClient{config: lbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lbq.withStatuses = query
	return lbq
}

// WithPorts tells the query-builder to eager-load the nodes that are connected to
// the "ports" edge. The optional arguments are used to configure the query builder of the edge.
func (lbq *LoadBalancerQuery) WithPorts(opts ...func(*PortQuery)) *LoadBalancerQuery {
	query := (&PortClient{config: lbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lbq.withPorts = query
	return lbq
}

// WithProvider tells the query-builder to eager-load the nodes that are connected to
// the "provider" edge. The optional arguments are used to configure the query builder of the edge.
func (lbq *LoadBalancerQuery) WithProvider(opts ...func(*ProviderQuery)) *LoadBalancerQuery {
	query := (&ProviderClient{config: lbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lbq.withProvider = query
	return lbq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LoadBalancer.Query().
//		GroupBy(loadbalancer.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (lbq *LoadBalancerQuery) GroupBy(field string, fields ...string) *LoadBalancerGroupBy {
	lbq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LoadBalancerGroupBy{build: lbq}
	grbuild.flds = &lbq.ctx.Fields
	grbuild.label = loadbalancer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.LoadBalancer.Query().
//		Select(loadbalancer.FieldCreatedAt).
//		Scan(ctx, &v)
func (lbq *LoadBalancerQuery) Select(fields ...string) *LoadBalancerSelect {
	lbq.ctx.Fields = append(lbq.ctx.Fields, fields...)
	sbuild := &LoadBalancerSelect{LoadBalancerQuery: lbq}
	sbuild.label = loadbalancer.Label
	sbuild.flds, sbuild.scan = &lbq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LoadBalancerSelect configured with the given aggregations.
func (lbq *LoadBalancerQuery) Aggregate(fns ...AggregateFunc) *LoadBalancerSelect {
	return lbq.Select().Aggregate(fns...)
}

func (lbq *LoadBalancerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lbq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lbq); err != nil {
				return err
			}
		}
	}
	for _, f := range lbq.ctx.Fields {
		if !loadbalancer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if lbq.path != nil {
		prev, err := lbq.path(ctx)
		if err != nil {
			return err
		}
		lbq.sql = prev
	}
	return nil
}

func (lbq *LoadBalancerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LoadBalancer, error) {
	var (
		nodes       = []*LoadBalancer{}
		_spec       = lbq.querySpec()
		loadedTypes = [4]bool{
			lbq.withAnnotations != nil,
			lbq.withStatuses != nil,
			lbq.withPorts != nil,
			lbq.withProvider != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LoadBalancer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LoadBalancer{config: lbq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(lbq.modifiers) > 0 {
		_spec.Modifiers = lbq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lbq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lbq.withAnnotations; query != nil {
		if err := lbq.loadAnnotations(ctx, query, nodes,
			func(n *LoadBalancer) { n.Edges.Annotations = []*LoadBalancerAnnotation{} },
			func(n *LoadBalancer, e *LoadBalancerAnnotation) { n.Edges.Annotations = append(n.Edges.Annotations, e) }); err != nil {
			return nil, err
		}
	}
	if query := lbq.withStatuses; query != nil {
		if err := lbq.loadStatuses(ctx, query, nodes,
			func(n *LoadBalancer) { n.Edges.Statuses = []*LoadBalancerStatus{} },
			func(n *LoadBalancer, e *LoadBalancerStatus) { n.Edges.Statuses = append(n.Edges.Statuses, e) }); err != nil {
			return nil, err
		}
	}
	if query := lbq.withPorts; query != nil {
		if err := lbq.loadPorts(ctx, query, nodes,
			func(n *LoadBalancer) { n.Edges.Ports = []*Port{} },
			func(n *LoadBalancer, e *Port) { n.Edges.Ports = append(n.Edges.Ports, e) }); err != nil {
			return nil, err
		}
	}
	if query := lbq.withProvider; query != nil {
		if err := lbq.loadProvider(ctx, query, nodes, nil,
			func(n *LoadBalancer, e *Provider) { n.Edges.Provider = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range lbq.withNamedAnnotations {
		if err := lbq.loadAnnotations(ctx, query, nodes,
			func(n *LoadBalancer) { n.appendNamedAnnotations(name) },
			func(n *LoadBalancer, e *LoadBalancerAnnotation) { n.appendNamedAnnotations(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range lbq.withNamedStatuses {
		if err := lbq.loadStatuses(ctx, query, nodes,
			func(n *LoadBalancer) { n.appendNamedStatuses(name) },
			func(n *LoadBalancer, e *LoadBalancerStatus) { n.appendNamedStatuses(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range lbq.withNamedPorts {
		if err := lbq.loadPorts(ctx, query, nodes,
			func(n *LoadBalancer) { n.appendNamedPorts(name) },
			func(n *LoadBalancer, e *Port) { n.appendNamedPorts(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range lbq.loadTotal {
		if err := lbq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lbq *LoadBalancerQuery) loadAnnotations(ctx context.Context, query *LoadBalancerAnnotationQuery, nodes []*LoadBalancer, init func(*LoadBalancer), assign func(*LoadBalancer, *LoadBalancerAnnotation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[gidx.PrefixedID]*LoadBalancer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(loadbalancerannotation.FieldLoadBalancerID)
	}
	query.Where(predicate.LoadBalancerAnnotation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(loadbalancer.AnnotationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LoadBalancerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "load_balancer_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lbq *LoadBalancerQuery) loadStatuses(ctx context.Context, query *LoadBalancerStatusQuery, nodes []*LoadBalancer, init func(*LoadBalancer), assign func(*LoadBalancer, *LoadBalancerStatus)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[gidx.PrefixedID]*LoadBalancer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(loadbalancerstatus.FieldLoadBalancerID)
	}
	query.Where(predicate.LoadBalancerStatus(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(loadbalancer.StatusesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LoadBalancerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "load_balancer_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lbq *LoadBalancerQuery) loadPorts(ctx context.Context, query *PortQuery, nodes []*LoadBalancer, init func(*LoadBalancer), assign func(*LoadBalancer, *Port)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[gidx.PrefixedID]*LoadBalancer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(port.FieldLoadBalancerID)
	}
	query.Where(predicate.Port(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(loadbalancer.PortsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LoadBalancerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "load_balancer_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lbq *LoadBalancerQuery) loadProvider(ctx context.Context, query *ProviderQuery, nodes []*LoadBalancer, init func(*LoadBalancer), assign func(*LoadBalancer, *Provider)) error {
	ids := make([]gidx.PrefixedID, 0, len(nodes))
	nodeids := make(map[gidx.PrefixedID][]*LoadBalancer)
	for i := range nodes {
		fk := nodes[i].ProviderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(provider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provider_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (lbq *LoadBalancerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lbq.querySpec()
	if len(lbq.modifiers) > 0 {
		_spec.Modifiers = lbq.modifiers
	}
	_spec.Node.Columns = lbq.ctx.Fields
	if len(lbq.ctx.Fields) > 0 {
		_spec.Unique = lbq.ctx.Unique != nil && *lbq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lbq.driver, _spec)
}

func (lbq *LoadBalancerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(loadbalancer.Table, loadbalancer.Columns, sqlgraph.NewFieldSpec(loadbalancer.FieldID, field.TypeString))
	_spec.From = lbq.sql
	if unique := lbq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lbq.path != nil {
		_spec.Unique = true
	}
	if fields := lbq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loadbalancer.FieldID)
		for i := range fields {
			if fields[i] != loadbalancer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if lbq.withProvider != nil {
			_spec.Node.AddColumnOnce(loadbalancer.FieldProviderID)
		}
	}
	if ps := lbq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lbq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lbq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lbq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lbq *LoadBalancerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lbq.driver.Dialect())
	t1 := builder.Table(loadbalancer.Table)
	columns := lbq.ctx.Fields
	if len(columns) == 0 {
		columns = loadbalancer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lbq.sql != nil {
		selector = lbq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lbq.ctx.Unique != nil && *lbq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range lbq.predicates {
		p(selector)
	}
	for _, p := range lbq.order {
		p(selector)
	}
	if offset := lbq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lbq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedAnnotations tells the query-builder to eager-load the nodes that are connected to the "annotations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (lbq *LoadBalancerQuery) WithNamedAnnotations(name string, opts ...func(*LoadBalancerAnnotationQuery)) *LoadBalancerQuery {
	query := (&LoadBalancerAnnotationClient{config: lbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if lbq.withNamedAnnotations == nil {
		lbq.withNamedAnnotations = make(map[string]*LoadBalancerAnnotationQuery)
	}
	lbq.withNamedAnnotations[name] = query
	return lbq
}

// WithNamedStatuses tells the query-builder to eager-load the nodes that are connected to the "statuses"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (lbq *LoadBalancerQuery) WithNamedStatuses(name string, opts ...func(*LoadBalancerStatusQuery)) *LoadBalancerQuery {
	query := (&LoadBalancerStatusClient{config: lbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if lbq.withNamedStatuses == nil {
		lbq.withNamedStatuses = make(map[string]*LoadBalancerStatusQuery)
	}
	lbq.withNamedStatuses[name] = query
	return lbq
}

// WithNamedPorts tells the query-builder to eager-load the nodes that are connected to the "ports"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (lbq *LoadBalancerQuery) WithNamedPorts(name string, opts ...func(*PortQuery)) *LoadBalancerQuery {
	query := (&PortClient{config: lbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if lbq.withNamedPorts == nil {
		lbq.withNamedPorts = make(map[string]*PortQuery)
	}
	lbq.withNamedPorts[name] = query
	return lbq
}

// LoadBalancerGroupBy is the group-by builder for LoadBalancer entities.
type LoadBalancerGroupBy struct {
	selector
	build *LoadBalancerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lbgb *LoadBalancerGroupBy) Aggregate(fns ...AggregateFunc) *LoadBalancerGroupBy {
	lbgb.fns = append(lbgb.fns, fns...)
	return lbgb
}

// Scan applies the selector query and scans the result into the given value.
func (lbgb *LoadBalancerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lbgb.build.ctx, "GroupBy")
	if err := lbgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LoadBalancerQuery, *LoadBalancerGroupBy](ctx, lbgb.build, lbgb, lbgb.build.inters, v)
}

func (lbgb *LoadBalancerGroupBy) sqlScan(ctx context.Context, root *LoadBalancerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lbgb.fns))
	for _, fn := range lbgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lbgb.flds)+len(lbgb.fns))
		for _, f := range *lbgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lbgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lbgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LoadBalancerSelect is the builder for selecting fields of LoadBalancer entities.
type LoadBalancerSelect struct {
	*LoadBalancerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lbs *LoadBalancerSelect) Aggregate(fns ...AggregateFunc) *LoadBalancerSelect {
	lbs.fns = append(lbs.fns, fns...)
	return lbs
}

// Scan applies the selector query and scans the result into the given value.
func (lbs *LoadBalancerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lbs.ctx, "Select")
	if err := lbs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LoadBalancerQuery, *LoadBalancerSelect](ctx, lbs.LoadBalancerQuery, lbs, lbs.inters, v)
}

func (lbs *LoadBalancerSelect) sqlScan(ctx context.Context, root *LoadBalancerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lbs.fns))
	for _, fn := range lbs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lbs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lbs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
