// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package port

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"go.infratographer.com/x/gidx"
)

const (
	// Label holds the string label denoting the port type in the database.
	Label = "port"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLoadBalancerID holds the string denoting the load_balancer_id field in the database.
	FieldLoadBalancerID = "load_balancer_id"
	// EdgePools holds the string denoting the pools edge name in mutations.
	EdgePools = "pools"
	// EdgeLoadBalancer holds the string denoting the load_balancer edge name in mutations.
	EdgeLoadBalancer = "load_balancer"
	// Table holds the table name of the port in the database.
	Table = "ports"
	// PoolsTable is the table that holds the pools relation/edge. The primary key declared below.
	PoolsTable = "pool_ports"
	// PoolsInverseTable is the table name for the Pool entity.
	// It exists in this package in order to avoid circular dependency with the "pool" package.
	PoolsInverseTable = "pools"
	// LoadBalancerTable is the table that holds the load_balancer relation/edge.
	LoadBalancerTable = "ports"
	// LoadBalancerInverseTable is the table name for the LoadBalancer entity.
	// It exists in this package in order to avoid circular dependency with the "loadbalancer" package.
	LoadBalancerInverseTable = "load_balancers"
	// LoadBalancerColumn is the table column denoting the load_balancer relation/edge.
	LoadBalancerColumn = "load_balancer_id"
)

// Columns holds all SQL columns for port fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldNumber,
	FieldName,
	FieldLoadBalancerID,
}

var (
	// PoolsPrimaryKey and PoolsColumn2 are the table columns denoting the
	// primary key for the pools relation (M2M).
	PoolsPrimaryKey = []string{"pool_id", "port_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NumberValidator is a validator for the "number" field. It is called by the builders before save.
	NumberValidator func(int) error
	// LoadBalancerIDValidator is a validator for the "load_balancer_id" field. It is called by the builders before save.
	LoadBalancerIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() gidx.PrefixedID
)

// OrderOption defines the ordering options for the Port queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByNumber orders the results by the number field.
func ByNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLoadBalancerID orders the results by the load_balancer_id field.
func ByLoadBalancerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoadBalancerID, opts...).ToFunc()
}

// ByPoolsCount orders the results by pools count.
func ByPoolsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPoolsStep(), opts...)
	}
}

// ByPools orders the results by pools terms.
func ByPools(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPoolsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLoadBalancerField orders the results by load_balancer field.
func ByLoadBalancerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLoadBalancerStep(), sql.OrderByField(field, opts...))
	}
}
func newPoolsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PoolsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PoolsTable, PoolsPrimaryKey...),
	)
}
func newLoadBalancerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LoadBalancerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, LoadBalancerTable, LoadBalancerColumn),
	)
}
