// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package pubsubhooks

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"go.infratographer.com/load-balancer-api/internal/ent/generated"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/hook"
	"go.infratographer.com/x/gidx"
	"go.infratographer.com/x/pubsubx"
)

func LoadBalancerHooks() []ent.Hook {
	return []ent.Hook{
		hook.On(
			func(next ent.Mutator) ent.Mutator {
				return hook.LoadBalancerFunc(func(ctx context.Context, m *generated.LoadBalancerMutation) (ent.Value, error) {
					// complete the mutation before we process the event
					retValue, err := next.Mutate(ctx, m)
					if err != nil {
						return retValue, err
					}

					queueName := "load-balancers.%location_id%"
					additionalSubjects := []gidx.PrefixedID{}

					objID, ok := m.ID()
					if !ok {
						return nil, fmt.Errorf("object doesn't have an id %s", objID)
					}

					changeset := []pubsubx.FieldChange{}
					created_at, ok := m.CreatedAt()
					cv_created_at := ""

					if ok {
						cv_created_at = created_at.Format(time.RFC3339)
						queueName = strings.ReplaceAll(queueName, "%created_at%", cv_created_at)

						pv_created_at := ""
						if !m.Op().Is(ent.OpCreate) {
							ov, err := m.OldCreatedAt(ctx)
							if err != nil {
								pv_created_at = "<unknown>"
							} else {
								pv_created_at = ov.Format(time.RFC3339)
							}
						}

						changeset = append(changeset, pubsubx.FieldChange{
							Field:         "created_at",
							PreviousValue: pv_created_at,
							CurrentValue:  cv_created_at,
						})
					}

					updated_at, ok := m.UpdatedAt()
					cv_updated_at := ""

					if ok {
						cv_updated_at = updated_at.Format(time.RFC3339)
						queueName = strings.ReplaceAll(queueName, "%updated_at%", cv_updated_at)

						pv_updated_at := ""
						if !m.Op().Is(ent.OpCreate) {
							ov, err := m.OldUpdatedAt(ctx)
							if err != nil {
								pv_updated_at = "<unknown>"
							} else {
								pv_updated_at = ov.Format(time.RFC3339)
							}
						}

						changeset = append(changeset, pubsubx.FieldChange{
							Field:         "updated_at",
							PreviousValue: pv_updated_at,
							CurrentValue:  cv_updated_at,
						})
					}

					name, ok := m.Name()
					cv_name := ""

					if ok {
						cv_name = fmt.Sprintf("%s", name)
						queueName = strings.ReplaceAll(queueName, "%name%", cv_name)

						pv_name := ""
						if !m.Op().Is(ent.OpCreate) {
							ov, err := m.OldName(ctx)
							if err != nil {
								pv_name = "<unknown>"
							} else {
								pv_name = fmt.Sprintf("%s", ov)
							}
						}

						changeset = append(changeset, pubsubx.FieldChange{
							Field:         "name",
							PreviousValue: pv_name,
							CurrentValue:  cv_name,
						})
					}

					tenant_id, ok := m.TenantID()
					cv_tenant_id := ""
					if !ok && !m.Op().Is(ent.OpCreate) {
						// since we are doing an update or delete and these fields didn't change, load the "old" value
						tenant_id, err = m.OldTenantID(ctx)
						if err != nil {
							return nil, err
						}
					}
					additionalSubjects = append(additionalSubjects, tenant_id)

					if ok {
						cv_tenant_id = fmt.Sprintf("%s", tenant_id)
						queueName = strings.ReplaceAll(queueName, "%tenant_id%", cv_tenant_id)

						pv_tenant_id := ""
						if !m.Op().Is(ent.OpCreate) {
							ov, err := m.OldTenantID(ctx)
							if err != nil {
								pv_tenant_id = "<unknown>"
							} else {
								pv_tenant_id = fmt.Sprintf("%s", ov)
							}
						}

						changeset = append(changeset, pubsubx.FieldChange{
							Field:         "tenant_id",
							PreviousValue: pv_tenant_id,
							CurrentValue:  cv_tenant_id,
						})
					}

					location_id, ok := m.LocationID()
					cv_location_id := ""
					if !ok && !m.Op().Is(ent.OpCreate) {
						// since we are doing an update or delete and these fields didn't change, load the "old" value
						location_id, err = m.OldLocationID(ctx)
						if err != nil {
							return nil, err
						}
					}
					additionalSubjects = append(additionalSubjects, location_id)
					cv_location_id = fmt.Sprintf("%s", location_id)
					queueName = strings.ReplaceAll(queueName, "%location_id%", cv_location_id)

					if ok {
						pv_location_id := ""
						if !m.Op().Is(ent.OpCreate) {
							ov, err := m.OldLocationID(ctx)
							if err != nil {
								pv_location_id = "<unknown>"
							} else {
								pv_location_id = fmt.Sprintf("%s", ov)
							}
						}

						changeset = append(changeset, pubsubx.FieldChange{
							Field:         "location_id",
							PreviousValue: pv_location_id,
							CurrentValue:  cv_location_id,
						})
					}

					provider_id, ok := m.ProviderID()
					cv_provider_id := ""
					if !ok && !m.Op().Is(ent.OpCreate) {
						// since we are doing an update or delete and these fields didn't change, load the "old" value
						provider_id, err = m.OldProviderID(ctx)
						if err != nil {
							return nil, err
						}
					}
					additionalSubjects = append(additionalSubjects, provider_id)

					if ok {
						cv_provider_id = fmt.Sprintf("%s", provider_id)
						queueName = strings.ReplaceAll(queueName, "%provider_id%", cv_provider_id)

						pv_provider_id := ""
						if !m.Op().Is(ent.OpCreate) {
							ov, err := m.OldProviderID(ctx)
							if err != nil {
								pv_provider_id = "<unknown>"
							} else {
								pv_provider_id = fmt.Sprintf("%s", ov)
							}
						}

						changeset = append(changeset, pubsubx.FieldChange{
							Field:         "provider_id",
							PreviousValue: pv_provider_id,
							CurrentValue:  cv_provider_id,
						})
					}

					msg := pubsubx.ChangeMessage{
						EventType:            fmt.Sprintf("%s.%s", eventType(m.Op()), queueName),
						SubjectID:            objID,
						AdditionalSubjectIDs: additionalSubjects,
						Timestamp:            time.Now().UTC(),
						FieldChanges:         changeset,
					}

					fmt.Println("Pubsub message to send: ")

					b, err := json.MarshalIndent(msg, "", "  ")
					fmt.Println(string(b))

					return retValue, nil
				})
			},
			ent.OpCreate|ent.OpUpdate|ent.OpUpdateOne,
		),

		// Delete Hook
		hook.On(
			func(next ent.Mutator) ent.Mutator {
				return hook.LoadBalancerFunc(func(ctx context.Context, m *generated.LoadBalancerMutation) (ent.Value, error) {
					queueName := "load-balancers.%location_id%"
					additionalSubjects := []gidx.PrefixedID{}

					objID, ok := m.ID()
					if !ok {
						return nil, fmt.Errorf("object doesn't have an id %s", objID)
					}

					dbObj, err := m.Client().LoadBalancer.Get(ctx, objID)
					if err != nil {
						return nil, fmt.Errorf("failed to load object to get values for pubsub, err %w", err)
					}

					additionalSubjects = append(additionalSubjects, dbObj.TenantID)

					additionalSubjects = append(additionalSubjects, dbObj.LocationID)
					value_location_id := fmt.Sprintf("%s", dbObj.LocationID)
					queueName = strings.ReplaceAll(queueName, "%location_id%", value_location_id)

					additionalSubjects = append(additionalSubjects, dbObj.ProviderID)

					// we have all the info we need, now complete the mutation before we process the event
					retValue, err := next.Mutate(ctx, m)
					if err != nil {
						return retValue, err
					}

					msg := pubsubx.ChangeMessage{
						EventType:            fmt.Sprintf("%s.%s", eventType(m.Op()), queueName),
						SubjectID:            objID,
						AdditionalSubjectIDs: additionalSubjects,
						Timestamp:            time.Now().UTC(),
					}

					fmt.Println("Pubsub message to send: ")

					b, err := json.MarshalIndent(msg, "", "  ")
					fmt.Println(string(b))

					return retValue, nil
				})
			},
			ent.OpDelete|ent.OpDeleteOne,
		),
	}
}

func PubsubHooks(c *generated.Client) {
	c.LoadBalancer.Use(LoadBalancerHooks()...)

}

func eventType(op ent.Op) string {
	switch op {
	case ent.OpCreate:
		return "created"
	case ent.OpUpdate, ent.OpUpdateOne:
		return "updated"
	case ent.OpDelete, ent.OpDeleteOne:
		return "deleted"
	default:
		return "unknown"
	}
}
