// Copyright Infratographer, Inc. and/or licensed to Infratographer, Inc. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.
//
// Code generated by entc, DO NOT EDIT.

package loadbalancerannotation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"go.infratographer.com/x/gidx"
)

const (
	// Label holds the string label denoting the loadbalancerannotation type in the database.
	Label = "load_balancer_annotation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldLoadBalancerID holds the string denoting the load_balancer_id field in the database.
	FieldLoadBalancerID = "load_balancer_id"
	// EdgeLoadBalancer holds the string denoting the load_balancer edge name in mutations.
	EdgeLoadBalancer = "load_balancer"
	// Table holds the table name of the loadbalancerannotation in the database.
	Table = "load_balancer_annotations"
	// LoadBalancerTable is the table that holds the load_balancer relation/edge.
	LoadBalancerTable = "load_balancer_annotations"
	// LoadBalancerInverseTable is the table name for the LoadBalancer entity.
	// It exists in this package in order to avoid circular dependency with the "loadbalancer" package.
	LoadBalancerInverseTable = "load_balancers"
	// LoadBalancerColumn is the table column denoting the load_balancer relation/edge.
	LoadBalancerColumn = "load_balancer_id"
)

// Columns holds all SQL columns for loadbalancerannotation fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldLoadBalancerID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() gidx.PrefixedID
)

// OrderOption defines the ordering options for the LoadBalancerAnnotation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByLoadBalancerID orders the results by the load_balancer_id field.
func ByLoadBalancerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoadBalancerID, opts...).ToFunc()
}

// ByLoadBalancerField orders the results by load_balancer field.
func ByLoadBalancerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLoadBalancerStep(), sql.OrderByField(field, opts...))
	}
}
func newLoadBalancerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LoadBalancerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, LoadBalancerTable, LoadBalancerColumn),
	)
}
