// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"go.infratographer.com/load-balancer-api/internal/ent/generated/pool"
	"go.infratographer.com/x/gidx"
)

// CreateLoadBalancerInput represents a mutation input for creating loadbalancers.
type CreateLoadBalancerInput struct {
	Name       string
	OwnerID    gidx.PrefixedID
	LocationID gidx.PrefixedID
	PortIDs    []gidx.PrefixedID
	ProviderID gidx.PrefixedID
}

// Mutate applies the CreateLoadBalancerInput on the LoadBalancerMutation builder.
func (i *CreateLoadBalancerInput) Mutate(m *LoadBalancerMutation) {
	m.SetName(i.Name)
	m.SetOwnerID(i.OwnerID)
	m.SetLocationID(i.LocationID)
	if v := i.PortIDs; len(v) > 0 {
		m.AddPortIDs(v...)
	}
	m.SetProviderID(i.ProviderID)
}

// SetInput applies the change-set in the CreateLoadBalancerInput on the LoadBalancerCreate builder.
func (c *LoadBalancerCreate) SetInput(i CreateLoadBalancerInput) *LoadBalancerCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLoadBalancerInput represents a mutation input for updating loadbalancers.
type UpdateLoadBalancerInput struct {
	Name          *string
	ClearPorts    bool
	AddPortIDs    []gidx.PrefixedID
	RemovePortIDs []gidx.PrefixedID
}

// Mutate applies the UpdateLoadBalancerInput on the LoadBalancerMutation builder.
func (i *UpdateLoadBalancerInput) Mutate(m *LoadBalancerMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearPorts {
		m.ClearPorts()
	}
	if v := i.AddPortIDs; len(v) > 0 {
		m.AddPortIDs(v...)
	}
	if v := i.RemovePortIDs; len(v) > 0 {
		m.RemovePortIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateLoadBalancerInput on the LoadBalancerUpdate builder.
func (c *LoadBalancerUpdate) SetInput(i UpdateLoadBalancerInput) *LoadBalancerUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLoadBalancerInput on the LoadBalancerUpdateOne builder.
func (c *LoadBalancerUpdateOne) SetInput(i UpdateLoadBalancerInput) *LoadBalancerUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLoadBalancerOriginInput represents a mutation input for creating loadbalancerorigins.
type CreateLoadBalancerOriginInput struct {
	Name       string
	Weight     *int32
	Target     string
	PortNumber int
	Active     *bool
	PoolID     gidx.PrefixedID
}

// Mutate applies the CreateLoadBalancerOriginInput on the OriginMutation builder.
func (i *CreateLoadBalancerOriginInput) Mutate(m *OriginMutation) {
	m.SetName(i.Name)
	if v := i.Weight; v != nil {
		m.SetWeight(*v)
	}
	m.SetTarget(i.Target)
	m.SetPortNumber(i.PortNumber)
	if v := i.Active; v != nil {
		m.SetActive(*v)
	}
	m.SetPoolID(i.PoolID)
}

// SetInput applies the change-set in the CreateLoadBalancerOriginInput on the OriginCreate builder.
func (c *OriginCreate) SetInput(i CreateLoadBalancerOriginInput) *OriginCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLoadBalancerOriginInput represents a mutation input for updating loadbalancerorigins.
type UpdateLoadBalancerOriginInput struct {
	Name       *string
	Weight     *int32
	Target     *string
	PortNumber *int
	Active     *bool
}

// Mutate applies the UpdateLoadBalancerOriginInput on the OriginMutation builder.
func (i *UpdateLoadBalancerOriginInput) Mutate(m *OriginMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Weight; v != nil {
		m.SetWeight(*v)
	}
	if v := i.Target; v != nil {
		m.SetTarget(*v)
	}
	if v := i.PortNumber; v != nil {
		m.SetPortNumber(*v)
	}
	if v := i.Active; v != nil {
		m.SetActive(*v)
	}
}

// SetInput applies the change-set in the UpdateLoadBalancerOriginInput on the OriginUpdate builder.
func (c *OriginUpdate) SetInput(i UpdateLoadBalancerOriginInput) *OriginUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLoadBalancerOriginInput on the OriginUpdateOne builder.
func (c *OriginUpdateOne) SetInput(i UpdateLoadBalancerOriginInput) *OriginUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLoadBalancerPoolInput represents a mutation input for creating loadbalancerpools.
type CreateLoadBalancerPoolInput struct {
	Name      string
	Protocol  pool.Protocol
	OwnerID   gidx.PrefixedID
	PortIDs   []gidx.PrefixedID
	OriginIDs []gidx.PrefixedID
}

// Mutate applies the CreateLoadBalancerPoolInput on the PoolMutation builder.
func (i *CreateLoadBalancerPoolInput) Mutate(m *PoolMutation) {
	m.SetName(i.Name)
	m.SetProtocol(i.Protocol)
	m.SetOwnerID(i.OwnerID)
	if v := i.PortIDs; len(v) > 0 {
		m.AddPortIDs(v...)
	}
	if v := i.OriginIDs; len(v) > 0 {
		m.AddOriginIDs(v...)
	}
}

// SetInput applies the change-set in the CreateLoadBalancerPoolInput on the PoolCreate builder.
func (c *PoolCreate) SetInput(i CreateLoadBalancerPoolInput) *PoolCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLoadBalancerPoolInput represents a mutation input for updating loadbalancerpools.
type UpdateLoadBalancerPoolInput struct {
	Name            *string
	Protocol        *pool.Protocol
	ClearPorts      bool
	AddPortIDs      []gidx.PrefixedID
	RemovePortIDs   []gidx.PrefixedID
	ClearOrigins    bool
	AddOriginIDs    []gidx.PrefixedID
	RemoveOriginIDs []gidx.PrefixedID
}

// Mutate applies the UpdateLoadBalancerPoolInput on the PoolMutation builder.
func (i *UpdateLoadBalancerPoolInput) Mutate(m *PoolMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Protocol; v != nil {
		m.SetProtocol(*v)
	}
	if i.ClearPorts {
		m.ClearPorts()
	}
	if v := i.AddPortIDs; len(v) > 0 {
		m.AddPortIDs(v...)
	}
	if v := i.RemovePortIDs; len(v) > 0 {
		m.RemovePortIDs(v...)
	}
	if i.ClearOrigins {
		m.ClearOrigins()
	}
	if v := i.AddOriginIDs; len(v) > 0 {
		m.AddOriginIDs(v...)
	}
	if v := i.RemoveOriginIDs; len(v) > 0 {
		m.RemoveOriginIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateLoadBalancerPoolInput on the PoolUpdate builder.
func (c *PoolUpdate) SetInput(i UpdateLoadBalancerPoolInput) *PoolUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLoadBalancerPoolInput on the PoolUpdateOne builder.
func (c *PoolUpdateOne) SetInput(i UpdateLoadBalancerPoolInput) *PoolUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLoadBalancerPortInput represents a mutation input for creating loadbalancerports.
type CreateLoadBalancerPortInput struct {
	Number         int
	Name           *string
	PoolIDs        []gidx.PrefixedID
	LoadBalancerID gidx.PrefixedID
}

// Mutate applies the CreateLoadBalancerPortInput on the PortMutation builder.
func (i *CreateLoadBalancerPortInput) Mutate(m *PortMutation) {
	m.SetNumber(i.Number)
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.PoolIDs; len(v) > 0 {
		m.AddPoolIDs(v...)
	}
	m.SetLoadBalancerID(i.LoadBalancerID)
}

// SetInput applies the change-set in the CreateLoadBalancerPortInput on the PortCreate builder.
func (c *PortCreate) SetInput(i CreateLoadBalancerPortInput) *PortCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLoadBalancerPortInput represents a mutation input for updating loadbalancerports.
type UpdateLoadBalancerPortInput struct {
	Number        *int
	ClearName     bool
	Name          *string
	ClearPools    bool
	AddPoolIDs    []gidx.PrefixedID
	RemovePoolIDs []gidx.PrefixedID
}

// Mutate applies the UpdateLoadBalancerPortInput on the PortMutation builder.
func (i *UpdateLoadBalancerPortInput) Mutate(m *PortMutation) {
	if v := i.Number; v != nil {
		m.SetNumber(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearPools {
		m.ClearPools()
	}
	if v := i.AddPoolIDs; len(v) > 0 {
		m.AddPoolIDs(v...)
	}
	if v := i.RemovePoolIDs; len(v) > 0 {
		m.RemovePoolIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateLoadBalancerPortInput on the PortUpdate builder.
func (c *PortUpdate) SetInput(i UpdateLoadBalancerPortInput) *PortUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLoadBalancerPortInput on the PortUpdateOne builder.
func (c *PortUpdateOne) SetInput(i UpdateLoadBalancerPortInput) *PortUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLoadBalancerProviderInput represents a mutation input for creating loadbalancerproviders.
type CreateLoadBalancerProviderInput struct {
	Name    string
	OwnerID gidx.PrefixedID
}

// Mutate applies the CreateLoadBalancerProviderInput on the ProviderMutation builder.
func (i *CreateLoadBalancerProviderInput) Mutate(m *ProviderMutation) {
	m.SetName(i.Name)
	m.SetOwnerID(i.OwnerID)
}

// SetInput applies the change-set in the CreateLoadBalancerProviderInput on the ProviderCreate builder.
func (c *ProviderCreate) SetInput(i CreateLoadBalancerProviderInput) *ProviderCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLoadBalancerProviderInput represents a mutation input for updating loadbalancerproviders.
type UpdateLoadBalancerProviderInput struct {
	Name *string
}

// Mutate applies the UpdateLoadBalancerProviderInput on the ProviderMutation builder.
func (i *UpdateLoadBalancerProviderInput) Mutate(m *ProviderMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the UpdateLoadBalancerProviderInput on the ProviderUpdate builder.
func (c *ProviderUpdate) SetInput(i UpdateLoadBalancerProviderInput) *ProviderUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLoadBalancerProviderInput on the ProviderUpdateOne builder.
func (c *ProviderUpdateOne) SetInput(i UpdateLoadBalancerProviderInput) *ProviderUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
