// Copyright Infratographer, Inc. and/or licensed to Infratographer, Inc. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancer"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancerannotation"
	"go.infratographer.com/x/gidx"
)

// LoadBalancerAnnotationCreate is the builder for creating a LoadBalancerAnnotation entity.
type LoadBalancerAnnotationCreate struct {
	config
	mutation *LoadBalancerAnnotationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (lbac *LoadBalancerAnnotationCreate) SetCreatedAt(t time.Time) *LoadBalancerAnnotationCreate {
	lbac.mutation.SetCreatedAt(t)
	return lbac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lbac *LoadBalancerAnnotationCreate) SetNillableCreatedAt(t *time.Time) *LoadBalancerAnnotationCreate {
	if t != nil {
		lbac.SetCreatedAt(*t)
	}
	return lbac
}

// SetUpdatedAt sets the "updated_at" field.
func (lbac *LoadBalancerAnnotationCreate) SetUpdatedAt(t time.Time) *LoadBalancerAnnotationCreate {
	lbac.mutation.SetUpdatedAt(t)
	return lbac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lbac *LoadBalancerAnnotationCreate) SetNillableUpdatedAt(t *time.Time) *LoadBalancerAnnotationCreate {
	if t != nil {
		lbac.SetUpdatedAt(*t)
	}
	return lbac
}

// SetLoadBalancerID sets the "load_balancer_id" field.
func (lbac *LoadBalancerAnnotationCreate) SetLoadBalancerID(gi gidx.PrefixedID) *LoadBalancerAnnotationCreate {
	lbac.mutation.SetLoadBalancerID(gi)
	return lbac
}

// SetID sets the "id" field.
func (lbac *LoadBalancerAnnotationCreate) SetID(gi gidx.PrefixedID) *LoadBalancerAnnotationCreate {
	lbac.mutation.SetID(gi)
	return lbac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lbac *LoadBalancerAnnotationCreate) SetNillableID(gi *gidx.PrefixedID) *LoadBalancerAnnotationCreate {
	if gi != nil {
		lbac.SetID(*gi)
	}
	return lbac
}

// SetLoadBalancer sets the "load_balancer" edge to the LoadBalancer entity.
func (lbac *LoadBalancerAnnotationCreate) SetLoadBalancer(l *LoadBalancer) *LoadBalancerAnnotationCreate {
	return lbac.SetLoadBalancerID(l.ID)
}

// Mutation returns the LoadBalancerAnnotationMutation object of the builder.
func (lbac *LoadBalancerAnnotationCreate) Mutation() *LoadBalancerAnnotationMutation {
	return lbac.mutation
}

// Save creates the LoadBalancerAnnotation in the database.
func (lbac *LoadBalancerAnnotationCreate) Save(ctx context.Context) (*LoadBalancerAnnotation, error) {
	lbac.defaults()
	return withHooks(ctx, lbac.sqlSave, lbac.mutation, lbac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lbac *LoadBalancerAnnotationCreate) SaveX(ctx context.Context) *LoadBalancerAnnotation {
	v, err := lbac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lbac *LoadBalancerAnnotationCreate) Exec(ctx context.Context) error {
	_, err := lbac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lbac *LoadBalancerAnnotationCreate) ExecX(ctx context.Context) {
	if err := lbac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lbac *LoadBalancerAnnotationCreate) defaults() {
	if _, ok := lbac.mutation.CreatedAt(); !ok {
		v := loadbalancerannotation.DefaultCreatedAt()
		lbac.mutation.SetCreatedAt(v)
	}
	if _, ok := lbac.mutation.UpdatedAt(); !ok {
		v := loadbalancerannotation.DefaultUpdatedAt()
		lbac.mutation.SetUpdatedAt(v)
	}
	if _, ok := lbac.mutation.ID(); !ok {
		v := loadbalancerannotation.DefaultID()
		lbac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lbac *LoadBalancerAnnotationCreate) check() error {
	if _, ok := lbac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "LoadBalancerAnnotation.created_at"`)}
	}
	if _, ok := lbac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "LoadBalancerAnnotation.updated_at"`)}
	}
	if _, ok := lbac.mutation.LoadBalancerID(); !ok {
		return &ValidationError{Name: "load_balancer_id", err: errors.New(`generated: missing required field "LoadBalancerAnnotation.load_balancer_id"`)}
	}
	if _, ok := lbac.mutation.LoadBalancerID(); !ok {
		return &ValidationError{Name: "load_balancer", err: errors.New(`generated: missing required edge "LoadBalancerAnnotation.load_balancer"`)}
	}
	return nil
}

func (lbac *LoadBalancerAnnotationCreate) sqlSave(ctx context.Context) (*LoadBalancerAnnotation, error) {
	if err := lbac.check(); err != nil {
		return nil, err
	}
	_node, _spec := lbac.createSpec()
	if err := sqlgraph.CreateNode(ctx, lbac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gidx.PrefixedID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lbac.mutation.id = &_node.ID
	lbac.mutation.done = true
	return _node, nil
}

func (lbac *LoadBalancerAnnotationCreate) createSpec() (*LoadBalancerAnnotation, *sqlgraph.CreateSpec) {
	var (
		_node = &LoadBalancerAnnotation{config: lbac.config}
		_spec = sqlgraph.NewCreateSpec(loadbalancerannotation.Table, sqlgraph.NewFieldSpec(loadbalancerannotation.FieldID, field.TypeString))
	)
	if id, ok := lbac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lbac.mutation.CreatedAt(); ok {
		_spec.SetField(loadbalancerannotation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lbac.mutation.UpdatedAt(); ok {
		_spec.SetField(loadbalancerannotation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := lbac.mutation.LoadBalancerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   loadbalancerannotation.LoadBalancerTable,
			Columns: []string{loadbalancerannotation.LoadBalancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(loadbalancer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LoadBalancerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LoadBalancerAnnotationCreateBulk is the builder for creating many LoadBalancerAnnotation entities in bulk.
type LoadBalancerAnnotationCreateBulk struct {
	config
	builders []*LoadBalancerAnnotationCreate
}

// Save creates the LoadBalancerAnnotation entities in the database.
func (lbacb *LoadBalancerAnnotationCreateBulk) Save(ctx context.Context) ([]*LoadBalancerAnnotation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lbacb.builders))
	nodes := make([]*LoadBalancerAnnotation, len(lbacb.builders))
	mutators := make([]Mutator, len(lbacb.builders))
	for i := range lbacb.builders {
		func(i int, root context.Context) {
			builder := lbacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoadBalancerAnnotationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lbacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lbacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lbacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lbacb *LoadBalancerAnnotationCreateBulk) SaveX(ctx context.Context) []*LoadBalancerAnnotation {
	v, err := lbacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lbacb *LoadBalancerAnnotationCreateBulk) Exec(ctx context.Context) error {
	_, err := lbacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lbacb *LoadBalancerAnnotationCreateBulk) ExecX(ctx context.Context) {
	if err := lbacb.Exec(ctx); err != nil {
		panic(err)
	}
}
