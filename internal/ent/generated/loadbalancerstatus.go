// Copyright Infratographer, Inc. and/or licensed to Infratographer, Inc. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancer"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancerstatus"
	"go.infratographer.com/x/gidx"
)

// LoadBalancerStatus is the model entity for the LoadBalancerStatus schema.
type LoadBalancerStatus struct {
	config `json:"-"`
	// ID of the ent.
	ID gidx.PrefixedID `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Data holds the value of the "data" field.
	Data json.RawMessage `json:"data,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// LoadBalancerID holds the value of the "load_balancer_id" field.
	LoadBalancerID gidx.PrefixedID `json:"load_balancer_id,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LoadBalancerStatusQuery when eager-loading is set.
	Edges        LoadBalancerStatusEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LoadBalancerStatusEdges holds the relations/edges for other nodes in the graph.
type LoadBalancerStatusEdges struct {
	// LoadBalancer holds the value of the load_balancer edge.
	LoadBalancer *LoadBalancer `json:"load_balancer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// LoadBalancerOrErr returns the LoadBalancer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LoadBalancerStatusEdges) LoadBalancerOrErr() (*LoadBalancer, error) {
	if e.loadedTypes[0] {
		if e.LoadBalancer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: loadbalancer.Label}
		}
		return e.LoadBalancer, nil
	}
	return nil, &NotLoadedError{edge: "load_balancer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LoadBalancerStatus) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case loadbalancerstatus.FieldData:
			values[i] = new([]byte)
		case loadbalancerstatus.FieldID, loadbalancerstatus.FieldLoadBalancerID:
			values[i] = new(gidx.PrefixedID)
		case loadbalancerstatus.FieldNamespace, loadbalancerstatus.FieldSource:
			values[i] = new(sql.NullString)
		case loadbalancerstatus.FieldCreatedAt, loadbalancerstatus.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LoadBalancerStatus fields.
func (lbs *LoadBalancerStatus) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loadbalancerstatus.FieldID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				lbs.ID = *value
			}
		case loadbalancerstatus.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				lbs.Namespace = value.String
			}
		case loadbalancerstatus.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &lbs.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case loadbalancerstatus.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lbs.CreatedAt = value.Time
			}
		case loadbalancerstatus.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lbs.UpdatedAt = value.Time
			}
		case loadbalancerstatus.FieldLoadBalancerID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field load_balancer_id", values[i])
			} else if value != nil {
				lbs.LoadBalancerID = *value
			}
		case loadbalancerstatus.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				lbs.Source = value.String
			}
		default:
			lbs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LoadBalancerStatus.
// This includes values selected through modifiers, order, etc.
func (lbs *LoadBalancerStatus) Value(name string) (ent.Value, error) {
	return lbs.selectValues.Get(name)
}

// QueryLoadBalancer queries the "load_balancer" edge of the LoadBalancerStatus entity.
func (lbs *LoadBalancerStatus) QueryLoadBalancer() *LoadBalancerQuery {
	return NewLoadBalancerStatusClient(lbs.config).QueryLoadBalancer(lbs)
}

// Update returns a builder for updating this LoadBalancerStatus.
// Note that you need to call LoadBalancerStatus.Unwrap() before calling this method if this LoadBalancerStatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (lbs *LoadBalancerStatus) Update() *LoadBalancerStatusUpdateOne {
	return NewLoadBalancerStatusClient(lbs.config).UpdateOne(lbs)
}

// Unwrap unwraps the LoadBalancerStatus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lbs *LoadBalancerStatus) Unwrap() *LoadBalancerStatus {
	_tx, ok := lbs.config.driver.(*txDriver)
	if !ok {
		panic("generated: LoadBalancerStatus is not a transactional entity")
	}
	lbs.config.driver = _tx.drv
	return lbs
}

// String implements the fmt.Stringer.
func (lbs *LoadBalancerStatus) String() string {
	var builder strings.Builder
	builder.WriteString("LoadBalancerStatus(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lbs.ID))
	builder.WriteString("namespace=")
	builder.WriteString(lbs.Namespace)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", lbs.Data))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lbs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lbs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("load_balancer_id=")
	builder.WriteString(fmt.Sprintf("%v", lbs.LoadBalancerID))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(lbs.Source)
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity implement fedruntime.Entity
func (lbs LoadBalancerStatus) IsEntity() {}

// LoadBalancerStatusSlice is a parsable slice of LoadBalancerStatus.
type LoadBalancerStatusSlice []*LoadBalancerStatus
