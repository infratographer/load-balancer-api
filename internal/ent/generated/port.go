// Copyright Infratographer, Inc. and/or licensed to Infratographer, Inc. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancer"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/port"
	"go.infratographer.com/x/gidx"
)

// Port is the model entity for the Port schema.
type Port struct {
	config `json:"-"`
	// ID of the ent.
	ID gidx.PrefixedID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Number holds the value of the "number" field.
	Number int `json:"number,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// LoadBalancerID holds the value of the "load_balancer_id" field.
	LoadBalancerID gidx.PrefixedID `json:"load_balancer_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PortQuery when eager-loading is set.
	Edges        PortEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PortEdges holds the relations/edges for other nodes in the graph.
type PortEdges struct {
	// Pools holds the value of the pools edge.
	Pools []*Pool `json:"pools,omitempty"`
	// LoadBalancer holds the value of the load_balancer edge.
	LoadBalancer *LoadBalancer `json:"load_balancer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedPools map[string][]*Pool
}

// PoolsOrErr returns the Pools value or an error if the edge
// was not loaded in eager-loading.
func (e PortEdges) PoolsOrErr() ([]*Pool, error) {
	if e.loadedTypes[0] {
		return e.Pools, nil
	}
	return nil, &NotLoadedError{edge: "pools"}
}

// LoadBalancerOrErr returns the LoadBalancer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PortEdges) LoadBalancerOrErr() (*LoadBalancer, error) {
	if e.loadedTypes[1] {
		if e.LoadBalancer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: loadbalancer.Label}
		}
		return e.LoadBalancer, nil
	}
	return nil, &NotLoadedError{edge: "load_balancer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Port) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case port.FieldID, port.FieldLoadBalancerID:
			values[i] = new(gidx.PrefixedID)
		case port.FieldNumber:
			values[i] = new(sql.NullInt64)
		case port.FieldName:
			values[i] = new(sql.NullString)
		case port.FieldCreatedAt, port.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Port fields.
func (po *Port) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case port.FieldID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				po.ID = *value
			}
		case port.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Time
			}
		case port.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				po.UpdatedAt = value.Time
			}
		case port.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				po.Number = int(value.Int64)
			}
		case port.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				po.Name = value.String
			}
		case port.FieldLoadBalancerID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field load_balancer_id", values[i])
			} else if value != nil {
				po.LoadBalancerID = *value
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Port.
// This includes values selected through modifiers, order, etc.
func (po *Port) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// QueryPools queries the "pools" edge of the Port entity.
func (po *Port) QueryPools() *PoolQuery {
	return NewPortClient(po.config).QueryPools(po)
}

// QueryLoadBalancer queries the "load_balancer" edge of the Port entity.
func (po *Port) QueryLoadBalancer() *LoadBalancerQuery {
	return NewPortClient(po.config).QueryLoadBalancer(po)
}

// Update returns a builder for updating this Port.
// Note that you need to call Port.Unwrap() before calling this method if this Port
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Port) Update() *PortUpdateOne {
	return NewPortClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Port entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Port) Unwrap() *Port {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("generated: Port is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Port) String() string {
	var builder strings.Builder
	builder.WriteString("Port(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("created_at=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(po.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", po.Number))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(po.Name)
	builder.WriteString(", ")
	builder.WriteString("load_balancer_id=")
	builder.WriteString(fmt.Sprintf("%v", po.LoadBalancerID))
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity implement fedruntime.Entity
func (po Port) IsEntity() {}

// NamedPools returns the Pools named value or an error if the edge was not
// loaded in eager-loading with this name.
func (po *Port) NamedPools(name string) ([]*Pool, error) {
	if po.Edges.namedPools == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := po.Edges.namedPools[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (po *Port) appendNamedPools(name string, edges ...*Pool) {
	if po.Edges.namedPools == nil {
		po.Edges.namedPools = make(map[string][]*Pool)
	}
	if len(edges) == 0 {
		po.Edges.namedPools[name] = []*Pool{}
	} else {
		po.Edges.namedPools[name] = append(po.Edges.namedPools[name], edges...)
	}
}

// Ports is a parsable slice of Port.
type Ports []*Port
