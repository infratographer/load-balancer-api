// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// LoadBalancersMetadatum is an object representing the database table.
type LoadBalancersMetadatum struct {
	MetadataID     string     `query:"metadata_id" param:"metadata_id" boil:"metadata_id" json:"metadata_id" toml:"metadata_id" yaml:"metadata_id"`
	LoadBalancerID string     `query:"load_balancer_id" param:"load_balancer_id" boil:"load_balancer_id" json:"load_balancer_id" toml:"load_balancer_id" yaml:"load_balancer_id"`
	Source         string     `query:"source" param:"source" boil:"source" json:"source" toml:"source" yaml:"source"`
	Data           types.JSON `query:"data" param:"data" boil:"data" json:"data" toml:"data" yaml:"data"`
	CreatedAt      time.Time  `query:"created_at" param:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time  `query:"updated_at" param:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *loadBalancersMetadatumR `query:"-" param:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L loadBalancersMetadatumL  `query:"-" param:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LoadBalancersMetadatumColumns = struct {
	MetadataID     string
	LoadBalancerID string
	Source         string
	Data           string
	CreatedAt      string
	UpdatedAt      string
}{
	MetadataID:     "metadata_id",
	LoadBalancerID: "load_balancer_id",
	Source:         "source",
	Data:           "data",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var LoadBalancersMetadatumTableColumns = struct {
	MetadataID     string
	LoadBalancerID string
	Source         string
	Data           string
	CreatedAt      string
	UpdatedAt      string
}{
	MetadataID:     "load_balancers_metadata.metadata_id",
	LoadBalancerID: "load_balancers_metadata.load_balancer_id",
	Source:         "load_balancers_metadata.source",
	Data:           "load_balancers_metadata.data",
	CreatedAt:      "load_balancers_metadata.created_at",
	UpdatedAt:      "load_balancers_metadata.updated_at",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var LoadBalancersMetadatumWhere = struct {
	MetadataID     whereHelperstring
	LoadBalancerID whereHelperstring
	Source         whereHelperstring
	Data           whereHelpertypes_JSON
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	MetadataID:     whereHelperstring{field: "\"load_balancers_metadata\".\"metadata_id\""},
	LoadBalancerID: whereHelperstring{field: "\"load_balancers_metadata\".\"load_balancer_id\""},
	Source:         whereHelperstring{field: "\"load_balancers_metadata\".\"source\""},
	Data:           whereHelpertypes_JSON{field: "\"load_balancers_metadata\".\"data\""},
	CreatedAt:      whereHelpertime_Time{field: "\"load_balancers_metadata\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"load_balancers_metadata\".\"updated_at\""},
}

// LoadBalancersMetadatumRels is where relationship names are stored.
var LoadBalancersMetadatumRels = struct {
	LoadBalancer string
}{
	LoadBalancer: "LoadBalancer",
}

// loadBalancersMetadatumR is where relationships are stored.
type loadBalancersMetadatumR struct {
	LoadBalancer *LoadBalancer `query:"LoadBalancer" param:"LoadBalancer" boil:"LoadBalancer" json:"LoadBalancer" toml:"LoadBalancer" yaml:"LoadBalancer"`
}

// NewStruct creates a new relationship struct
func (*loadBalancersMetadatumR) NewStruct() *loadBalancersMetadatumR {
	return &loadBalancersMetadatumR{}
}

func (r *loadBalancersMetadatumR) GetLoadBalancer() *LoadBalancer {
	if r == nil {
		return nil
	}
	return r.LoadBalancer
}

// loadBalancersMetadatumL is where Load methods for each relationship are stored.
type loadBalancersMetadatumL struct{}

var (
	loadBalancersMetadatumAllColumns            = []string{"metadata_id", "load_balancer_id", "source", "data", "created_at", "updated_at"}
	loadBalancersMetadatumColumnsWithoutDefault = []string{"load_balancer_id", "source", "data"}
	loadBalancersMetadatumColumnsWithDefault    = []string{"metadata_id", "created_at", "updated_at"}
	loadBalancersMetadatumPrimaryKeyColumns     = []string{"metadata_id"}
	loadBalancersMetadatumGeneratedColumns      = []string{}
)

type (
	// LoadBalancersMetadatumSlice is an alias for a slice of pointers to LoadBalancersMetadatum.
	// This should almost always be used instead of []LoadBalancersMetadatum.
	LoadBalancersMetadatumSlice []*LoadBalancersMetadatum
	// LoadBalancersMetadatumHook is the signature for custom LoadBalancersMetadatum hook methods
	LoadBalancersMetadatumHook func(context.Context, boil.ContextExecutor, *LoadBalancersMetadatum) error

	loadBalancersMetadatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	loadBalancersMetadatumType                 = reflect.TypeOf(&LoadBalancersMetadatum{})
	loadBalancersMetadatumMapping              = queries.MakeStructMapping(loadBalancersMetadatumType)
	loadBalancersMetadatumPrimaryKeyMapping, _ = queries.BindMapping(loadBalancersMetadatumType, loadBalancersMetadatumMapping, loadBalancersMetadatumPrimaryKeyColumns)
	loadBalancersMetadatumInsertCacheMut       sync.RWMutex
	loadBalancersMetadatumInsertCache          = make(map[string]insertCache)
	loadBalancersMetadatumUpdateCacheMut       sync.RWMutex
	loadBalancersMetadatumUpdateCache          = make(map[string]updateCache)
	loadBalancersMetadatumUpsertCacheMut       sync.RWMutex
	loadBalancersMetadatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var loadBalancersMetadatumAfterSelectHooks []LoadBalancersMetadatumHook

var loadBalancersMetadatumBeforeInsertHooks []LoadBalancersMetadatumHook
var loadBalancersMetadatumAfterInsertHooks []LoadBalancersMetadatumHook

var loadBalancersMetadatumBeforeUpdateHooks []LoadBalancersMetadatumHook
var loadBalancersMetadatumAfterUpdateHooks []LoadBalancersMetadatumHook

var loadBalancersMetadatumBeforeDeleteHooks []LoadBalancersMetadatumHook
var loadBalancersMetadatumAfterDeleteHooks []LoadBalancersMetadatumHook

var loadBalancersMetadatumBeforeUpsertHooks []LoadBalancersMetadatumHook
var loadBalancersMetadatumAfterUpsertHooks []LoadBalancersMetadatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LoadBalancersMetadatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancersMetadatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LoadBalancersMetadatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancersMetadatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LoadBalancersMetadatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancersMetadatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LoadBalancersMetadatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancersMetadatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LoadBalancersMetadatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancersMetadatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LoadBalancersMetadatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancersMetadatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LoadBalancersMetadatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancersMetadatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LoadBalancersMetadatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancersMetadatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LoadBalancersMetadatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancersMetadatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLoadBalancersMetadatumHook registers your hook function for all future operations.
func AddLoadBalancersMetadatumHook(hookPoint boil.HookPoint, loadBalancersMetadatumHook LoadBalancersMetadatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		loadBalancersMetadatumAfterSelectHooks = append(loadBalancersMetadatumAfterSelectHooks, loadBalancersMetadatumHook)
	case boil.BeforeInsertHook:
		loadBalancersMetadatumBeforeInsertHooks = append(loadBalancersMetadatumBeforeInsertHooks, loadBalancersMetadatumHook)
	case boil.AfterInsertHook:
		loadBalancersMetadatumAfterInsertHooks = append(loadBalancersMetadatumAfterInsertHooks, loadBalancersMetadatumHook)
	case boil.BeforeUpdateHook:
		loadBalancersMetadatumBeforeUpdateHooks = append(loadBalancersMetadatumBeforeUpdateHooks, loadBalancersMetadatumHook)
	case boil.AfterUpdateHook:
		loadBalancersMetadatumAfterUpdateHooks = append(loadBalancersMetadatumAfterUpdateHooks, loadBalancersMetadatumHook)
	case boil.BeforeDeleteHook:
		loadBalancersMetadatumBeforeDeleteHooks = append(loadBalancersMetadatumBeforeDeleteHooks, loadBalancersMetadatumHook)
	case boil.AfterDeleteHook:
		loadBalancersMetadatumAfterDeleteHooks = append(loadBalancersMetadatumAfterDeleteHooks, loadBalancersMetadatumHook)
	case boil.BeforeUpsertHook:
		loadBalancersMetadatumBeforeUpsertHooks = append(loadBalancersMetadatumBeforeUpsertHooks, loadBalancersMetadatumHook)
	case boil.AfterUpsertHook:
		loadBalancersMetadatumAfterUpsertHooks = append(loadBalancersMetadatumAfterUpsertHooks, loadBalancersMetadatumHook)
	}
}

// One returns a single loadBalancersMetadatum record from the query.
func (q loadBalancersMetadatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LoadBalancersMetadatum, error) {
	o := &LoadBalancersMetadatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to execute a one query for load_balancers_metadata")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LoadBalancersMetadatum records from the query.
func (q loadBalancersMetadatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (LoadBalancersMetadatumSlice, error) {
	var o []*LoadBalancersMetadatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LoadBalancersMetadatum slice")
	}

	if len(loadBalancersMetadatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LoadBalancersMetadatum records in the query.
func (q loadBalancersMetadatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count load_balancers_metadata rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q loadBalancersMetadatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if load_balancers_metadata exists")
	}

	return count > 0, nil
}

// LoadBalancer pointed to by the foreign key.
func (o *LoadBalancersMetadatum) LoadBalancer(mods ...qm.QueryMod) loadBalancerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"load_balancer_id\" = ?", o.LoadBalancerID),
	}

	queryMods = append(queryMods, mods...)

	return LoadBalancers(queryMods...)
}

// LoadLoadBalancer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (loadBalancersMetadatumL) LoadLoadBalancer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLoadBalancersMetadatum interface{}, mods queries.Applicator) error {
	var slice []*LoadBalancersMetadatum
	var object *LoadBalancersMetadatum

	if singular {
		var ok bool
		object, ok = maybeLoadBalancersMetadatum.(*LoadBalancersMetadatum)
		if !ok {
			object = new(LoadBalancersMetadatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLoadBalancersMetadatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLoadBalancersMetadatum))
			}
		}
	} else {
		s, ok := maybeLoadBalancersMetadatum.(*[]*LoadBalancersMetadatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLoadBalancersMetadatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLoadBalancersMetadatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &loadBalancersMetadatumR{}
		}
		args = append(args, object.LoadBalancerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &loadBalancersMetadatumR{}
			}

			for _, a := range args {
				if a == obj.LoadBalancerID {
					continue Outer
				}
			}

			args = append(args, obj.LoadBalancerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`load_balancers`),
		qm.WhereIn(`load_balancers.load_balancer_id in ?`, args...),
		qmhelper.WhereIsNull(`load_balancers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load LoadBalancer")
	}

	var resultSlice []*LoadBalancer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice LoadBalancer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for load_balancers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for load_balancers")
	}

	if len(loadBalancerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LoadBalancer = foreign
		if foreign.R == nil {
			foreign.R = &loadBalancerR{}
		}
		foreign.R.LoadBalancersMetadata = append(foreign.R.LoadBalancersMetadata, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LoadBalancerID == foreign.LoadBalancerID {
				local.R.LoadBalancer = foreign
				if foreign.R == nil {
					foreign.R = &loadBalancerR{}
				}
				foreign.R.LoadBalancersMetadata = append(foreign.R.LoadBalancersMetadata, local)
				break
			}
		}
	}

	return nil
}

// SetLoadBalancer of the loadBalancersMetadatum to the related item.
// Sets o.R.LoadBalancer to related.
// Adds o to related.R.LoadBalancersMetadata.
func (o *LoadBalancersMetadatum) SetLoadBalancer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *LoadBalancer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"load_balancers_metadata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"load_balancer_id"}),
		strmangle.WhereClause("\"", "\"", 2, loadBalancersMetadatumPrimaryKeyColumns),
	)
	values := []interface{}{related.LoadBalancerID, o.MetadataID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LoadBalancerID = related.LoadBalancerID
	if o.R == nil {
		o.R = &loadBalancersMetadatumR{
			LoadBalancer: related,
		}
	} else {
		o.R.LoadBalancer = related
	}

	if related.R == nil {
		related.R = &loadBalancerR{
			LoadBalancersMetadata: LoadBalancersMetadatumSlice{o},
		}
	} else {
		related.R.LoadBalancersMetadata = append(related.R.LoadBalancersMetadata, o)
	}

	return nil
}

// LoadBalancersMetadata retrieves all the records using an executor.
func LoadBalancersMetadata(mods ...qm.QueryMod) loadBalancersMetadatumQuery {
	mods = append(mods, qm.From("\"load_balancers_metadata\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"load_balancers_metadata\".*"})
	}

	return loadBalancersMetadatumQuery{q}
}

// FindLoadBalancersMetadatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLoadBalancersMetadatum(ctx context.Context, exec boil.ContextExecutor, metadataID string, selectCols ...string) (*LoadBalancersMetadatum, error) {
	loadBalancersMetadatumObj := &LoadBalancersMetadatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"load_balancers_metadata\" where \"metadata_id\"=$1", sel,
	)

	q := queries.Raw(query, metadataID)

	err := q.Bind(ctx, exec, loadBalancersMetadatumObj)
	if err != nil {
		return nil, errors.Wrap(err, "models: unable to select from load_balancers_metadata")
	}

	if err = loadBalancersMetadatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return loadBalancersMetadatumObj, err
	}

	return loadBalancersMetadatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LoadBalancersMetadatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no load_balancers_metadata provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(loadBalancersMetadatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	loadBalancersMetadatumInsertCacheMut.RLock()
	cache, cached := loadBalancersMetadatumInsertCache[key]
	loadBalancersMetadatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			loadBalancersMetadatumAllColumns,
			loadBalancersMetadatumColumnsWithDefault,
			loadBalancersMetadatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(loadBalancersMetadatumType, loadBalancersMetadatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(loadBalancersMetadatumType, loadBalancersMetadatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"load_balancers_metadata\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"load_balancers_metadata\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into load_balancers_metadata")
	}

	if !cached {
		loadBalancersMetadatumInsertCacheMut.Lock()
		loadBalancersMetadatumInsertCache[key] = cache
		loadBalancersMetadatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LoadBalancersMetadatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LoadBalancersMetadatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	loadBalancersMetadatumUpdateCacheMut.RLock()
	cache, cached := loadBalancersMetadatumUpdateCache[key]
	loadBalancersMetadatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			loadBalancersMetadatumAllColumns,
			loadBalancersMetadatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update load_balancers_metadata, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"load_balancers_metadata\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, loadBalancersMetadatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(loadBalancersMetadatumType, loadBalancersMetadatumMapping, append(wl, loadBalancersMetadatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update load_balancers_metadata row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for load_balancers_metadata")
	}

	if !cached {
		loadBalancersMetadatumUpdateCacheMut.Lock()
		loadBalancersMetadatumUpdateCache[key] = cache
		loadBalancersMetadatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q loadBalancersMetadatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for load_balancers_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for load_balancers_metadata")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LoadBalancersMetadatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loadBalancersMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"load_balancers_metadata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, loadBalancersMetadatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in loadBalancersMetadatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all loadBalancersMetadatum")
	}
	return rowsAff, nil
}

// Delete deletes a single LoadBalancersMetadatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LoadBalancersMetadatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LoadBalancersMetadatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), loadBalancersMetadatumPrimaryKeyMapping)
	sql := "DELETE FROM \"load_balancers_metadata\" WHERE \"metadata_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from load_balancers_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for load_balancers_metadata")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q loadBalancersMetadatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no loadBalancersMetadatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from load_balancers_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for load_balancers_metadata")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LoadBalancersMetadatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(loadBalancersMetadatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loadBalancersMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"load_balancers_metadata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, loadBalancersMetadatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from loadBalancersMetadatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for load_balancers_metadata")
	}

	if len(loadBalancersMetadatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LoadBalancersMetadatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLoadBalancersMetadatum(ctx, exec, o.MetadataID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LoadBalancersMetadatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LoadBalancersMetadatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loadBalancersMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"load_balancers_metadata\".* FROM \"load_balancers_metadata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, loadBalancersMetadatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LoadBalancersMetadatumSlice")
	}

	*o = slice

	return nil
}

// LoadBalancersMetadatumExists checks if the LoadBalancersMetadatum row exists.
func LoadBalancersMetadatumExists(ctx context.Context, exec boil.ContextExecutor, metadataID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"load_balancers_metadata\" where \"metadata_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, metadataID)
	}
	row := exec.QueryRowContext(ctx, sql, metadataID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if load_balancers_metadata exists")
	}

	return exists, nil
}

// Exists checks if the LoadBalancersMetadatum row exists.
func (o *LoadBalancersMetadatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LoadBalancersMetadatumExists(ctx, exec, o.MetadataID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LoadBalancersMetadatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no load_balancers_metadata provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(loadBalancersMetadatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	loadBalancersMetadatumUpsertCacheMut.RLock()
	cache, cached := loadBalancersMetadatumUpsertCache[key]
	loadBalancersMetadatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			loadBalancersMetadatumAllColumns,
			loadBalancersMetadatumColumnsWithDefault,
			loadBalancersMetadatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			loadBalancersMetadatumAllColumns,
			loadBalancersMetadatumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert load_balancers_metadata, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(loadBalancersMetadatumPrimaryKeyColumns))
			copy(conflict, loadBalancersMetadatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"load_balancers_metadata\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(loadBalancersMetadatumType, loadBalancersMetadatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(loadBalancersMetadatumType, loadBalancersMetadatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert load_balancers_metadata")
	}

	if !cached {
		loadBalancersMetadatumUpsertCacheMut.Lock()
		loadBalancersMetadatumUpsertCache[key] = cache
		loadBalancersMetadatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
