// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Assignment is an object representing the database table.
type Assignment struct {
	CreatedAt    time.Time `query:"created_at" param:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `query:"updated_at" param:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time `query:"deleted_at" param:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	AssignmentID string    `query:"assignment_id" param:"assignment_id" boil:"assignment_id" json:"assignment_id" toml:"assignment_id" yaml:"assignment_id"`
	PoolID       string    `query:"pool_id" param:"pool_id" boil:"pool_id" json:"pool_id" toml:"pool_id" yaml:"pool_id"`
	FrontendID   string    `query:"frontend_id" param:"frontend_id" boil:"frontend_id" json:"frontend_id" toml:"frontend_id" yaml:"frontend_id"`
	TenantID     string    `query:"tenant_id" param:"tenant_id" boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`

	R *assignmentR `query:"-" param:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L assignmentL  `query:"-" param:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssignmentColumns = struct {
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
	AssignmentID string
	PoolID       string
	FrontendID   string
	TenantID     string
}{
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
	AssignmentID: "assignment_id",
	PoolID:       "pool_id",
	FrontendID:   "frontend_id",
	TenantID:     "tenant_id",
}

var AssignmentTableColumns = struct {
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
	AssignmentID string
	PoolID       string
	FrontendID   string
	TenantID     string
}{
	CreatedAt:    "assignments.created_at",
	UpdatedAt:    "assignments.updated_at",
	DeletedAt:    "assignments.deleted_at",
	AssignmentID: "assignments.assignment_id",
	PoolID:       "assignments.pool_id",
	FrontendID:   "assignments.frontend_id",
	TenantID:     "assignments.tenant_id",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AssignmentWhere = struct {
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
	AssignmentID whereHelperstring
	PoolID       whereHelperstring
	FrontendID   whereHelperstring
	TenantID     whereHelperstring
}{
	CreatedAt:    whereHelpertime_Time{field: "\"assignments\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"assignments\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"assignments\".\"deleted_at\""},
	AssignmentID: whereHelperstring{field: "\"assignments\".\"assignment_id\""},
	PoolID:       whereHelperstring{field: "\"assignments\".\"pool_id\""},
	FrontendID:   whereHelperstring{field: "\"assignments\".\"frontend_id\""},
	TenantID:     whereHelperstring{field: "\"assignments\".\"tenant_id\""},
}

// AssignmentRels is where relationship names are stored.
var AssignmentRels = struct {
	Pool     string
	Frontend string
}{
	Pool:     "Pool",
	Frontend: "Frontend",
}

// assignmentR is where relationships are stored.
type assignmentR struct {
	Pool     *Pool     `query:"Pool" param:"Pool" boil:"Pool" json:"Pool" toml:"Pool" yaml:"Pool"`
	Frontend *Frontend `query:"Frontend" param:"Frontend" boil:"Frontend" json:"Frontend" toml:"Frontend" yaml:"Frontend"`
}

// NewStruct creates a new relationship struct
func (*assignmentR) NewStruct() *assignmentR {
	return &assignmentR{}
}

func (r *assignmentR) GetPool() *Pool {
	if r == nil {
		return nil
	}
	return r.Pool
}

func (r *assignmentR) GetFrontend() *Frontend {
	if r == nil {
		return nil
	}
	return r.Frontend
}

// assignmentL is where Load methods for each relationship are stored.
type assignmentL struct{}

var (
	assignmentAllColumns            = []string{"created_at", "updated_at", "deleted_at", "assignment_id", "pool_id", "frontend_id", "tenant_id"}
	assignmentColumnsWithoutDefault = []string{"pool_id", "frontend_id", "tenant_id"}
	assignmentColumnsWithDefault    = []string{"created_at", "updated_at", "deleted_at", "assignment_id"}
	assignmentPrimaryKeyColumns     = []string{"assignment_id"}
	assignmentGeneratedColumns      = []string{}
)

type (
	// AssignmentSlice is an alias for a slice of pointers to Assignment.
	// This should almost always be used instead of []Assignment.
	AssignmentSlice []*Assignment
	// AssignmentHook is the signature for custom Assignment hook methods
	AssignmentHook func(context.Context, boil.ContextExecutor, *Assignment) error

	assignmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assignmentType                 = reflect.TypeOf(&Assignment{})
	assignmentMapping              = queries.MakeStructMapping(assignmentType)
	assignmentPrimaryKeyMapping, _ = queries.BindMapping(assignmentType, assignmentMapping, assignmentPrimaryKeyColumns)
	assignmentInsertCacheMut       sync.RWMutex
	assignmentInsertCache          = make(map[string]insertCache)
	assignmentUpdateCacheMut       sync.RWMutex
	assignmentUpdateCache          = make(map[string]updateCache)
	assignmentUpsertCacheMut       sync.RWMutex
	assignmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assignmentAfterSelectHooks []AssignmentHook

var assignmentBeforeInsertHooks []AssignmentHook
var assignmentAfterInsertHooks []AssignmentHook

var assignmentBeforeUpdateHooks []AssignmentHook
var assignmentAfterUpdateHooks []AssignmentHook

var assignmentBeforeDeleteHooks []AssignmentHook
var assignmentAfterDeleteHooks []AssignmentHook

var assignmentBeforeUpsertHooks []AssignmentHook
var assignmentAfterUpsertHooks []AssignmentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Assignment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignmentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Assignment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignmentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Assignment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignmentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Assignment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignmentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Assignment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignmentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Assignment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignmentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Assignment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignmentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Assignment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignmentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Assignment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignmentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssignmentHook registers your hook function for all future operations.
func AddAssignmentHook(hookPoint boil.HookPoint, assignmentHook AssignmentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		assignmentAfterSelectHooks = append(assignmentAfterSelectHooks, assignmentHook)
	case boil.BeforeInsertHook:
		assignmentBeforeInsertHooks = append(assignmentBeforeInsertHooks, assignmentHook)
	case boil.AfterInsertHook:
		assignmentAfterInsertHooks = append(assignmentAfterInsertHooks, assignmentHook)
	case boil.BeforeUpdateHook:
		assignmentBeforeUpdateHooks = append(assignmentBeforeUpdateHooks, assignmentHook)
	case boil.AfterUpdateHook:
		assignmentAfterUpdateHooks = append(assignmentAfterUpdateHooks, assignmentHook)
	case boil.BeforeDeleteHook:
		assignmentBeforeDeleteHooks = append(assignmentBeforeDeleteHooks, assignmentHook)
	case boil.AfterDeleteHook:
		assignmentAfterDeleteHooks = append(assignmentAfterDeleteHooks, assignmentHook)
	case boil.BeforeUpsertHook:
		assignmentBeforeUpsertHooks = append(assignmentBeforeUpsertHooks, assignmentHook)
	case boil.AfterUpsertHook:
		assignmentAfterUpsertHooks = append(assignmentAfterUpsertHooks, assignmentHook)
	}
}

// One returns a single assignment record from the query.
func (q assignmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Assignment, error) {
	o := &Assignment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to execute a one query for assignments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Assignment records from the query.
func (q assignmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssignmentSlice, error) {
	var o []*Assignment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Assignment slice")
	}

	if len(assignmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Assignment records in the query.
func (q assignmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count assignments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assignmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if assignments exists")
	}

	return count > 0, nil
}

// Pool pointed to by the foreign key.
func (o *Assignment) Pool(mods ...qm.QueryMod) poolQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"pool_id\" = ?", o.PoolID),
	}

	queryMods = append(queryMods, mods...)

	return Pools(queryMods...)
}

// Frontend pointed to by the foreign key.
func (o *Assignment) Frontend(mods ...qm.QueryMod) frontendQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"frontend_id\" = ?", o.FrontendID),
	}

	queryMods = append(queryMods, mods...)

	return Frontends(queryMods...)
}

// LoadPool allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignmentL) LoadPool(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignment interface{}, mods queries.Applicator) error {
	var slice []*Assignment
	var object *Assignment

	if singular {
		var ok bool
		object, ok = maybeAssignment.(*Assignment)
		if !ok {
			object = new(Assignment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignment))
			}
		}
	} else {
		s, ok := maybeAssignment.(*[]*Assignment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignmentR{}
		}
		args = append(args, object.PoolID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignmentR{}
			}

			for _, a := range args {
				if a == obj.PoolID {
					continue Outer
				}
			}

			args = append(args, obj.PoolID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pools`),
		qm.WhereIn(`pools.pool_id in ?`, args...),
		qmhelper.WhereIsNull(`pools.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pool")
	}

	var resultSlice []*Pool
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pool")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pools")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pools")
	}

	if len(poolAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pool = foreign
		if foreign.R == nil {
			foreign.R = &poolR{}
		}
		foreign.R.Assignments = append(foreign.R.Assignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PoolID == foreign.PoolID {
				local.R.Pool = foreign
				if foreign.R == nil {
					foreign.R = &poolR{}
				}
				foreign.R.Assignments = append(foreign.R.Assignments, local)
				break
			}
		}
	}

	return nil
}

// LoadFrontend allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignmentL) LoadFrontend(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignment interface{}, mods queries.Applicator) error {
	var slice []*Assignment
	var object *Assignment

	if singular {
		var ok bool
		object, ok = maybeAssignment.(*Assignment)
		if !ok {
			object = new(Assignment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignment))
			}
		}
	} else {
		s, ok := maybeAssignment.(*[]*Assignment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignmentR{}
		}
		args = append(args, object.FrontendID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignmentR{}
			}

			for _, a := range args {
				if a == obj.FrontendID {
					continue Outer
				}
			}

			args = append(args, obj.FrontendID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`frontends`),
		qm.WhereIn(`frontends.frontend_id in ?`, args...),
		qmhelper.WhereIsNull(`frontends.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Frontend")
	}

	var resultSlice []*Frontend
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Frontend")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for frontends")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for frontends")
	}

	if len(frontendAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Frontend = foreign
		if foreign.R == nil {
			foreign.R = &frontendR{}
		}
		foreign.R.Assignments = append(foreign.R.Assignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FrontendID == foreign.FrontendID {
				local.R.Frontend = foreign
				if foreign.R == nil {
					foreign.R = &frontendR{}
				}
				foreign.R.Assignments = append(foreign.R.Assignments, local)
				break
			}
		}
	}

	return nil
}

// SetPool of the assignment to the related item.
// Sets o.R.Pool to related.
// Adds o to related.R.Assignments.
func (o *Assignment) SetPool(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pool) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assignments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pool_id"}),
		strmangle.WhereClause("\"", "\"", 2, assignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.PoolID, o.AssignmentID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PoolID = related.PoolID
	if o.R == nil {
		o.R = &assignmentR{
			Pool: related,
		}
	} else {
		o.R.Pool = related
	}

	if related.R == nil {
		related.R = &poolR{
			Assignments: AssignmentSlice{o},
		}
	} else {
		related.R.Assignments = append(related.R.Assignments, o)
	}

	return nil
}

// SetFrontend of the assignment to the related item.
// Sets o.R.Frontend to related.
// Adds o to related.R.Assignments.
func (o *Assignment) SetFrontend(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Frontend) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assignments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"frontend_id"}),
		strmangle.WhereClause("\"", "\"", 2, assignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.FrontendID, o.AssignmentID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FrontendID = related.FrontendID
	if o.R == nil {
		o.R = &assignmentR{
			Frontend: related,
		}
	} else {
		o.R.Frontend = related
	}

	if related.R == nil {
		related.R = &frontendR{
			Assignments: AssignmentSlice{o},
		}
	} else {
		related.R.Assignments = append(related.R.Assignments, o)
	}

	return nil
}

// Assignments retrieves all the records using an executor.
func Assignments(mods ...qm.QueryMod) assignmentQuery {
	mods = append(mods, qm.From("\"assignments\""), qmhelper.WhereIsNull("\"assignments\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"assignments\".*"})
	}

	return assignmentQuery{q}
}

// FindAssignment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssignment(ctx context.Context, exec boil.ContextExecutor, assignmentID string, selectCols ...string) (*Assignment, error) {
	assignmentObj := &Assignment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"assignments\" where \"assignment_id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, assignmentID)

	err := q.Bind(ctx, exec, assignmentObj)
	if err != nil {
		return nil, errors.Wrap(err, "models: unable to select from assignments")
	}

	if err = assignmentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return assignmentObj, err
	}

	return assignmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Assignment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assignments provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assignmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assignmentInsertCacheMut.RLock()
	cache, cached := assignmentInsertCache[key]
	assignmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assignmentAllColumns,
			assignmentColumnsWithDefault,
			assignmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assignmentType, assignmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assignmentType, assignmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"assignments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"assignments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into assignments")
	}

	if !cached {
		assignmentInsertCacheMut.Lock()
		assignmentInsertCache[key] = cache
		assignmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Assignment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Assignment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assignmentUpdateCacheMut.RLock()
	cache, cached := assignmentUpdateCache[key]
	assignmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assignmentAllColumns,
			assignmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update assignments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"assignments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assignmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assignmentType, assignmentMapping, append(wl, assignmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update assignments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for assignments")
	}

	if !cached {
		assignmentUpdateCacheMut.Lock()
		assignmentUpdateCache[key] = cache
		assignmentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assignmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for assignments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for assignments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssignmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"assignments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assignmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in assignment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all assignment")
	}
	return rowsAff, nil
}

// Delete deletes a single Assignment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Assignment) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Assignment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assignmentPrimaryKeyMapping)
		sql = "DELETE FROM \"assignments\" WHERE \"assignment_id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"assignments\" SET %s WHERE \"assignment_id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(assignmentType, assignmentMapping, append(wl, assignmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from assignments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for assignments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assignmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assignmentQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assignments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assignments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssignmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(assignmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignmentPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"assignments\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignmentPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignmentPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"assignments\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, assignmentPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assignment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assignments")
	}

	if len(assignmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Assignment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssignment(ctx, exec, o.AssignmentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssignmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssignmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"assignments\".* FROM \"assignments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignmentPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssignmentSlice")
	}

	*o = slice

	return nil
}

// AssignmentExists checks if the Assignment row exists.
func AssignmentExists(ctx context.Context, exec boil.ContextExecutor, assignmentID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"assignments\" where \"assignment_id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, assignmentID)
	}
	row := exec.QueryRowContext(ctx, sql, assignmentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if assignments exists")
	}

	return exists, nil
}

// Exists checks if the Assignment row exists.
func (o *Assignment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AssignmentExists(ctx, exec, o.AssignmentID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Assignment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assignments provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assignmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assignmentUpsertCacheMut.RLock()
	cache, cached := assignmentUpsertCache[key]
	assignmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assignmentAllColumns,
			assignmentColumnsWithDefault,
			assignmentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			assignmentAllColumns,
			assignmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert assignments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assignmentPrimaryKeyColumns))
			copy(conflict, assignmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"assignments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assignmentType, assignmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assignmentType, assignmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert assignments")
	}

	if !cached {
		assignmentUpsertCacheMut.Lock()
		assignmentUpsertCache[key] = cache
		assignmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
