// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Origin is an object representing the database table.
type Origin struct {
	CreatedAt                 time.Time `query:"created_at" param:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                 time.Time `query:"updated_at" param:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt                 null.Time `query:"deleted_at" param:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	OriginID                  string    `query:"origin_id" param:"origin_id" boil:"origin_id" json:"origin_id" toml:"origin_id" yaml:"origin_id"`
	PoolID                    string    `query:"pool_id" param:"pool_id" boil:"pool_id" json:"pool_id" toml:"pool_id" yaml:"pool_id"`
	OriginTarget              string    `query:"origin_target" param:"origin_target" boil:"origin_target" json:"origin_target" toml:"origin_target" yaml:"origin_target"`
	Port                      int64     `query:"port" param:"port" boil:"port" json:"port" toml:"port" yaml:"port"`
	Name                      string    `query:"name" param:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	Slug                      string    `query:"slug" param:"slug" boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	OriginUserSettingDisabled bool      `query:"origin_user_setting_disabled" param:"origin_user_setting_disabled" boil:"origin_user_setting_disabled" json:"origin_user_setting_disabled" toml:"origin_user_setting_disabled" yaml:"origin_user_setting_disabled"`
	StateChangedAt            null.Time `query:"state_changed_at" param:"state_changed_at" boil:"state_changed_at" json:"state_changed_at,omitempty" toml:"state_changed_at" yaml:"state_changed_at,omitempty"`
	CurrentState              string    `query:"current_state" param:"current_state" boil:"current_state" json:"current_state" toml:"current_state" yaml:"current_state"`
	PreviousState             string    `query:"previous_state" param:"previous_state" boil:"previous_state" json:"previous_state" toml:"previous_state" yaml:"previous_state"`

	R *originR `query:"-" param:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L originL  `query:"-" param:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OriginColumns = struct {
	CreatedAt                 string
	UpdatedAt                 string
	DeletedAt                 string
	OriginID                  string
	PoolID                    string
	OriginTarget              string
	Port                      string
	Name                      string
	Slug                      string
	OriginUserSettingDisabled string
	StateChangedAt            string
	CurrentState              string
	PreviousState             string
}{
	CreatedAt:                 "created_at",
	UpdatedAt:                 "updated_at",
	DeletedAt:                 "deleted_at",
	OriginID:                  "origin_id",
	PoolID:                    "pool_id",
	OriginTarget:              "origin_target",
	Port:                      "port",
	Name:                      "name",
	Slug:                      "slug",
	OriginUserSettingDisabled: "origin_user_setting_disabled",
	StateChangedAt:            "state_changed_at",
	CurrentState:              "current_state",
	PreviousState:             "previous_state",
}

var OriginTableColumns = struct {
	CreatedAt                 string
	UpdatedAt                 string
	DeletedAt                 string
	OriginID                  string
	PoolID                    string
	OriginTarget              string
	Port                      string
	Name                      string
	Slug                      string
	OriginUserSettingDisabled string
	StateChangedAt            string
	CurrentState              string
	PreviousState             string
}{
	CreatedAt:                 "origins.created_at",
	UpdatedAt:                 "origins.updated_at",
	DeletedAt:                 "origins.deleted_at",
	OriginID:                  "origins.origin_id",
	PoolID:                    "origins.pool_id",
	OriginTarget:              "origins.origin_target",
	Port:                      "origins.port",
	Name:                      "origins.name",
	Slug:                      "origins.slug",
	OriginUserSettingDisabled: "origins.origin_user_setting_disabled",
	StateChangedAt:            "origins.state_changed_at",
	CurrentState:              "origins.current_state",
	PreviousState:             "origins.previous_state",
}

// Generated where

var OriginWhere = struct {
	CreatedAt                 whereHelpertime_Time
	UpdatedAt                 whereHelpertime_Time
	DeletedAt                 whereHelpernull_Time
	OriginID                  whereHelperstring
	PoolID                    whereHelperstring
	OriginTarget              whereHelperstring
	Port                      whereHelperint64
	Name                      whereHelperstring
	Slug                      whereHelperstring
	OriginUserSettingDisabled whereHelperbool
	StateChangedAt            whereHelpernull_Time
	CurrentState              whereHelperstring
	PreviousState             whereHelperstring
}{
	CreatedAt:                 whereHelpertime_Time{field: "\"origins\".\"created_at\""},
	UpdatedAt:                 whereHelpertime_Time{field: "\"origins\".\"updated_at\""},
	DeletedAt:                 whereHelpernull_Time{field: "\"origins\".\"deleted_at\""},
	OriginID:                  whereHelperstring{field: "\"origins\".\"origin_id\""},
	PoolID:                    whereHelperstring{field: "\"origins\".\"pool_id\""},
	OriginTarget:              whereHelperstring{field: "\"origins\".\"origin_target\""},
	Port:                      whereHelperint64{field: "\"origins\".\"port\""},
	Name:                      whereHelperstring{field: "\"origins\".\"name\""},
	Slug:                      whereHelperstring{field: "\"origins\".\"slug\""},
	OriginUserSettingDisabled: whereHelperbool{field: "\"origins\".\"origin_user_setting_disabled\""},
	StateChangedAt:            whereHelpernull_Time{field: "\"origins\".\"state_changed_at\""},
	CurrentState:              whereHelperstring{field: "\"origins\".\"current_state\""},
	PreviousState:             whereHelperstring{field: "\"origins\".\"previous_state\""},
}

// OriginRels is where relationship names are stored.
var OriginRels = struct {
	Pool string
}{
	Pool: "Pool",
}

// originR is where relationships are stored.
type originR struct {
	Pool *Pool `query:"Pool" param:"Pool" boil:"Pool" json:"Pool" toml:"Pool" yaml:"Pool"`
}

// NewStruct creates a new relationship struct
func (*originR) NewStruct() *originR {
	return &originR{}
}

func (r *originR) GetPool() *Pool {
	if r == nil {
		return nil
	}
	return r.Pool
}

// originL is where Load methods for each relationship are stored.
type originL struct{}

var (
	originAllColumns            = []string{"created_at", "updated_at", "deleted_at", "origin_id", "pool_id", "origin_target", "port", "name", "slug", "origin_user_setting_disabled", "state_changed_at", "current_state", "previous_state"}
	originColumnsWithoutDefault = []string{"pool_id", "origin_target", "port", "name", "slug", "current_state", "previous_state"}
	originColumnsWithDefault    = []string{"created_at", "updated_at", "deleted_at", "origin_id", "origin_user_setting_disabled", "state_changed_at"}
	originPrimaryKeyColumns     = []string{"origin_id"}
	originGeneratedColumns      = []string{}
)

type (
	// OriginSlice is an alias for a slice of pointers to Origin.
	// This should almost always be used instead of []Origin.
	OriginSlice []*Origin
	// OriginHook is the signature for custom Origin hook methods
	OriginHook func(context.Context, boil.ContextExecutor, *Origin) error

	originQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	originType                 = reflect.TypeOf(&Origin{})
	originMapping              = queries.MakeStructMapping(originType)
	originPrimaryKeyMapping, _ = queries.BindMapping(originType, originMapping, originPrimaryKeyColumns)
	originInsertCacheMut       sync.RWMutex
	originInsertCache          = make(map[string]insertCache)
	originUpdateCacheMut       sync.RWMutex
	originUpdateCache          = make(map[string]updateCache)
	originUpsertCacheMut       sync.RWMutex
	originUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var originAfterSelectHooks []OriginHook

var originBeforeInsertHooks []OriginHook
var originAfterInsertHooks []OriginHook

var originBeforeUpdateHooks []OriginHook
var originAfterUpdateHooks []OriginHook

var originBeforeDeleteHooks []OriginHook
var originAfterDeleteHooks []OriginHook

var originBeforeUpsertHooks []OriginHook
var originAfterUpsertHooks []OriginHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Origin) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Origin) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Origin) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Origin) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Origin) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Origin) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Origin) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Origin) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Origin) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOriginHook registers your hook function for all future operations.
func AddOriginHook(hookPoint boil.HookPoint, originHook OriginHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		originAfterSelectHooks = append(originAfterSelectHooks, originHook)
	case boil.BeforeInsertHook:
		originBeforeInsertHooks = append(originBeforeInsertHooks, originHook)
	case boil.AfterInsertHook:
		originAfterInsertHooks = append(originAfterInsertHooks, originHook)
	case boil.BeforeUpdateHook:
		originBeforeUpdateHooks = append(originBeforeUpdateHooks, originHook)
	case boil.AfterUpdateHook:
		originAfterUpdateHooks = append(originAfterUpdateHooks, originHook)
	case boil.BeforeDeleteHook:
		originBeforeDeleteHooks = append(originBeforeDeleteHooks, originHook)
	case boil.AfterDeleteHook:
		originAfterDeleteHooks = append(originAfterDeleteHooks, originHook)
	case boil.BeforeUpsertHook:
		originBeforeUpsertHooks = append(originBeforeUpsertHooks, originHook)
	case boil.AfterUpsertHook:
		originAfterUpsertHooks = append(originAfterUpsertHooks, originHook)
	}
}

// One returns a single origin record from the query.
func (q originQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Origin, error) {
	o := &Origin{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to execute a one query for origins")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Origin records from the query.
func (q originQuery) All(ctx context.Context, exec boil.ContextExecutor) (OriginSlice, error) {
	var o []*Origin

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Origin slice")
	}

	if len(originAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Origin records in the query.
func (q originQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count origins rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q originQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if origins exists")
	}

	return count > 0, nil
}

// Pool pointed to by the foreign key.
func (o *Origin) Pool(mods ...qm.QueryMod) poolQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"pool_id\" = ?", o.PoolID),
	}

	queryMods = append(queryMods, mods...)

	return Pools(queryMods...)
}

// LoadPool allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (originL) LoadPool(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrigin interface{}, mods queries.Applicator) error {
	var slice []*Origin
	var object *Origin

	if singular {
		var ok bool
		object, ok = maybeOrigin.(*Origin)
		if !ok {
			object = new(Origin)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrigin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrigin))
			}
		}
	} else {
		s, ok := maybeOrigin.(*[]*Origin)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrigin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrigin))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originR{}
		}
		args = append(args, object.PoolID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originR{}
			}

			for _, a := range args {
				if a == obj.PoolID {
					continue Outer
				}
			}

			args = append(args, obj.PoolID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pools`),
		qm.WhereIn(`pools.pool_id in ?`, args...),
		qmhelper.WhereIsNull(`pools.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pool")
	}

	var resultSlice []*Pool
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pool")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pools")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pools")
	}

	if len(poolAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pool = foreign
		if foreign.R == nil {
			foreign.R = &poolR{}
		}
		foreign.R.Origins = append(foreign.R.Origins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PoolID == foreign.PoolID {
				local.R.Pool = foreign
				if foreign.R == nil {
					foreign.R = &poolR{}
				}
				foreign.R.Origins = append(foreign.R.Origins, local)
				break
			}
		}
	}

	return nil
}

// SetPool of the origin to the related item.
// Sets o.R.Pool to related.
// Adds o to related.R.Origins.
func (o *Origin) SetPool(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pool) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"origins\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pool_id"}),
		strmangle.WhereClause("\"", "\"", 2, originPrimaryKeyColumns),
	)
	values := []interface{}{related.PoolID, o.OriginID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PoolID = related.PoolID
	if o.R == nil {
		o.R = &originR{
			Pool: related,
		}
	} else {
		o.R.Pool = related
	}

	if related.R == nil {
		related.R = &poolR{
			Origins: OriginSlice{o},
		}
	} else {
		related.R.Origins = append(related.R.Origins, o)
	}

	return nil
}

// Origins retrieves all the records using an executor.
func Origins(mods ...qm.QueryMod) originQuery {
	mods = append(mods, qm.From("\"origins\""), qmhelper.WhereIsNull("\"origins\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"origins\".*"})
	}

	return originQuery{q}
}

// FindOrigin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrigin(ctx context.Context, exec boil.ContextExecutor, originID string, selectCols ...string) (*Origin, error) {
	originObj := &Origin{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"origins\" where \"origin_id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, originID)

	err := q.Bind(ctx, exec, originObj)
	if err != nil {
		return nil, errors.Wrap(err, "models: unable to select from origins")
	}

	if err = originObj.doAfterSelectHooks(ctx, exec); err != nil {
		return originObj, err
	}

	return originObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Origin) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no origins provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(originColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	originInsertCacheMut.RLock()
	cache, cached := originInsertCache[key]
	originInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			originAllColumns,
			originColumnsWithDefault,
			originColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(originType, originMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(originType, originMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"origins\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"origins\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into origins")
	}

	if !cached {
		originInsertCacheMut.Lock()
		originInsertCache[key] = cache
		originInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Origin.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Origin) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	originUpdateCacheMut.RLock()
	cache, cached := originUpdateCache[key]
	originUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			originAllColumns,
			originPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update origins, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"origins\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, originPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(originType, originMapping, append(wl, originPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update origins row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for origins")
	}

	if !cached {
		originUpdateCacheMut.Lock()
		originUpdateCache[key] = cache
		originUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q originQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for origins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for origins")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OriginSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"origins\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, originPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in origin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all origin")
	}
	return rowsAff, nil
}

// Delete deletes a single Origin record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Origin) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Origin provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), originPrimaryKeyMapping)
		sql = "DELETE FROM \"origins\" WHERE \"origin_id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"origins\" SET %s WHERE \"origin_id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(originType, originMapping, append(wl, originPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from origins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for origins")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q originQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no originQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from origins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for origins")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OriginSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(originBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"origins\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, originPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"origins\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, originPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from origin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for origins")
	}

	if len(originAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Origin) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrigin(ctx, exec, o.OriginID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OriginSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OriginSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"origins\".* FROM \"origins\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, originPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OriginSlice")
	}

	*o = slice

	return nil
}

// OriginExists checks if the Origin row exists.
func OriginExists(ctx context.Context, exec boil.ContextExecutor, originID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"origins\" where \"origin_id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, originID)
	}
	row := exec.QueryRowContext(ctx, sql, originID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if origins exists")
	}

	return exists, nil
}

// Exists checks if the Origin row exists.
func (o *Origin) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OriginExists(ctx, exec, o.OriginID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Origin) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no origins provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(originColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	originUpsertCacheMut.RLock()
	cache, cached := originUpsertCache[key]
	originUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			originAllColumns,
			originColumnsWithDefault,
			originColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			originAllColumns,
			originPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert origins, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(originPrimaryKeyColumns))
			copy(conflict, originPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"origins\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(originType, originMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(originType, originMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert origins")
	}

	if !cached {
		originUpsertCacheMut.Lock()
		originUpsertCache[key] = cache
		originUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
