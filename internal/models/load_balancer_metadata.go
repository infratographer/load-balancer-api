// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// LoadBalancerMetadatum is an object representing the database table.
type LoadBalancerMetadatum struct {
	MetadataID     string     `query:"metadata_id" param:"metadata_id" boil:"metadata_id" json:"metadata_id" toml:"metadata_id" yaml:"metadata_id"`
	LoadBalancerID string     `query:"load_balancer_id" param:"load_balancer_id" boil:"load_balancer_id" json:"load_balancer_id" toml:"load_balancer_id" yaml:"load_balancer_id"`
	Namespace      string     `query:"namespace" param:"namespace" boil:"namespace" json:"namespace" toml:"namespace" yaml:"namespace"`
	Data           types.JSON `query:"data" param:"data" boil:"data" json:"data" toml:"data" yaml:"data"`
	CreatedAt      time.Time  `query:"created_at" param:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time  `query:"updated_at" param:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      null.Time  `query:"deleted_at" param:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *loadBalancerMetadatumR `query:"-" param:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L loadBalancerMetadatumL  `query:"-" param:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LoadBalancerMetadatumColumns = struct {
	MetadataID     string
	LoadBalancerID string
	Namespace      string
	Data           string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	MetadataID:     "metadata_id",
	LoadBalancerID: "load_balancer_id",
	Namespace:      "namespace",
	Data:           "data",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

var LoadBalancerMetadatumTableColumns = struct {
	MetadataID     string
	LoadBalancerID string
	Namespace      string
	Data           string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	MetadataID:     "load_balancer_metadata.metadata_id",
	LoadBalancerID: "load_balancer_metadata.load_balancer_id",
	Namespace:      "load_balancer_metadata.namespace",
	Data:           "load_balancer_metadata.data",
	CreatedAt:      "load_balancer_metadata.created_at",
	UpdatedAt:      "load_balancer_metadata.updated_at",
	DeletedAt:      "load_balancer_metadata.deleted_at",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var LoadBalancerMetadatumWhere = struct {
	MetadataID     whereHelperstring
	LoadBalancerID whereHelperstring
	Namespace      whereHelperstring
	Data           whereHelpertypes_JSON
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
}{
	MetadataID:     whereHelperstring{field: "\"load_balancer_metadata\".\"metadata_id\""},
	LoadBalancerID: whereHelperstring{field: "\"load_balancer_metadata\".\"load_balancer_id\""},
	Namespace:      whereHelperstring{field: "\"load_balancer_metadata\".\"namespace\""},
	Data:           whereHelpertypes_JSON{field: "\"load_balancer_metadata\".\"data\""},
	CreatedAt:      whereHelpertime_Time{field: "\"load_balancer_metadata\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"load_balancer_metadata\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"load_balancer_metadata\".\"deleted_at\""},
}

// LoadBalancerMetadatumRels is where relationship names are stored.
var LoadBalancerMetadatumRels = struct {
	LoadBalancer string
}{
	LoadBalancer: "LoadBalancer",
}

// loadBalancerMetadatumR is where relationships are stored.
type loadBalancerMetadatumR struct {
	LoadBalancer *LoadBalancer `query:"LoadBalancer" param:"LoadBalancer" boil:"LoadBalancer" json:"LoadBalancer" toml:"LoadBalancer" yaml:"LoadBalancer"`
}

// NewStruct creates a new relationship struct
func (*loadBalancerMetadatumR) NewStruct() *loadBalancerMetadatumR {
	return &loadBalancerMetadatumR{}
}

func (r *loadBalancerMetadatumR) GetLoadBalancer() *LoadBalancer {
	if r == nil {
		return nil
	}
	return r.LoadBalancer
}

// loadBalancerMetadatumL is where Load methods for each relationship are stored.
type loadBalancerMetadatumL struct{}

var (
	loadBalancerMetadatumAllColumns            = []string{"metadata_id", "load_balancer_id", "namespace", "data", "created_at", "updated_at", "deleted_at"}
	loadBalancerMetadatumColumnsWithoutDefault = []string{"load_balancer_id", "namespace", "data"}
	loadBalancerMetadatumColumnsWithDefault    = []string{"metadata_id", "created_at", "updated_at", "deleted_at"}
	loadBalancerMetadatumPrimaryKeyColumns     = []string{"metadata_id"}
	loadBalancerMetadatumGeneratedColumns      = []string{}
)

type (
	// LoadBalancerMetadatumSlice is an alias for a slice of pointers to LoadBalancerMetadatum.
	// This should almost always be used instead of []LoadBalancerMetadatum.
	LoadBalancerMetadatumSlice []*LoadBalancerMetadatum
	// LoadBalancerMetadatumHook is the signature for custom LoadBalancerMetadatum hook methods
	LoadBalancerMetadatumHook func(context.Context, boil.ContextExecutor, *LoadBalancerMetadatum) error

	loadBalancerMetadatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	loadBalancerMetadatumType                 = reflect.TypeOf(&LoadBalancerMetadatum{})
	loadBalancerMetadatumMapping              = queries.MakeStructMapping(loadBalancerMetadatumType)
	loadBalancerMetadatumPrimaryKeyMapping, _ = queries.BindMapping(loadBalancerMetadatumType, loadBalancerMetadatumMapping, loadBalancerMetadatumPrimaryKeyColumns)
	loadBalancerMetadatumInsertCacheMut       sync.RWMutex
	loadBalancerMetadatumInsertCache          = make(map[string]insertCache)
	loadBalancerMetadatumUpdateCacheMut       sync.RWMutex
	loadBalancerMetadatumUpdateCache          = make(map[string]updateCache)
	loadBalancerMetadatumUpsertCacheMut       sync.RWMutex
	loadBalancerMetadatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var loadBalancerMetadatumAfterSelectHooks []LoadBalancerMetadatumHook

var loadBalancerMetadatumBeforeInsertHooks []LoadBalancerMetadatumHook
var loadBalancerMetadatumAfterInsertHooks []LoadBalancerMetadatumHook

var loadBalancerMetadatumBeforeUpdateHooks []LoadBalancerMetadatumHook
var loadBalancerMetadatumAfterUpdateHooks []LoadBalancerMetadatumHook

var loadBalancerMetadatumBeforeDeleteHooks []LoadBalancerMetadatumHook
var loadBalancerMetadatumAfterDeleteHooks []LoadBalancerMetadatumHook

var loadBalancerMetadatumBeforeUpsertHooks []LoadBalancerMetadatumHook
var loadBalancerMetadatumAfterUpsertHooks []LoadBalancerMetadatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LoadBalancerMetadatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancerMetadatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LoadBalancerMetadatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancerMetadatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LoadBalancerMetadatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancerMetadatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LoadBalancerMetadatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancerMetadatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LoadBalancerMetadatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancerMetadatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LoadBalancerMetadatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancerMetadatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LoadBalancerMetadatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancerMetadatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LoadBalancerMetadatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancerMetadatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LoadBalancerMetadatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loadBalancerMetadatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLoadBalancerMetadatumHook registers your hook function for all future operations.
func AddLoadBalancerMetadatumHook(hookPoint boil.HookPoint, loadBalancerMetadatumHook LoadBalancerMetadatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		loadBalancerMetadatumAfterSelectHooks = append(loadBalancerMetadatumAfterSelectHooks, loadBalancerMetadatumHook)
	case boil.BeforeInsertHook:
		loadBalancerMetadatumBeforeInsertHooks = append(loadBalancerMetadatumBeforeInsertHooks, loadBalancerMetadatumHook)
	case boil.AfterInsertHook:
		loadBalancerMetadatumAfterInsertHooks = append(loadBalancerMetadatumAfterInsertHooks, loadBalancerMetadatumHook)
	case boil.BeforeUpdateHook:
		loadBalancerMetadatumBeforeUpdateHooks = append(loadBalancerMetadatumBeforeUpdateHooks, loadBalancerMetadatumHook)
	case boil.AfterUpdateHook:
		loadBalancerMetadatumAfterUpdateHooks = append(loadBalancerMetadatumAfterUpdateHooks, loadBalancerMetadatumHook)
	case boil.BeforeDeleteHook:
		loadBalancerMetadatumBeforeDeleteHooks = append(loadBalancerMetadatumBeforeDeleteHooks, loadBalancerMetadatumHook)
	case boil.AfterDeleteHook:
		loadBalancerMetadatumAfterDeleteHooks = append(loadBalancerMetadatumAfterDeleteHooks, loadBalancerMetadatumHook)
	case boil.BeforeUpsertHook:
		loadBalancerMetadatumBeforeUpsertHooks = append(loadBalancerMetadatumBeforeUpsertHooks, loadBalancerMetadatumHook)
	case boil.AfterUpsertHook:
		loadBalancerMetadatumAfterUpsertHooks = append(loadBalancerMetadatumAfterUpsertHooks, loadBalancerMetadatumHook)
	}
}

// One returns a single loadBalancerMetadatum record from the query.
func (q loadBalancerMetadatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LoadBalancerMetadatum, error) {
	o := &LoadBalancerMetadatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to execute a one query for load_balancer_metadata")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LoadBalancerMetadatum records from the query.
func (q loadBalancerMetadatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (LoadBalancerMetadatumSlice, error) {
	var o []*LoadBalancerMetadatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LoadBalancerMetadatum slice")
	}

	if len(loadBalancerMetadatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LoadBalancerMetadatum records in the query.
func (q loadBalancerMetadatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count load_balancer_metadata rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q loadBalancerMetadatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if load_balancer_metadata exists")
	}

	return count > 0, nil
}

// LoadBalancer pointed to by the foreign key.
func (o *LoadBalancerMetadatum) LoadBalancer(mods ...qm.QueryMod) loadBalancerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"load_balancer_id\" = ?", o.LoadBalancerID),
	}

	queryMods = append(queryMods, mods...)

	return LoadBalancers(queryMods...)
}

// LoadLoadBalancer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (loadBalancerMetadatumL) LoadLoadBalancer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLoadBalancerMetadatum interface{}, mods queries.Applicator) error {
	var slice []*LoadBalancerMetadatum
	var object *LoadBalancerMetadatum

	if singular {
		var ok bool
		object, ok = maybeLoadBalancerMetadatum.(*LoadBalancerMetadatum)
		if !ok {
			object = new(LoadBalancerMetadatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLoadBalancerMetadatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLoadBalancerMetadatum))
			}
		}
	} else {
		s, ok := maybeLoadBalancerMetadatum.(*[]*LoadBalancerMetadatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLoadBalancerMetadatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLoadBalancerMetadatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &loadBalancerMetadatumR{}
		}
		args = append(args, object.LoadBalancerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &loadBalancerMetadatumR{}
			}

			for _, a := range args {
				if a == obj.LoadBalancerID {
					continue Outer
				}
			}

			args = append(args, obj.LoadBalancerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`load_balancers`),
		qm.WhereIn(`load_balancers.load_balancer_id in ?`, args...),
		qmhelper.WhereIsNull(`load_balancers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load LoadBalancer")
	}

	var resultSlice []*LoadBalancer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice LoadBalancer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for load_balancers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for load_balancers")
	}

	if len(loadBalancerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LoadBalancer = foreign
		if foreign.R == nil {
			foreign.R = &loadBalancerR{}
		}
		foreign.R.LoadBalancerMetadata = append(foreign.R.LoadBalancerMetadata, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LoadBalancerID == foreign.LoadBalancerID {
				local.R.LoadBalancer = foreign
				if foreign.R == nil {
					foreign.R = &loadBalancerR{}
				}
				foreign.R.LoadBalancerMetadata = append(foreign.R.LoadBalancerMetadata, local)
				break
			}
		}
	}

	return nil
}

// SetLoadBalancer of the loadBalancerMetadatum to the related item.
// Sets o.R.LoadBalancer to related.
// Adds o to related.R.LoadBalancerMetadata.
func (o *LoadBalancerMetadatum) SetLoadBalancer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *LoadBalancer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"load_balancer_metadata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"load_balancer_id"}),
		strmangle.WhereClause("\"", "\"", 2, loadBalancerMetadatumPrimaryKeyColumns),
	)
	values := []interface{}{related.LoadBalancerID, o.MetadataID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LoadBalancerID = related.LoadBalancerID
	if o.R == nil {
		o.R = &loadBalancerMetadatumR{
			LoadBalancer: related,
		}
	} else {
		o.R.LoadBalancer = related
	}

	if related.R == nil {
		related.R = &loadBalancerR{
			LoadBalancerMetadata: LoadBalancerMetadatumSlice{o},
		}
	} else {
		related.R.LoadBalancerMetadata = append(related.R.LoadBalancerMetadata, o)
	}

	return nil
}

// LoadBalancerMetadata retrieves all the records using an executor.
func LoadBalancerMetadata(mods ...qm.QueryMod) loadBalancerMetadatumQuery {
	mods = append(mods, qm.From("\"load_balancer_metadata\""), qmhelper.WhereIsNull("\"load_balancer_metadata\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"load_balancer_metadata\".*"})
	}

	return loadBalancerMetadatumQuery{q}
}

// FindLoadBalancerMetadatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLoadBalancerMetadatum(ctx context.Context, exec boil.ContextExecutor, metadataID string, selectCols ...string) (*LoadBalancerMetadatum, error) {
	loadBalancerMetadatumObj := &LoadBalancerMetadatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"load_balancer_metadata\" where \"metadata_id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, metadataID)

	err := q.Bind(ctx, exec, loadBalancerMetadatumObj)
	if err != nil {
		return nil, errors.Wrap(err, "models: unable to select from load_balancer_metadata")
	}

	if err = loadBalancerMetadatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return loadBalancerMetadatumObj, err
	}

	return loadBalancerMetadatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LoadBalancerMetadatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no load_balancer_metadata provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(loadBalancerMetadatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	loadBalancerMetadatumInsertCacheMut.RLock()
	cache, cached := loadBalancerMetadatumInsertCache[key]
	loadBalancerMetadatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			loadBalancerMetadatumAllColumns,
			loadBalancerMetadatumColumnsWithDefault,
			loadBalancerMetadatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(loadBalancerMetadatumType, loadBalancerMetadatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(loadBalancerMetadatumType, loadBalancerMetadatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"load_balancer_metadata\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"load_balancer_metadata\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into load_balancer_metadata")
	}

	if !cached {
		loadBalancerMetadatumInsertCacheMut.Lock()
		loadBalancerMetadatumInsertCache[key] = cache
		loadBalancerMetadatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LoadBalancerMetadatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LoadBalancerMetadatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	loadBalancerMetadatumUpdateCacheMut.RLock()
	cache, cached := loadBalancerMetadatumUpdateCache[key]
	loadBalancerMetadatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			loadBalancerMetadatumAllColumns,
			loadBalancerMetadatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update load_balancer_metadata, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"load_balancer_metadata\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, loadBalancerMetadatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(loadBalancerMetadatumType, loadBalancerMetadatumMapping, append(wl, loadBalancerMetadatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update load_balancer_metadata row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for load_balancer_metadata")
	}

	if !cached {
		loadBalancerMetadatumUpdateCacheMut.Lock()
		loadBalancerMetadatumUpdateCache[key] = cache
		loadBalancerMetadatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q loadBalancerMetadatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for load_balancer_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for load_balancer_metadata")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LoadBalancerMetadatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loadBalancerMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"load_balancer_metadata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, loadBalancerMetadatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in loadBalancerMetadatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all loadBalancerMetadatum")
	}
	return rowsAff, nil
}

// Delete deletes a single LoadBalancerMetadatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LoadBalancerMetadatum) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LoadBalancerMetadatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), loadBalancerMetadatumPrimaryKeyMapping)
		sql = "DELETE FROM \"load_balancer_metadata\" WHERE \"metadata_id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"load_balancer_metadata\" SET %s WHERE \"metadata_id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(loadBalancerMetadatumType, loadBalancerMetadatumMapping, append(wl, loadBalancerMetadatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from load_balancer_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for load_balancer_metadata")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q loadBalancerMetadatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no loadBalancerMetadatumQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from load_balancer_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for load_balancer_metadata")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LoadBalancerMetadatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(loadBalancerMetadatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loadBalancerMetadatumPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"load_balancer_metadata\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, loadBalancerMetadatumPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loadBalancerMetadatumPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"load_balancer_metadata\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, loadBalancerMetadatumPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from loadBalancerMetadatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for load_balancer_metadata")
	}

	if len(loadBalancerMetadatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LoadBalancerMetadatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLoadBalancerMetadatum(ctx, exec, o.MetadataID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LoadBalancerMetadatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LoadBalancerMetadatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loadBalancerMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"load_balancer_metadata\".* FROM \"load_balancer_metadata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, loadBalancerMetadatumPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LoadBalancerMetadatumSlice")
	}

	*o = slice

	return nil
}

// LoadBalancerMetadatumExists checks if the LoadBalancerMetadatum row exists.
func LoadBalancerMetadatumExists(ctx context.Context, exec boil.ContextExecutor, metadataID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"load_balancer_metadata\" where \"metadata_id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, metadataID)
	}
	row := exec.QueryRowContext(ctx, sql, metadataID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if load_balancer_metadata exists")
	}

	return exists, nil
}

// Exists checks if the LoadBalancerMetadatum row exists.
func (o *LoadBalancerMetadatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LoadBalancerMetadatumExists(ctx, exec, o.MetadataID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LoadBalancerMetadatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no load_balancer_metadata provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(loadBalancerMetadatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	loadBalancerMetadatumUpsertCacheMut.RLock()
	cache, cached := loadBalancerMetadatumUpsertCache[key]
	loadBalancerMetadatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			loadBalancerMetadatumAllColumns,
			loadBalancerMetadatumColumnsWithDefault,
			loadBalancerMetadatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			loadBalancerMetadatumAllColumns,
			loadBalancerMetadatumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert load_balancer_metadata, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(loadBalancerMetadatumPrimaryKeyColumns))
			copy(conflict, loadBalancerMetadatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"load_balancer_metadata\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(loadBalancerMetadatumType, loadBalancerMetadatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(loadBalancerMetadatumType, loadBalancerMetadatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert load_balancer_metadata")
	}

	if !cached {
		loadBalancerMetadatumUpsertCacheMut.Lock()
		loadBalancerMetadatumUpsertCache[key] = cache
		loadBalancerMetadatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
