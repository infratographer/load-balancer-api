// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Frontend is an object representing the database table.
type Frontend struct {
	CreatedAt      time.Time `query:"created_at" param:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `query:"updated_at" param:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      null.Time `query:"deleted_at" param:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	FrontendID     string    `query:"frontend_id" param:"frontend_id" boil:"frontend_id" json:"frontend_id" toml:"frontend_id" yaml:"frontend_id"`
	LoadBalancerID string    `query:"load_balancer_id" param:"load_balancer_id" boil:"load_balancer_id" json:"load_balancer_id" toml:"load_balancer_id" yaml:"load_balancer_id"`
	Port           int64     `query:"port" param:"port" boil:"port" json:"port" toml:"port" yaml:"port"`
	AfInet         string    `query:"af_inet" param:"af_inet" boil:"af_inet" json:"af_inet" toml:"af_inet" yaml:"af_inet"`
	DisplayName    string    `query:"display_name" param:"display_name" boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`
	Slug           string    `query:"slug" param:"slug" boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	StateChangedAt null.Time `query:"state_changed_at" param:"state_changed_at" boil:"state_changed_at" json:"state_changed_at,omitempty" toml:"state_changed_at" yaml:"state_changed_at,omitempty"`
	CurrentState   string    `query:"current_state" param:"current_state" boil:"current_state" json:"current_state" toml:"current_state" yaml:"current_state"`
	PreviousState  string    `query:"previous_state" param:"previous_state" boil:"previous_state" json:"previous_state" toml:"previous_state" yaml:"previous_state"`

	R *frontendR `query:"-" param:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L frontendL  `query:"-" param:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FrontendColumns = struct {
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
	FrontendID     string
	LoadBalancerID string
	Port           string
	AfInet         string
	DisplayName    string
	Slug           string
	StateChangedAt string
	CurrentState   string
	PreviousState  string
}{
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
	FrontendID:     "frontend_id",
	LoadBalancerID: "load_balancer_id",
	Port:           "port",
	AfInet:         "af_inet",
	DisplayName:    "display_name",
	Slug:           "slug",
	StateChangedAt: "state_changed_at",
	CurrentState:   "current_state",
	PreviousState:  "previous_state",
}

var FrontendTableColumns = struct {
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
	FrontendID     string
	LoadBalancerID string
	Port           string
	AfInet         string
	DisplayName    string
	Slug           string
	StateChangedAt string
	CurrentState   string
	PreviousState  string
}{
	CreatedAt:      "frontends.created_at",
	UpdatedAt:      "frontends.updated_at",
	DeletedAt:      "frontends.deleted_at",
	FrontendID:     "frontends.frontend_id",
	LoadBalancerID: "frontends.load_balancer_id",
	Port:           "frontends.port",
	AfInet:         "frontends.af_inet",
	DisplayName:    "frontends.display_name",
	Slug:           "frontends.slug",
	StateChangedAt: "frontends.state_changed_at",
	CurrentState:   "frontends.current_state",
	PreviousState:  "frontends.previous_state",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var FrontendWhere = struct {
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
	FrontendID     whereHelperstring
	LoadBalancerID whereHelperstring
	Port           whereHelperint64
	AfInet         whereHelperstring
	DisplayName    whereHelperstring
	Slug           whereHelperstring
	StateChangedAt whereHelpernull_Time
	CurrentState   whereHelperstring
	PreviousState  whereHelperstring
}{
	CreatedAt:      whereHelpertime_Time{field: "\"frontends\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"frontends\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"frontends\".\"deleted_at\""},
	FrontendID:     whereHelperstring{field: "\"frontends\".\"frontend_id\""},
	LoadBalancerID: whereHelperstring{field: "\"frontends\".\"load_balancer_id\""},
	Port:           whereHelperint64{field: "\"frontends\".\"port\""},
	AfInet:         whereHelperstring{field: "\"frontends\".\"af_inet\""},
	DisplayName:    whereHelperstring{field: "\"frontends\".\"display_name\""},
	Slug:           whereHelperstring{field: "\"frontends\".\"slug\""},
	StateChangedAt: whereHelpernull_Time{field: "\"frontends\".\"state_changed_at\""},
	CurrentState:   whereHelperstring{field: "\"frontends\".\"current_state\""},
	PreviousState:  whereHelperstring{field: "\"frontends\".\"previous_state\""},
}

// FrontendRels is where relationship names are stored.
var FrontendRels = struct {
	LoadBalancer string
	Assignments  string
}{
	LoadBalancer: "LoadBalancer",
	Assignments:  "Assignments",
}

// frontendR is where relationships are stored.
type frontendR struct {
	LoadBalancer *LoadBalancer   `query:"LoadBalancer" param:"LoadBalancer" boil:"LoadBalancer" json:"LoadBalancer" toml:"LoadBalancer" yaml:"LoadBalancer"`
	Assignments  AssignmentSlice `query:"Assignments" param:"Assignments" boil:"Assignments" json:"Assignments" toml:"Assignments" yaml:"Assignments"`
}

// NewStruct creates a new relationship struct
func (*frontendR) NewStruct() *frontendR {
	return &frontendR{}
}

func (r *frontendR) GetLoadBalancer() *LoadBalancer {
	if r == nil {
		return nil
	}
	return r.LoadBalancer
}

func (r *frontendR) GetAssignments() AssignmentSlice {
	if r == nil {
		return nil
	}
	return r.Assignments
}

// frontendL is where Load methods for each relationship are stored.
type frontendL struct{}

var (
	frontendAllColumns            = []string{"created_at", "updated_at", "deleted_at", "frontend_id", "load_balancer_id", "port", "af_inet", "display_name", "slug", "state_changed_at", "current_state", "previous_state"}
	frontendColumnsWithoutDefault = []string{"load_balancer_id", "port", "display_name", "slug", "current_state", "previous_state"}
	frontendColumnsWithDefault    = []string{"created_at", "updated_at", "deleted_at", "frontend_id", "af_inet", "state_changed_at"}
	frontendPrimaryKeyColumns     = []string{"frontend_id"}
	frontendGeneratedColumns      = []string{}
)

type (
	// FrontendSlice is an alias for a slice of pointers to Frontend.
	// This should almost always be used instead of []Frontend.
	FrontendSlice []*Frontend
	// FrontendHook is the signature for custom Frontend hook methods
	FrontendHook func(context.Context, boil.ContextExecutor, *Frontend) error

	frontendQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	frontendType                 = reflect.TypeOf(&Frontend{})
	frontendMapping              = queries.MakeStructMapping(frontendType)
	frontendPrimaryKeyMapping, _ = queries.BindMapping(frontendType, frontendMapping, frontendPrimaryKeyColumns)
	frontendInsertCacheMut       sync.RWMutex
	frontendInsertCache          = make(map[string]insertCache)
	frontendUpdateCacheMut       sync.RWMutex
	frontendUpdateCache          = make(map[string]updateCache)
	frontendUpsertCacheMut       sync.RWMutex
	frontendUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var frontendAfterSelectHooks []FrontendHook

var frontendBeforeInsertHooks []FrontendHook
var frontendAfterInsertHooks []FrontendHook

var frontendBeforeUpdateHooks []FrontendHook
var frontendAfterUpdateHooks []FrontendHook

var frontendBeforeDeleteHooks []FrontendHook
var frontendAfterDeleteHooks []FrontendHook

var frontendBeforeUpsertHooks []FrontendHook
var frontendAfterUpsertHooks []FrontendHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Frontend) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range frontendAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Frontend) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range frontendBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Frontend) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range frontendAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Frontend) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range frontendBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Frontend) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range frontendAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Frontend) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range frontendBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Frontend) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range frontendAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Frontend) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range frontendBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Frontend) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range frontendAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFrontendHook registers your hook function for all future operations.
func AddFrontendHook(hookPoint boil.HookPoint, frontendHook FrontendHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		frontendAfterSelectHooks = append(frontendAfterSelectHooks, frontendHook)
	case boil.BeforeInsertHook:
		frontendBeforeInsertHooks = append(frontendBeforeInsertHooks, frontendHook)
	case boil.AfterInsertHook:
		frontendAfterInsertHooks = append(frontendAfterInsertHooks, frontendHook)
	case boil.BeforeUpdateHook:
		frontendBeforeUpdateHooks = append(frontendBeforeUpdateHooks, frontendHook)
	case boil.AfterUpdateHook:
		frontendAfterUpdateHooks = append(frontendAfterUpdateHooks, frontendHook)
	case boil.BeforeDeleteHook:
		frontendBeforeDeleteHooks = append(frontendBeforeDeleteHooks, frontendHook)
	case boil.AfterDeleteHook:
		frontendAfterDeleteHooks = append(frontendAfterDeleteHooks, frontendHook)
	case boil.BeforeUpsertHook:
		frontendBeforeUpsertHooks = append(frontendBeforeUpsertHooks, frontendHook)
	case boil.AfterUpsertHook:
		frontendAfterUpsertHooks = append(frontendAfterUpsertHooks, frontendHook)
	}
}

// One returns a single frontend record from the query.
func (q frontendQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Frontend, error) {
	o := &Frontend{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to execute a one query for frontends")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Frontend records from the query.
func (q frontendQuery) All(ctx context.Context, exec boil.ContextExecutor) (FrontendSlice, error) {
	var o []*Frontend

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Frontend slice")
	}

	if len(frontendAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Frontend records in the query.
func (q frontendQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count frontends rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q frontendQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if frontends exists")
	}

	return count > 0, nil
}

// LoadBalancer pointed to by the foreign key.
func (o *Frontend) LoadBalancer(mods ...qm.QueryMod) loadBalancerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"load_balancer_id\" = ?", o.LoadBalancerID),
	}

	queryMods = append(queryMods, mods...)

	return LoadBalancers(queryMods...)
}

// Assignments retrieves all the assignment's Assignments with an executor.
func (o *Frontend) Assignments(mods ...qm.QueryMod) assignmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assignments\".\"frontend_id\"=?", o.FrontendID),
	)

	return Assignments(queryMods...)
}

// LoadLoadBalancer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (frontendL) LoadLoadBalancer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFrontend interface{}, mods queries.Applicator) error {
	var slice []*Frontend
	var object *Frontend

	if singular {
		var ok bool
		object, ok = maybeFrontend.(*Frontend)
		if !ok {
			object = new(Frontend)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFrontend)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFrontend))
			}
		}
	} else {
		s, ok := maybeFrontend.(*[]*Frontend)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFrontend)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFrontend))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &frontendR{}
		}
		args = append(args, object.LoadBalancerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &frontendR{}
			}

			for _, a := range args {
				if a == obj.LoadBalancerID {
					continue Outer
				}
			}

			args = append(args, obj.LoadBalancerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`load_balancers`),
		qm.WhereIn(`load_balancers.load_balancer_id in ?`, args...),
		qmhelper.WhereIsNull(`load_balancers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load LoadBalancer")
	}

	var resultSlice []*LoadBalancer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice LoadBalancer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for load_balancers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for load_balancers")
	}

	if len(loadBalancerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LoadBalancer = foreign
		if foreign.R == nil {
			foreign.R = &loadBalancerR{}
		}
		foreign.R.Frontends = append(foreign.R.Frontends, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LoadBalancerID == foreign.LoadBalancerID {
				local.R.LoadBalancer = foreign
				if foreign.R == nil {
					foreign.R = &loadBalancerR{}
				}
				foreign.R.Frontends = append(foreign.R.Frontends, local)
				break
			}
		}
	}

	return nil
}

// LoadAssignments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (frontendL) LoadAssignments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFrontend interface{}, mods queries.Applicator) error {
	var slice []*Frontend
	var object *Frontend

	if singular {
		var ok bool
		object, ok = maybeFrontend.(*Frontend)
		if !ok {
			object = new(Frontend)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFrontend)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFrontend))
			}
		}
	} else {
		s, ok := maybeFrontend.(*[]*Frontend)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFrontend)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFrontend))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &frontendR{}
		}
		args = append(args, object.FrontendID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &frontendR{}
			}

			for _, a := range args {
				if a == obj.FrontendID {
					continue Outer
				}
			}

			args = append(args, obj.FrontendID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assignments`),
		qm.WhereIn(`assignments.frontend_id in ?`, args...),
		qmhelper.WhereIsNull(`assignments.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assignments")
	}

	var resultSlice []*Assignment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assignments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assignments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assignments")
	}

	if len(assignmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Assignments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignmentR{}
			}
			foreign.R.Frontend = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.FrontendID == foreign.FrontendID {
				local.R.Assignments = append(local.R.Assignments, foreign)
				if foreign.R == nil {
					foreign.R = &assignmentR{}
				}
				foreign.R.Frontend = local
				break
			}
		}
	}

	return nil
}

// SetLoadBalancer of the frontend to the related item.
// Sets o.R.LoadBalancer to related.
// Adds o to related.R.Frontends.
func (o *Frontend) SetLoadBalancer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *LoadBalancer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"frontends\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"load_balancer_id"}),
		strmangle.WhereClause("\"", "\"", 2, frontendPrimaryKeyColumns),
	)
	values := []interface{}{related.LoadBalancerID, o.FrontendID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LoadBalancerID = related.LoadBalancerID
	if o.R == nil {
		o.R = &frontendR{
			LoadBalancer: related,
		}
	} else {
		o.R.LoadBalancer = related
	}

	if related.R == nil {
		related.R = &loadBalancerR{
			Frontends: FrontendSlice{o},
		}
	} else {
		related.R.Frontends = append(related.R.Frontends, o)
	}

	return nil
}

// AddAssignments adds the given related objects to the existing relationships
// of the frontend, optionally inserting them as new records.
// Appends related to o.R.Assignments.
// Sets related.R.Frontend appropriately.
func (o *Frontend) AddAssignments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assignment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FrontendID = o.FrontendID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assignments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"frontend_id"}),
				strmangle.WhereClause("\"", "\"", 2, assignmentPrimaryKeyColumns),
			)
			values := []interface{}{o.FrontendID, rel.AssignmentID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FrontendID = o.FrontendID
		}
	}

	if o.R == nil {
		o.R = &frontendR{
			Assignments: related,
		}
	} else {
		o.R.Assignments = append(o.R.Assignments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignmentR{
				Frontend: o,
			}
		} else {
			rel.R.Frontend = o
		}
	}
	return nil
}

// Frontends retrieves all the records using an executor.
func Frontends(mods ...qm.QueryMod) frontendQuery {
	mods = append(mods, qm.From("\"frontends\""), qmhelper.WhereIsNull("\"frontends\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"frontends\".*"})
	}

	return frontendQuery{q}
}

// FindFrontend retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFrontend(ctx context.Context, exec boil.ContextExecutor, frontendID string, selectCols ...string) (*Frontend, error) {
	frontendObj := &Frontend{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"frontends\" where \"frontend_id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, frontendID)

	err := q.Bind(ctx, exec, frontendObj)
	if err != nil {
		return nil, errors.Wrap(err, "models: unable to select from frontends")
	}

	if err = frontendObj.doAfterSelectHooks(ctx, exec); err != nil {
		return frontendObj, err
	}

	return frontendObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Frontend) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no frontends provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(frontendColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	frontendInsertCacheMut.RLock()
	cache, cached := frontendInsertCache[key]
	frontendInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			frontendAllColumns,
			frontendColumnsWithDefault,
			frontendColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(frontendType, frontendMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(frontendType, frontendMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"frontends\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"frontends\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into frontends")
	}

	if !cached {
		frontendInsertCacheMut.Lock()
		frontendInsertCache[key] = cache
		frontendInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Frontend.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Frontend) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	frontendUpdateCacheMut.RLock()
	cache, cached := frontendUpdateCache[key]
	frontendUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			frontendAllColumns,
			frontendPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update frontends, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"frontends\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, frontendPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(frontendType, frontendMapping, append(wl, frontendPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update frontends row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for frontends")
	}

	if !cached {
		frontendUpdateCacheMut.Lock()
		frontendUpdateCache[key] = cache
		frontendUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q frontendQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for frontends")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for frontends")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FrontendSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), frontendPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"frontends\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, frontendPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in frontend slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all frontend")
	}
	return rowsAff, nil
}

// Delete deletes a single Frontend record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Frontend) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Frontend provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), frontendPrimaryKeyMapping)
		sql = "DELETE FROM \"frontends\" WHERE \"frontend_id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"frontends\" SET %s WHERE \"frontend_id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(frontendType, frontendMapping, append(wl, frontendPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from frontends")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for frontends")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q frontendQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no frontendQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from frontends")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for frontends")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FrontendSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(frontendBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), frontendPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"frontends\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, frontendPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), frontendPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"frontends\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, frontendPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from frontend slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for frontends")
	}

	if len(frontendAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Frontend) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFrontend(ctx, exec, o.FrontendID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FrontendSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FrontendSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), frontendPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"frontends\".* FROM \"frontends\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, frontendPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FrontendSlice")
	}

	*o = slice

	return nil
}

// FrontendExists checks if the Frontend row exists.
func FrontendExists(ctx context.Context, exec boil.ContextExecutor, frontendID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"frontends\" where \"frontend_id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, frontendID)
	}
	row := exec.QueryRowContext(ctx, sql, frontendID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if frontends exists")
	}

	return exists, nil
}

// Exists checks if the Frontend row exists.
func (o *Frontend) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FrontendExists(ctx, exec, o.FrontendID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Frontend) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no frontends provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(frontendColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	frontendUpsertCacheMut.RLock()
	cache, cached := frontendUpsertCache[key]
	frontendUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			frontendAllColumns,
			frontendColumnsWithDefault,
			frontendColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			frontendAllColumns,
			frontendPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert frontends, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(frontendPrimaryKeyColumns))
			copy(conflict, frontendPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"frontends\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(frontendType, frontendMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(frontendType, frontendMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert frontends")
	}

	if !cached {
		frontendUpsertCacheMut.Lock()
		frontendUpsertCache[key] = cache
		frontendUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
