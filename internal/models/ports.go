// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Port is an object representing the database table.
type Port struct {
	CreatedAt      time.Time `query:"created_at" param:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `query:"updated_at" param:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      null.Time `query:"deleted_at" param:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	PortID         string    `query:"port_id" param:"port_id" boil:"port_id" json:"port_id" toml:"port_id" yaml:"port_id"`
	LoadBalancerID string    `query:"load_balancer_id" param:"load_balancer_id" boil:"load_balancer_id" json:"load_balancer_id" toml:"load_balancer_id" yaml:"load_balancer_id"`
	Port           int64     `query:"port" param:"port" boil:"port" json:"port" toml:"port" yaml:"port"`
	AfInet         string    `query:"af_inet" param:"af_inet" boil:"af_inet" json:"af_inet" toml:"af_inet" yaml:"af_inet"`
	Name           string    `query:"name" param:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	Slug           string    `query:"slug" param:"slug" boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	StateChangedAt null.Time `query:"state_changed_at" param:"state_changed_at" boil:"state_changed_at" json:"state_changed_at,omitempty" toml:"state_changed_at" yaml:"state_changed_at,omitempty"`
	CurrentState   string    `query:"current_state" param:"current_state" boil:"current_state" json:"current_state" toml:"current_state" yaml:"current_state"`
	PreviousState  string    `query:"previous_state" param:"previous_state" boil:"previous_state" json:"previous_state" toml:"previous_state" yaml:"previous_state"`

	R *portR `query:"-" param:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L portL  `query:"-" param:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PortColumns = struct {
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
	PortID         string
	LoadBalancerID string
	Port           string
	AfInet         string
	Name           string
	Slug           string
	StateChangedAt string
	CurrentState   string
	PreviousState  string
}{
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
	PortID:         "port_id",
	LoadBalancerID: "load_balancer_id",
	Port:           "port",
	AfInet:         "af_inet",
	Name:           "name",
	Slug:           "slug",
	StateChangedAt: "state_changed_at",
	CurrentState:   "current_state",
	PreviousState:  "previous_state",
}

var PortTableColumns = struct {
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
	PortID         string
	LoadBalancerID string
	Port           string
	AfInet         string
	Name           string
	Slug           string
	StateChangedAt string
	CurrentState   string
	PreviousState  string
}{
	CreatedAt:      "ports.created_at",
	UpdatedAt:      "ports.updated_at",
	DeletedAt:      "ports.deleted_at",
	PortID:         "ports.port_id",
	LoadBalancerID: "ports.load_balancer_id",
	Port:           "ports.port",
	AfInet:         "ports.af_inet",
	Name:           "ports.name",
	Slug:           "ports.slug",
	StateChangedAt: "ports.state_changed_at",
	CurrentState:   "ports.current_state",
	PreviousState:  "ports.previous_state",
}

// Generated where

var PortWhere = struct {
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
	PortID         whereHelperstring
	LoadBalancerID whereHelperstring
	Port           whereHelperint64
	AfInet         whereHelperstring
	Name           whereHelperstring
	Slug           whereHelperstring
	StateChangedAt whereHelpernull_Time
	CurrentState   whereHelperstring
	PreviousState  whereHelperstring
}{
	CreatedAt:      whereHelpertime_Time{field: "\"ports\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"ports\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"ports\".\"deleted_at\""},
	PortID:         whereHelperstring{field: "\"ports\".\"port_id\""},
	LoadBalancerID: whereHelperstring{field: "\"ports\".\"load_balancer_id\""},
	Port:           whereHelperint64{field: "\"ports\".\"port\""},
	AfInet:         whereHelperstring{field: "\"ports\".\"af_inet\""},
	Name:           whereHelperstring{field: "\"ports\".\"name\""},
	Slug:           whereHelperstring{field: "\"ports\".\"slug\""},
	StateChangedAt: whereHelpernull_Time{field: "\"ports\".\"state_changed_at\""},
	CurrentState:   whereHelperstring{field: "\"ports\".\"current_state\""},
	PreviousState:  whereHelperstring{field: "\"ports\".\"previous_state\""},
}

// PortRels is where relationship names are stored.
var PortRels = struct {
	LoadBalancer string
	Assignments  string
}{
	LoadBalancer: "LoadBalancer",
	Assignments:  "Assignments",
}

// portR is where relationships are stored.
type portR struct {
	LoadBalancer *LoadBalancer   `query:"LoadBalancer" param:"LoadBalancer" boil:"LoadBalancer" json:"LoadBalancer" toml:"LoadBalancer" yaml:"LoadBalancer"`
	Assignments  AssignmentSlice `query:"Assignments" param:"Assignments" boil:"Assignments" json:"Assignments" toml:"Assignments" yaml:"Assignments"`
}

// NewStruct creates a new relationship struct
func (*portR) NewStruct() *portR {
	return &portR{}
}

func (r *portR) GetLoadBalancer() *LoadBalancer {
	if r == nil {
		return nil
	}
	return r.LoadBalancer
}

func (r *portR) GetAssignments() AssignmentSlice {
	if r == nil {
		return nil
	}
	return r.Assignments
}

// portL is where Load methods for each relationship are stored.
type portL struct{}

var (
	portAllColumns            = []string{"created_at", "updated_at", "deleted_at", "port_id", "load_balancer_id", "port", "af_inet", "name", "slug", "state_changed_at", "current_state", "previous_state"}
	portColumnsWithoutDefault = []string{"load_balancer_id", "port", "name", "slug", "current_state", "previous_state"}
	portColumnsWithDefault    = []string{"created_at", "updated_at", "deleted_at", "port_id", "af_inet", "state_changed_at"}
	portPrimaryKeyColumns     = []string{"port_id"}
	portGeneratedColumns      = []string{}
)

type (
	// PortSlice is an alias for a slice of pointers to Port.
	// This should almost always be used instead of []Port.
	PortSlice []*Port
	// PortHook is the signature for custom Port hook methods
	PortHook func(context.Context, boil.ContextExecutor, *Port) error

	portQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	portType                 = reflect.TypeOf(&Port{})
	portMapping              = queries.MakeStructMapping(portType)
	portPrimaryKeyMapping, _ = queries.BindMapping(portType, portMapping, portPrimaryKeyColumns)
	portInsertCacheMut       sync.RWMutex
	portInsertCache          = make(map[string]insertCache)
	portUpdateCacheMut       sync.RWMutex
	portUpdateCache          = make(map[string]updateCache)
	portUpsertCacheMut       sync.RWMutex
	portUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var portAfterSelectHooks []PortHook

var portBeforeInsertHooks []PortHook
var portAfterInsertHooks []PortHook

var portBeforeUpdateHooks []PortHook
var portAfterUpdateHooks []PortHook

var portBeforeDeleteHooks []PortHook
var portAfterDeleteHooks []PortHook

var portBeforeUpsertHooks []PortHook
var portAfterUpsertHooks []PortHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Port) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Port) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Port) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Port) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Port) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Port) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Port) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Port) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Port) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPortHook registers your hook function for all future operations.
func AddPortHook(hookPoint boil.HookPoint, portHook PortHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		portAfterSelectHooks = append(portAfterSelectHooks, portHook)
	case boil.BeforeInsertHook:
		portBeforeInsertHooks = append(portBeforeInsertHooks, portHook)
	case boil.AfterInsertHook:
		portAfterInsertHooks = append(portAfterInsertHooks, portHook)
	case boil.BeforeUpdateHook:
		portBeforeUpdateHooks = append(portBeforeUpdateHooks, portHook)
	case boil.AfterUpdateHook:
		portAfterUpdateHooks = append(portAfterUpdateHooks, portHook)
	case boil.BeforeDeleteHook:
		portBeforeDeleteHooks = append(portBeforeDeleteHooks, portHook)
	case boil.AfterDeleteHook:
		portAfterDeleteHooks = append(portAfterDeleteHooks, portHook)
	case boil.BeforeUpsertHook:
		portBeforeUpsertHooks = append(portBeforeUpsertHooks, portHook)
	case boil.AfterUpsertHook:
		portAfterUpsertHooks = append(portAfterUpsertHooks, portHook)
	}
}

// One returns a single port record from the query.
func (q portQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Port, error) {
	o := &Port{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to execute a one query for ports")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Port records from the query.
func (q portQuery) All(ctx context.Context, exec boil.ContextExecutor) (PortSlice, error) {
	var o []*Port

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Port slice")
	}

	if len(portAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Port records in the query.
func (q portQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ports rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q portQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ports exists")
	}

	return count > 0, nil
}

// LoadBalancer pointed to by the foreign key.
func (o *Port) LoadBalancer(mods ...qm.QueryMod) loadBalancerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"load_balancer_id\" = ?", o.LoadBalancerID),
	}

	queryMods = append(queryMods, mods...)

	return LoadBalancers(queryMods...)
}

// Assignments retrieves all the assignment's Assignments with an executor.
func (o *Port) Assignments(mods ...qm.QueryMod) assignmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assignments\".\"port_id\"=?", o.PortID),
	)

	return Assignments(queryMods...)
}

// LoadLoadBalancer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (portL) LoadLoadBalancer(ctx context.Context, e boil.ContextExecutor, singular bool, maybePort interface{}, mods queries.Applicator) error {
	var slice []*Port
	var object *Port

	if singular {
		var ok bool
		object, ok = maybePort.(*Port)
		if !ok {
			object = new(Port)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePort)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePort))
			}
		}
	} else {
		s, ok := maybePort.(*[]*Port)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePort)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePort))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portR{}
		}
		args = append(args, object.LoadBalancerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portR{}
			}

			for _, a := range args {
				if a == obj.LoadBalancerID {
					continue Outer
				}
			}

			args = append(args, obj.LoadBalancerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`load_balancers`),
		qm.WhereIn(`load_balancers.load_balancer_id in ?`, args...),
		qmhelper.WhereIsNull(`load_balancers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load LoadBalancer")
	}

	var resultSlice []*LoadBalancer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice LoadBalancer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for load_balancers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for load_balancers")
	}

	if len(loadBalancerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LoadBalancer = foreign
		if foreign.R == nil {
			foreign.R = &loadBalancerR{}
		}
		foreign.R.Ports = append(foreign.R.Ports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LoadBalancerID == foreign.LoadBalancerID {
				local.R.LoadBalancer = foreign
				if foreign.R == nil {
					foreign.R = &loadBalancerR{}
				}
				foreign.R.Ports = append(foreign.R.Ports, local)
				break
			}
		}
	}

	return nil
}

// LoadAssignments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (portL) LoadAssignments(ctx context.Context, e boil.ContextExecutor, singular bool, maybePort interface{}, mods queries.Applicator) error {
	var slice []*Port
	var object *Port

	if singular {
		var ok bool
		object, ok = maybePort.(*Port)
		if !ok {
			object = new(Port)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePort)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePort))
			}
		}
	} else {
		s, ok := maybePort.(*[]*Port)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePort)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePort))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portR{}
		}
		args = append(args, object.PortID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portR{}
			}

			for _, a := range args {
				if a == obj.PortID {
					continue Outer
				}
			}

			args = append(args, obj.PortID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assignments`),
		qm.WhereIn(`assignments.port_id in ?`, args...),
		qmhelper.WhereIsNull(`assignments.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assignments")
	}

	var resultSlice []*Assignment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assignments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assignments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assignments")
	}

	if len(assignmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Assignments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignmentR{}
			}
			foreign.R.Port = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PortID == foreign.PortID {
				local.R.Assignments = append(local.R.Assignments, foreign)
				if foreign.R == nil {
					foreign.R = &assignmentR{}
				}
				foreign.R.Port = local
				break
			}
		}
	}

	return nil
}

// SetLoadBalancer of the port to the related item.
// Sets o.R.LoadBalancer to related.
// Adds o to related.R.Ports.
func (o *Port) SetLoadBalancer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *LoadBalancer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"load_balancer_id"}),
		strmangle.WhereClause("\"", "\"", 2, portPrimaryKeyColumns),
	)
	values := []interface{}{related.LoadBalancerID, o.PortID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LoadBalancerID = related.LoadBalancerID
	if o.R == nil {
		o.R = &portR{
			LoadBalancer: related,
		}
	} else {
		o.R.LoadBalancer = related
	}

	if related.R == nil {
		related.R = &loadBalancerR{
			Ports: PortSlice{o},
		}
	} else {
		related.R.Ports = append(related.R.Ports, o)
	}

	return nil
}

// AddAssignments adds the given related objects to the existing relationships
// of the port, optionally inserting them as new records.
// Appends related to o.R.Assignments.
// Sets related.R.Port appropriately.
func (o *Port) AddAssignments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assignment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PortID = o.PortID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assignments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"port_id"}),
				strmangle.WhereClause("\"", "\"", 2, assignmentPrimaryKeyColumns),
			)
			values := []interface{}{o.PortID, rel.AssignmentID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PortID = o.PortID
		}
	}

	if o.R == nil {
		o.R = &portR{
			Assignments: related,
		}
	} else {
		o.R.Assignments = append(o.R.Assignments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignmentR{
				Port: o,
			}
		} else {
			rel.R.Port = o
		}
	}
	return nil
}

// Ports retrieves all the records using an executor.
func Ports(mods ...qm.QueryMod) portQuery {
	mods = append(mods, qm.From("\"ports\""), qmhelper.WhereIsNull("\"ports\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ports\".*"})
	}

	return portQuery{q}
}

// FindPort retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPort(ctx context.Context, exec boil.ContextExecutor, portID string, selectCols ...string) (*Port, error) {
	portObj := &Port{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ports\" where \"port_id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, portID)

	err := q.Bind(ctx, exec, portObj)
	if err != nil {
		return nil, errors.Wrap(err, "models: unable to select from ports")
	}

	if err = portObj.doAfterSelectHooks(ctx, exec); err != nil {
		return portObj, err
	}

	return portObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Port) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ports provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	portInsertCacheMut.RLock()
	cache, cached := portInsertCache[key]
	portInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			portAllColumns,
			portColumnsWithDefault,
			portColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(portType, portMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(portType, portMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ports\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ports\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ports")
	}

	if !cached {
		portInsertCacheMut.Lock()
		portInsertCache[key] = cache
		portInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Port.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Port) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	portUpdateCacheMut.RLock()
	cache, cached := portUpdateCache[key]
	portUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			portAllColumns,
			portPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ports\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, portPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(portType, portMapping, append(wl, portPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ports row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ports")
	}

	if !cached {
		portUpdateCacheMut.Lock()
		portUpdateCache[key] = cache
		portUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q portQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ports")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PortSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, portPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in port slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all port")
	}
	return rowsAff, nil
}

// Delete deletes a single Port record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Port) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Port provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), portPrimaryKeyMapping)
		sql = "DELETE FROM \"ports\" WHERE \"port_id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"ports\" SET %s WHERE \"port_id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(portType, portMapping, append(wl, portPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ports")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q portQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no portQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PortSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(portBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"ports\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, portPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"ports\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, portPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from port slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ports")
	}

	if len(portAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Port) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPort(ctx, exec, o.PortID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PortSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PortSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ports\".* FROM \"ports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, portPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PortSlice")
	}

	*o = slice

	return nil
}

// PortExists checks if the Port row exists.
func PortExists(ctx context.Context, exec boil.ContextExecutor, portID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ports\" where \"port_id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, portID)
	}
	row := exec.QueryRowContext(ctx, sql, portID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ports exists")
	}

	return exists, nil
}

// Exists checks if the Port row exists.
func (o *Port) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PortExists(ctx, exec, o.PortID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Port) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ports provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	portUpsertCacheMut.RLock()
	cache, cached := portUpsertCache[key]
	portUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			portAllColumns,
			portColumnsWithDefault,
			portColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			portAllColumns,
			portPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert ports, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(portPrimaryKeyColumns))
			copy(conflict, portPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"ports\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(portType, portMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(portType, portMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ports")
	}

	if !cached {
		portUpsertCacheMut.Lock()
		portUpsertCache[key] = cache
		portUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
