// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphclient

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"go.infratographer.com/x/gidx"
)

type IPAddressable interface {
	IsIPAddressable()
	GetID() gidx.PrefixedID
}

type MetadataNode interface {
	IsMetadataNode()
	GetID() gidx.PrefixedID
}

// An object with an ID.
// Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
type Node interface {
	IsNode()
	// The id of the object.
	GetID() gidx.PrefixedID
}

type Entity interface {
	IsEntity()
}

// Input information to create a load balancer.
type CreateLoadBalancerInput struct {
	// The name of the load balancer.
	Name string `json:"name"`
	// The ID for the owner for this load balancer.
	OwnerID gidx.PrefixedID `json:"ownerID"`
	// The ID for the location of this load balancer.
	LocationID gidx.PrefixedID   `json:"locationID"`
	PortIDs    []gidx.PrefixedID `json:"portIDs,omitempty"`
	ProviderID gidx.PrefixedID   `json:"providerID"`
}

// CreateLoadBalancerOriginInput is used for create LoadBalancerOrigin object.
// Input was generated by ent.
type CreateLoadBalancerOriginInput struct {
	Name       string          `json:"name"`
	Weight     *int64          `json:"weight,omitempty"`
	Target     string          `json:"target"`
	PortNumber int64           `json:"portNumber"`
	Active     *bool           `json:"active,omitempty"`
	PoolID     gidx.PrefixedID `json:"poolID"`
}

// CreateLoadBalancerPoolInput is used for create LoadBalancerPool object.
// Input was generated by ent.
type CreateLoadBalancerPoolInput struct {
	Name      string                   `json:"name"`
	Protocol  LoadBalancerPoolProtocol `json:"protocol"`
	OwnerID   gidx.PrefixedID          `json:"ownerID"`
	PortIDs   []gidx.PrefixedID        `json:"portIDs,omitempty"`
	OriginIDs []gidx.PrefixedID        `json:"originIDs,omitempty"`
}

// CreateLoadBalancerPortInput is used for create LoadBalancerPort object.
// Input was generated by ent.
type CreateLoadBalancerPortInput struct {
	Number         int64             `json:"number"`
	Name           string            `json:"name"`
	PoolIDs        []gidx.PrefixedID `json:"poolIDs,omitempty"`
	LoadBalancerID gidx.PrefixedID   `json:"loadBalancerID"`
}

// Input information to create a load balancer provider.
type CreateLoadBalancerProviderInput struct {
	// The name of the load balancer provider.
	Name string `json:"name"`
	// The ID for the owner for this load balancer.
	OwnerID gidx.PrefixedID `json:"ownerID"`
}

type LoadBalancer struct {
	// The ID for the load balancer.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	CreatedBy *string         `json:"createdBy,omitempty"`
	UpdatedBy *string         `json:"updatedBy,omitempty"`
	DeletedAt *time.Time      `json:"deletedAt,omitempty"`
	DeletedBy *string         `json:"deletedBy,omitempty"`
	// The name of the load balancer.
	Name  string                     `json:"name"`
	Ports LoadBalancerPortConnection `json:"ports"`
	// The load balancer provider for the load balancer.
	LoadBalancerProvider LoadBalancerProvider `json:"loadBalancerProvider"`
	// The location of the load balancer.
	Location Location `json:"location"`
	// The owner of the load balancer.
	Owner ResourceOwner `json:"owner"`
}

func (LoadBalancer) IsIPAddressable()            {}
func (this LoadBalancer) GetID() gidx.PrefixedID { return this.ID }

func (LoadBalancer) IsMetadataNode() {}

func (LoadBalancer) IsNode() {}

// The id of the object.

func (LoadBalancer) IsEntity() {}

// A connection to a list of items.
type LoadBalancerConnection struct {
	// A list of edges.
	Edges []*LoadBalancerEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from loadBalancerCreate
type LoadBalancerCreatePayload struct {
	// The created load balancer.
	LoadBalancer LoadBalancer `json:"loadBalancer"`
}

// Return response from loadBalancerDelete
type LoadBalancerDeletePayload struct {
	// The ID of the deleted load balancer.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type LoadBalancerEdge struct {
	// The item at the end of the edge.
	Node *LoadBalancer `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for LoadBalancer connections
type LoadBalancerOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order LoadBalancers.
	Field LoadBalancerOrderField `json:"field"`
}

type LoadBalancerOrigin struct {
	ID         gidx.PrefixedID  `json:"id"`
	CreatedAt  time.Time        `json:"createdAt"`
	UpdatedAt  time.Time        `json:"updatedAt"`
	CreatedBy  *string          `json:"createdBy,omitempty"`
	UpdatedBy  *string          `json:"updatedBy,omitempty"`
	Name       string           `json:"name"`
	Weight     int64            `json:"weight"`
	Target     string           `json:"target"`
	PortNumber int64            `json:"portNumber"`
	Active     bool             `json:"active"`
	PoolID     gidx.PrefixedID  `json:"poolID"`
	Pool       LoadBalancerPool `json:"pool"`
}

func (LoadBalancerOrigin) IsNode() {}

// The id of the object.
func (this LoadBalancerOrigin) GetID() gidx.PrefixedID { return this.ID }

func (LoadBalancerOrigin) IsEntity() {}

// A connection to a list of items.
type LoadBalancerOriginConnection struct {
	// A list of edges.
	Edges []*LoadBalancerOriginEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from loadBalancerOriginCreate
type LoadBalancerOriginCreatePayload struct {
	// The created pool origin.
	LoadBalancerOrigin LoadBalancerOrigin `json:"loadBalancerOrigin"`
}

// Return response from loadBalancerOriginDelete
type LoadBalancerOriginDeletePayload struct {
	// The deleted pool origin.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type LoadBalancerOriginEdge struct {
	// The item at the end of the edge.
	Node *LoadBalancerOrigin `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for LoadBalancerOrigin connections
type LoadBalancerOriginOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order LoadBalancerOrigins.
	Field LoadBalancerOriginOrderField `json:"field"`
}

// Return response from loadBalancerOriginUpdate
type LoadBalancerOriginUpdatePayload struct {
	// The updated pool origin.
	LoadBalancerOrigin LoadBalancerOrigin `json:"loadBalancerOrigin"`
}

// LoadBalancerOriginWhereInput is used for filtering Origin objects.
// Input was generated by ent.
type LoadBalancerOriginWhereInput struct {
	Not *LoadBalancerOriginWhereInput   `json:"not,omitempty"`
	And []*LoadBalancerOriginWhereInput `json:"and,omitempty"`
	Or  []*LoadBalancerOriginWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// created_by field predicates
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNeq          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGt           *string  `json:"createdByGT,omitempty"`
	CreatedByGte          *string  `json:"createdByGTE,omitempty"`
	CreatedByLt           *string  `json:"createdByLT,omitempty"`
	CreatedByLte          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        *bool    `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       *bool    `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`
	// updated_by field predicates
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNeq          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGt           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGte          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLt           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLte          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        *bool    `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       *bool    `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`
	// name field predicates
	Name             *string  `json:"name,omitempty"`
	NameNeq          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGt           *string  `json:"nameGT,omitempty"`
	NameGte          *string  `json:"nameGTE,omitempty"`
	NameLt           *string  `json:"nameLT,omitempty"`
	NameLte          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
	// weight field predicates
	Weight      *int64  `json:"weight,omitempty"`
	WeightNeq   *int64  `json:"weightNEQ,omitempty"`
	WeightIn    []int64 `json:"weightIn,omitempty"`
	WeightNotIn []int64 `json:"weightNotIn,omitempty"`
	WeightGt    *int64  `json:"weightGT,omitempty"`
	WeightGte   *int64  `json:"weightGTE,omitempty"`
	WeightLt    *int64  `json:"weightLT,omitempty"`
	WeightLte   *int64  `json:"weightLTE,omitempty"`
	// target field predicates
	Target             *string  `json:"target,omitempty"`
	TargetNeq          *string  `json:"targetNEQ,omitempty"`
	TargetIn           []string `json:"targetIn,omitempty"`
	TargetNotIn        []string `json:"targetNotIn,omitempty"`
	TargetGt           *string  `json:"targetGT,omitempty"`
	TargetGte          *string  `json:"targetGTE,omitempty"`
	TargetLt           *string  `json:"targetLT,omitempty"`
	TargetLte          *string  `json:"targetLTE,omitempty"`
	TargetContains     *string  `json:"targetContains,omitempty"`
	TargetHasPrefix    *string  `json:"targetHasPrefix,omitempty"`
	TargetHasSuffix    *string  `json:"targetHasSuffix,omitempty"`
	TargetEqualFold    *string  `json:"targetEqualFold,omitempty"`
	TargetContainsFold *string  `json:"targetContainsFold,omitempty"`
	// port_number field predicates
	PortNumber      *int64  `json:"portNumber,omitempty"`
	PortNumberNeq   *int64  `json:"portNumberNEQ,omitempty"`
	PortNumberIn    []int64 `json:"portNumberIn,omitempty"`
	PortNumberNotIn []int64 `json:"portNumberNotIn,omitempty"`
	PortNumberGt    *int64  `json:"portNumberGT,omitempty"`
	PortNumberGte   *int64  `json:"portNumberGTE,omitempty"`
	PortNumberLt    *int64  `json:"portNumberLT,omitempty"`
	PortNumberLte   *int64  `json:"portNumberLTE,omitempty"`
	// active field predicates
	Active    *bool `json:"active,omitempty"`
	ActiveNeq *bool `json:"activeNEQ,omitempty"`
	// pool edge predicates
	HasPool     *bool                         `json:"hasPool,omitempty"`
	HasPoolWith []*LoadBalancerPoolWhereInput `json:"hasPoolWith,omitempty"`
}

type LoadBalancerPool struct {
	ID        gidx.PrefixedID              `json:"id"`
	CreatedAt time.Time                    `json:"createdAt"`
	UpdatedAt time.Time                    `json:"updatedAt"`
	CreatedBy *string                      `json:"createdBy,omitempty"`
	UpdatedBy *string                      `json:"updatedBy,omitempty"`
	Name      string                       `json:"name"`
	Protocol  LoadBalancerPoolProtocol     `json:"protocol"`
	OwnerID   gidx.PrefixedID              `json:"ownerID"`
	Ports     []*LoadBalancerPort          `json:"ports,omitempty"`
	Origins   LoadBalancerOriginConnection `json:"origins"`
	// The owner of the load balancer pool.
	Owner ResourceOwner `json:"owner"`
}

func (LoadBalancerPool) IsNode() {}

// The id of the object.
func (this LoadBalancerPool) GetID() gidx.PrefixedID { return this.ID }

func (LoadBalancerPool) IsEntity() {}

// A connection to a list of items.
type LoadBalancerPoolConnection struct {
	// A list of edges.
	Edges []*LoadBalancerPoolEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from LoadBalancerPoolCreate
type LoadBalancerPoolCreatePayload struct {
	// The created pool.
	LoadBalancerPool LoadBalancerPool `json:"loadBalancerPool"`
}

// Return response from LoadBalancerPoolDelete
type LoadBalancerPoolDeletePayload struct {
	// The ID of the deleted pool.
	DeletedID *gidx.PrefixedID `json:"deletedID,omitempty"`
}

// An edge in a connection.
type LoadBalancerPoolEdge struct {
	// The item at the end of the edge.
	Node *LoadBalancerPool `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for LoadBalancerPool connections
type LoadBalancerPoolOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order LoadBalancerPools.
	Field LoadBalancerPoolOrderField `json:"field"`
}

// Return response from LoadBalancerPoolUpdate
type LoadBalancerPoolUpdatePayload struct {
	// The updated pool.
	LoadBalancerPool LoadBalancerPool `json:"loadBalancerPool"`
}

// LoadBalancerPoolWhereInput is used for filtering Pool objects.
// Input was generated by ent.
type LoadBalancerPoolWhereInput struct {
	Not *LoadBalancerPoolWhereInput   `json:"not,omitempty"`
	And []*LoadBalancerPoolWhereInput `json:"and,omitempty"`
	Or  []*LoadBalancerPoolWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// created_by field predicates
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNeq          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGt           *string  `json:"createdByGT,omitempty"`
	CreatedByGte          *string  `json:"createdByGTE,omitempty"`
	CreatedByLt           *string  `json:"createdByLT,omitempty"`
	CreatedByLte          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        *bool    `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       *bool    `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`
	// updated_by field predicates
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNeq          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGt           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGte          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLt           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLte          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        *bool    `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       *bool    `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`
	// name field predicates
	Name             *string  `json:"name,omitempty"`
	NameNeq          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGt           *string  `json:"nameGT,omitempty"`
	NameGte          *string  `json:"nameGTE,omitempty"`
	NameLt           *string  `json:"nameLT,omitempty"`
	NameLte          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
	// protocol field predicates
	Protocol      *LoadBalancerPoolProtocol  `json:"protocol,omitempty"`
	ProtocolNeq   *LoadBalancerPoolProtocol  `json:"protocolNEQ,omitempty"`
	ProtocolIn    []LoadBalancerPoolProtocol `json:"protocolIn,omitempty"`
	ProtocolNotIn []LoadBalancerPoolProtocol `json:"protocolNotIn,omitempty"`
	// ports edge predicates
	HasPorts     *bool                         `json:"hasPorts,omitempty"`
	HasPortsWith []*LoadBalancerPortWhereInput `json:"hasPortsWith,omitempty"`
	// origins edge predicates
	HasOrigins     *bool                           `json:"hasOrigins,omitempty"`
	HasOriginsWith []*LoadBalancerOriginWhereInput `json:"hasOriginsWith,omitempty"`
}

type LoadBalancerPort struct {
	ID             gidx.PrefixedID     `json:"id"`
	CreatedAt      time.Time           `json:"createdAt"`
	UpdatedAt      time.Time           `json:"updatedAt"`
	CreatedBy      *string             `json:"createdBy,omitempty"`
	UpdatedBy      *string             `json:"updatedBy,omitempty"`
	Number         int64               `json:"number"`
	Name           string              `json:"name"`
	LoadBalancerID gidx.PrefixedID     `json:"loadBalancerID"`
	Pools          []*LoadBalancerPool `json:"pools,omitempty"`
	LoadBalancer   LoadBalancer        `json:"loadBalancer"`
}

func (LoadBalancerPort) IsNode() {}

// The id of the object.
func (this LoadBalancerPort) GetID() gidx.PrefixedID { return this.ID }

func (LoadBalancerPort) IsEntity() {}

// A connection to a list of items.
type LoadBalancerPortConnection struct {
	// A list of edges.
	Edges []*LoadBalancerPortEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from loadBalancerPortCreate
type LoadBalancerPortCreatePayload struct {
	// The created load balancer port.
	LoadBalancerPort LoadBalancerPort `json:"loadBalancerPort"`
}

// Return response from loadBalancerPortDelete
type LoadBalancerPortDeletePayload struct {
	// The ID of the deleted load balancer port.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type LoadBalancerPortEdge struct {
	// The item at the end of the edge.
	Node *LoadBalancerPort `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for LoadBalancerPort connections
type LoadBalancerPortOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order LoadBalancerPorts.
	Field LoadBalancerPortOrderField `json:"field"`
}

// Return response from loadBalancerPortUpdate
type LoadBalancerPortUpdatePayload struct {
	// The updated load balancer port.
	LoadBalancerPort LoadBalancerPort `json:"loadBalancerPort"`
}

// LoadBalancerPortWhereInput is used for filtering Port objects.
// Input was generated by ent.
type LoadBalancerPortWhereInput struct {
	Not *LoadBalancerPortWhereInput   `json:"not,omitempty"`
	And []*LoadBalancerPortWhereInput `json:"and,omitempty"`
	Or  []*LoadBalancerPortWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// created_by field predicates
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNeq          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGt           *string  `json:"createdByGT,omitempty"`
	CreatedByGte          *string  `json:"createdByGTE,omitempty"`
	CreatedByLt           *string  `json:"createdByLT,omitempty"`
	CreatedByLte          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        *bool    `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       *bool    `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`
	// updated_by field predicates
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNeq          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGt           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGte          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLt           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLte          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        *bool    `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       *bool    `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`
	// number field predicates
	Number      *int64  `json:"number,omitempty"`
	NumberNeq   *int64  `json:"numberNEQ,omitempty"`
	NumberIn    []int64 `json:"numberIn,omitempty"`
	NumberNotIn []int64 `json:"numberNotIn,omitempty"`
	NumberGt    *int64  `json:"numberGT,omitempty"`
	NumberGte   *int64  `json:"numberGTE,omitempty"`
	NumberLt    *int64  `json:"numberLT,omitempty"`
	NumberLte   *int64  `json:"numberLTE,omitempty"`
	// name field predicates
	Name             *string  `json:"name,omitempty"`
	NameNeq          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGt           *string  `json:"nameGT,omitempty"`
	NameGte          *string  `json:"nameGTE,omitempty"`
	NameLt           *string  `json:"nameLT,omitempty"`
	NameLte          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
	// pools edge predicates
	HasPools     *bool                         `json:"hasPools,omitempty"`
	HasPoolsWith []*LoadBalancerPoolWhereInput `json:"hasPoolsWith,omitempty"`
	// load_balancer edge predicates
	HasLoadBalancer     *bool                     `json:"hasLoadBalancer,omitempty"`
	HasLoadBalancerWith []*LoadBalancerWhereInput `json:"hasLoadBalancerWith,omitempty"`
}

type LoadBalancerProvider struct {
	// The ID for the load balancer provider.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	CreatedBy *string         `json:"createdBy,omitempty"`
	UpdatedBy *string         `json:"updatedBy,omitempty"`
	// The name of the load balancer provider.
	Name          string                 `json:"name"`
	LoadBalancers LoadBalancerConnection `json:"loadBalancers"`
	// The owner of the load balancer provider.
	Owner ResourceOwner `json:"owner"`
}

func (LoadBalancerProvider) IsNode() {}

// The id of the object.
func (this LoadBalancerProvider) GetID() gidx.PrefixedID { return this.ID }

func (LoadBalancerProvider) IsEntity() {}

// A connection to a list of items.
type LoadBalancerProviderConnection struct {
	// A list of edges.
	Edges []*LoadBalancerProviderEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from loadBalancerProviderCreate
type LoadBalancerProviderCreatePayload struct {
	// The created load balancer provider.
	LoadBalancerProvider LoadBalancerProvider `json:"loadBalancerProvider"`
}

// Return response from loadBalancerProviderDelete
type LoadBalancerProviderDeletePayload struct {
	// The ID of the deleted load balancer provider.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type LoadBalancerProviderEdge struct {
	// The item at the end of the edge.
	Node *LoadBalancerProvider `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for LoadBalancerProvider connections
type LoadBalancerProviderOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order LoadBalancerProviders.
	Field LoadBalancerProviderOrderField `json:"field"`
}

// Return response from loadBalancerProviderUpdate
type LoadBalancerProviderUpdatePayload struct {
	// The updated load balancer provider.
	LoadBalancerProvider LoadBalancerProvider `json:"loadBalancerProvider"`
}

// LoadBalancerProviderWhereInput is used for filtering Provider objects.
// Input was generated by ent.
type LoadBalancerProviderWhereInput struct {
	Not *LoadBalancerProviderWhereInput   `json:"not,omitempty"`
	And []*LoadBalancerProviderWhereInput `json:"and,omitempty"`
	Or  []*LoadBalancerProviderWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// created_by field predicates
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNeq          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGt           *string  `json:"createdByGT,omitempty"`
	CreatedByGte          *string  `json:"createdByGTE,omitempty"`
	CreatedByLt           *string  `json:"createdByLT,omitempty"`
	CreatedByLte          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        *bool    `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       *bool    `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`
	// updated_by field predicates
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNeq          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGt           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGte          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLt           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLte          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        *bool    `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       *bool    `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`
	// name field predicates
	Name             *string  `json:"name,omitempty"`
	NameNeq          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGt           *string  `json:"nameGT,omitempty"`
	NameGte          *string  `json:"nameGTE,omitempty"`
	NameLt           *string  `json:"nameLT,omitempty"`
	NameLte          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
	// load_balancers edge predicates
	HasLoadBalancers     *bool                     `json:"hasLoadBalancers,omitempty"`
	HasLoadBalancersWith []*LoadBalancerWhereInput `json:"hasLoadBalancersWith,omitempty"`
}

// Return response from loadBalancerUpdate
type LoadBalancerUpdatePayload struct {
	// The updated load balancer.
	LoadBalancer LoadBalancer `json:"loadBalancer"`
}

// LoadBalancerWhereInput is used for filtering LoadBalancer objects.
// Input was generated by ent.
type LoadBalancerWhereInput struct {
	Not *LoadBalancerWhereInput   `json:"not,omitempty"`
	And []*LoadBalancerWhereInput `json:"and,omitempty"`
	Or  []*LoadBalancerWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// created_by field predicates
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNeq          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGt           *string  `json:"createdByGT,omitempty"`
	CreatedByGte          *string  `json:"createdByGTE,omitempty"`
	CreatedByLt           *string  `json:"createdByLT,omitempty"`
	CreatedByLte          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        *bool    `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       *bool    `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`
	// updated_by field predicates
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNeq          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGt           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGte          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLt           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLte          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        *bool    `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       *bool    `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`
	// deleted_at field predicates
	DeletedAt       *time.Time   `json:"deletedAt,omitempty"`
	DeletedAtNeq    *time.Time   `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []*time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []*time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGt     *time.Time   `json:"deletedAtGT,omitempty"`
	DeletedAtGte    *time.Time   `json:"deletedAtGTE,omitempty"`
	DeletedAtLt     *time.Time   `json:"deletedAtLT,omitempty"`
	DeletedAtLte    *time.Time   `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  *bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil *bool        `json:"deletedAtNotNil,omitempty"`
	// deleted_by field predicates
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNeq          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGt           *string  `json:"deletedByGT,omitempty"`
	DeletedByGte          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLt           *string  `json:"deletedByLT,omitempty"`
	DeletedByLte          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        *bool    `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       *bool    `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`
	// name field predicates
	Name             *string  `json:"name,omitempty"`
	NameNeq          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGt           *string  `json:"nameGT,omitempty"`
	NameGte          *string  `json:"nameGTE,omitempty"`
	NameLt           *string  `json:"nameLT,omitempty"`
	NameLte          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
	// ports edge predicates
	HasPorts     *bool                         `json:"hasPorts,omitempty"`
	HasPortsWith []*LoadBalancerPortWhereInput `json:"hasPortsWith,omitempty"`
	// provider edge predicates
	HasProvider     *bool                             `json:"hasProvider,omitempty"`
	HasProviderWith []*LoadBalancerProviderWhereInput `json:"hasProviderWith,omitempty"`
}

type Location struct {
	ID            gidx.PrefixedID        `json:"id"`
	LoadBalancers LoadBalancerConnection `json:"loadBalancers"`
}

func (Location) IsEntity() {}

// Information about pagination in a connection.
// https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
type PageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor,omitempty"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor,omitempty"`
}

type ResourceOwner struct {
	ID                     gidx.PrefixedID                `json:"id"`
	LoadBalancers          LoadBalancerConnection         `json:"loadBalancers"`
	LoadBalancerPools      LoadBalancerPoolConnection     `json:"loadBalancerPools"`
	LoadBalancersProviders LoadBalancerProviderConnection `json:"loadBalancersProviders"`
}

func (ResourceOwner) IsEntity() {}

// Input information to update a load balancer.
type UpdateLoadBalancerInput struct {
	// The name of the load balancer.
	Name          *string           `json:"name,omitempty"`
	AddPortIDs    []gidx.PrefixedID `json:"addPortIDs,omitempty"`
	RemovePortIDs []gidx.PrefixedID `json:"removePortIDs,omitempty"`
	ClearPorts    *bool             `json:"clearPorts,omitempty"`
}

// UpdateLoadBalancerOriginInput is used for update LoadBalancerOrigin object.
// Input was generated by ent.
type UpdateLoadBalancerOriginInput struct {
	Name       *string `json:"name,omitempty"`
	Weight     *int64  `json:"weight,omitempty"`
	Target     *string `json:"target,omitempty"`
	PortNumber *int64  `json:"portNumber,omitempty"`
	Active     *bool   `json:"active,omitempty"`
}

// UpdateLoadBalancerPoolInput is used for update LoadBalancerPool object.
// Input was generated by ent.
type UpdateLoadBalancerPoolInput struct {
	Name            *string                   `json:"name,omitempty"`
	Protocol        *LoadBalancerPoolProtocol `json:"protocol,omitempty"`
	AddPortIDs      []gidx.PrefixedID         `json:"addPortIDs,omitempty"`
	RemovePortIDs   []gidx.PrefixedID         `json:"removePortIDs,omitempty"`
	ClearPorts      *bool                     `json:"clearPorts,omitempty"`
	AddOriginIDs    []gidx.PrefixedID         `json:"addOriginIDs,omitempty"`
	RemoveOriginIDs []gidx.PrefixedID         `json:"removeOriginIDs,omitempty"`
	ClearOrigins    *bool                     `json:"clearOrigins,omitempty"`
}

// UpdateLoadBalancerPortInput is used for update LoadBalancerPort object.
// Input was generated by ent.
type UpdateLoadBalancerPortInput struct {
	Number        *int64            `json:"number,omitempty"`
	Name          *string           `json:"name,omitempty"`
	AddPoolIDs    []gidx.PrefixedID `json:"addPoolIDs,omitempty"`
	RemovePoolIDs []gidx.PrefixedID `json:"removePoolIDs,omitempty"`
	ClearPools    *bool             `json:"clearPools,omitempty"`
}

// Input information to update a load balancer provider.
type UpdateLoadBalancerProviderInput struct {
	// The name of the load balancer provider.
	Name *string `json:"name,omitempty"`
}

type Service struct {
	Sdl *string `json:"sdl,omitempty"`
}

// Properties by which LoadBalancer connections can be ordered.
type LoadBalancerOrderField string

const (
	LoadBalancerOrderFieldID        LoadBalancerOrderField = "ID"
	LoadBalancerOrderFieldCreatedAt LoadBalancerOrderField = "CREATED_AT"
	LoadBalancerOrderFieldUpdatedAt LoadBalancerOrderField = "UPDATED_AT"
	LoadBalancerOrderFieldCreatedBy LoadBalancerOrderField = "CREATED_BY"
	LoadBalancerOrderFieldUpdatedBy LoadBalancerOrderField = "UPDATED_BY"
	LoadBalancerOrderFieldDeletedAt LoadBalancerOrderField = "DELETED_AT"
	LoadBalancerOrderFieldDeletedBy LoadBalancerOrderField = "DELETED_BY"
	LoadBalancerOrderFieldName      LoadBalancerOrderField = "NAME"
	LoadBalancerOrderFieldOwner     LoadBalancerOrderField = "OWNER"
)

var AllLoadBalancerOrderField = []LoadBalancerOrderField{
	LoadBalancerOrderFieldID,
	LoadBalancerOrderFieldCreatedAt,
	LoadBalancerOrderFieldUpdatedAt,
	LoadBalancerOrderFieldCreatedBy,
	LoadBalancerOrderFieldUpdatedBy,
	LoadBalancerOrderFieldDeletedAt,
	LoadBalancerOrderFieldDeletedBy,
	LoadBalancerOrderFieldName,
	LoadBalancerOrderFieldOwner,
}

func (e LoadBalancerOrderField) IsValid() bool {
	switch e {
	case LoadBalancerOrderFieldID, LoadBalancerOrderFieldCreatedAt, LoadBalancerOrderFieldUpdatedAt, LoadBalancerOrderFieldCreatedBy, LoadBalancerOrderFieldUpdatedBy, LoadBalancerOrderFieldDeletedAt, LoadBalancerOrderFieldDeletedBy, LoadBalancerOrderFieldName, LoadBalancerOrderFieldOwner:
		return true
	}
	return false
}

func (e LoadBalancerOrderField) String() string {
	return string(e)
}

func (e *LoadBalancerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LoadBalancerOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LoadBalancerOrderField", str)
	}
	return nil
}

func (e LoadBalancerOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which LoadBalancerOrigin connections can be ordered.
type LoadBalancerOriginOrderField string

const (
	LoadBalancerOriginOrderFieldCreatedAt LoadBalancerOriginOrderField = "CREATED_AT"
	LoadBalancerOriginOrderFieldUpdatedAt LoadBalancerOriginOrderField = "UPDATED_AT"
	LoadBalancerOriginOrderFieldCreatedBy LoadBalancerOriginOrderField = "CREATED_BY"
	LoadBalancerOriginOrderFieldUpdatedBy LoadBalancerOriginOrderField = "UPDATED_BY"
	LoadBalancerOriginOrderFieldName      LoadBalancerOriginOrderField = "name"
	LoadBalancerOriginOrderFieldWeight    LoadBalancerOriginOrderField = "weight"
	LoadBalancerOriginOrderFieldTarget    LoadBalancerOriginOrderField = "target"
	LoadBalancerOriginOrderFieldNumber    LoadBalancerOriginOrderField = "number"
	LoadBalancerOriginOrderFieldActive    LoadBalancerOriginOrderField = "active"
)

var AllLoadBalancerOriginOrderField = []LoadBalancerOriginOrderField{
	LoadBalancerOriginOrderFieldCreatedAt,
	LoadBalancerOriginOrderFieldUpdatedAt,
	LoadBalancerOriginOrderFieldCreatedBy,
	LoadBalancerOriginOrderFieldUpdatedBy,
	LoadBalancerOriginOrderFieldName,
	LoadBalancerOriginOrderFieldWeight,
	LoadBalancerOriginOrderFieldTarget,
	LoadBalancerOriginOrderFieldNumber,
	LoadBalancerOriginOrderFieldActive,
}

func (e LoadBalancerOriginOrderField) IsValid() bool {
	switch e {
	case LoadBalancerOriginOrderFieldCreatedAt, LoadBalancerOriginOrderFieldUpdatedAt, LoadBalancerOriginOrderFieldCreatedBy, LoadBalancerOriginOrderFieldUpdatedBy, LoadBalancerOriginOrderFieldName, LoadBalancerOriginOrderFieldWeight, LoadBalancerOriginOrderFieldTarget, LoadBalancerOriginOrderFieldNumber, LoadBalancerOriginOrderFieldActive:
		return true
	}
	return false
}

func (e LoadBalancerOriginOrderField) String() string {
	return string(e)
}

func (e *LoadBalancerOriginOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LoadBalancerOriginOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LoadBalancerOriginOrderField", str)
	}
	return nil
}

func (e LoadBalancerOriginOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which LoadBalancerPool connections can be ordered.
type LoadBalancerPoolOrderField string

const (
	LoadBalancerPoolOrderFieldCreatedAt LoadBalancerPoolOrderField = "CREATED_AT"
	LoadBalancerPoolOrderFieldUpdatedAt LoadBalancerPoolOrderField = "UPDATED_AT"
	LoadBalancerPoolOrderFieldCreatedBy LoadBalancerPoolOrderField = "CREATED_BY"
	LoadBalancerPoolOrderFieldUpdatedBy LoadBalancerPoolOrderField = "UPDATED_BY"
	LoadBalancerPoolOrderFieldName      LoadBalancerPoolOrderField = "name"
	LoadBalancerPoolOrderFieldProtocol  LoadBalancerPoolOrderField = "protocol"
)

var AllLoadBalancerPoolOrderField = []LoadBalancerPoolOrderField{
	LoadBalancerPoolOrderFieldCreatedAt,
	LoadBalancerPoolOrderFieldUpdatedAt,
	LoadBalancerPoolOrderFieldCreatedBy,
	LoadBalancerPoolOrderFieldUpdatedBy,
	LoadBalancerPoolOrderFieldName,
	LoadBalancerPoolOrderFieldProtocol,
}

func (e LoadBalancerPoolOrderField) IsValid() bool {
	switch e {
	case LoadBalancerPoolOrderFieldCreatedAt, LoadBalancerPoolOrderFieldUpdatedAt, LoadBalancerPoolOrderFieldCreatedBy, LoadBalancerPoolOrderFieldUpdatedBy, LoadBalancerPoolOrderFieldName, LoadBalancerPoolOrderFieldProtocol:
		return true
	}
	return false
}

func (e LoadBalancerPoolOrderField) String() string {
	return string(e)
}

func (e *LoadBalancerPoolOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LoadBalancerPoolOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LoadBalancerPoolOrderField", str)
	}
	return nil
}

func (e LoadBalancerPoolOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// LoadBalancerPoolProtocol is enum for the field protocol
type LoadBalancerPoolProtocol string

const (
	LoadBalancerPoolProtocolTCP LoadBalancerPoolProtocol = "tcp"
	LoadBalancerPoolProtocolUDP LoadBalancerPoolProtocol = "udp"
)

var AllLoadBalancerPoolProtocol = []LoadBalancerPoolProtocol{
	LoadBalancerPoolProtocolTCP,
	LoadBalancerPoolProtocolUDP,
}

func (e LoadBalancerPoolProtocol) IsValid() bool {
	switch e {
	case LoadBalancerPoolProtocolTCP, LoadBalancerPoolProtocolUDP:
		return true
	}
	return false
}

func (e LoadBalancerPoolProtocol) String() string {
	return string(e)
}

func (e *LoadBalancerPoolProtocol) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LoadBalancerPoolProtocol(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LoadBalancerPoolProtocol", str)
	}
	return nil
}

func (e LoadBalancerPoolProtocol) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which LoadBalancerPort connections can be ordered.
type LoadBalancerPortOrderField string

const (
	LoadBalancerPortOrderFieldCreatedAt LoadBalancerPortOrderField = "CREATED_AT"
	LoadBalancerPortOrderFieldUpdatedAt LoadBalancerPortOrderField = "UPDATED_AT"
	LoadBalancerPortOrderFieldCreatedBy LoadBalancerPortOrderField = "CREATED_BY"
	LoadBalancerPortOrderFieldUpdatedBy LoadBalancerPortOrderField = "UPDATED_BY"
	LoadBalancerPortOrderFieldNumber    LoadBalancerPortOrderField = "number"
	LoadBalancerPortOrderFieldName      LoadBalancerPortOrderField = "name"
)

var AllLoadBalancerPortOrderField = []LoadBalancerPortOrderField{
	LoadBalancerPortOrderFieldCreatedAt,
	LoadBalancerPortOrderFieldUpdatedAt,
	LoadBalancerPortOrderFieldCreatedBy,
	LoadBalancerPortOrderFieldUpdatedBy,
	LoadBalancerPortOrderFieldNumber,
	LoadBalancerPortOrderFieldName,
}

func (e LoadBalancerPortOrderField) IsValid() bool {
	switch e {
	case LoadBalancerPortOrderFieldCreatedAt, LoadBalancerPortOrderFieldUpdatedAt, LoadBalancerPortOrderFieldCreatedBy, LoadBalancerPortOrderFieldUpdatedBy, LoadBalancerPortOrderFieldNumber, LoadBalancerPortOrderFieldName:
		return true
	}
	return false
}

func (e LoadBalancerPortOrderField) String() string {
	return string(e)
}

func (e *LoadBalancerPortOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LoadBalancerPortOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LoadBalancerPortOrderField", str)
	}
	return nil
}

func (e LoadBalancerPortOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which LoadBalancerProvider connections can be ordered.
type LoadBalancerProviderOrderField string

const (
	LoadBalancerProviderOrderFieldID        LoadBalancerProviderOrderField = "ID"
	LoadBalancerProviderOrderFieldCreatedAt LoadBalancerProviderOrderField = "CREATED_AT"
	LoadBalancerProviderOrderFieldUpdatedAt LoadBalancerProviderOrderField = "UPDATED_AT"
	LoadBalancerProviderOrderFieldCreatedBy LoadBalancerProviderOrderField = "CREATED_BY"
	LoadBalancerProviderOrderFieldUpdatedBy LoadBalancerProviderOrderField = "UPDATED_BY"
	LoadBalancerProviderOrderFieldName      LoadBalancerProviderOrderField = "NAME"
	LoadBalancerProviderOrderFieldOwner     LoadBalancerProviderOrderField = "OWNER"
)

var AllLoadBalancerProviderOrderField = []LoadBalancerProviderOrderField{
	LoadBalancerProviderOrderFieldID,
	LoadBalancerProviderOrderFieldCreatedAt,
	LoadBalancerProviderOrderFieldUpdatedAt,
	LoadBalancerProviderOrderFieldCreatedBy,
	LoadBalancerProviderOrderFieldUpdatedBy,
	LoadBalancerProviderOrderFieldName,
	LoadBalancerProviderOrderFieldOwner,
}

func (e LoadBalancerProviderOrderField) IsValid() bool {
	switch e {
	case LoadBalancerProviderOrderFieldID, LoadBalancerProviderOrderFieldCreatedAt, LoadBalancerProviderOrderFieldUpdatedAt, LoadBalancerProviderOrderFieldCreatedBy, LoadBalancerProviderOrderFieldUpdatedBy, LoadBalancerProviderOrderFieldName, LoadBalancerProviderOrderFieldOwner:
		return true
	}
	return false
}

func (e LoadBalancerProviderOrderField) String() string {
	return string(e)
}

func (e *LoadBalancerProviderOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LoadBalancerProviderOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LoadBalancerProviderOrderField", str)
	}
	return nil
}

func (e LoadBalancerProviderOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

const (
	// Specifies an ascending order for a given `orderBy` argument.
	OrderDirectionAsc OrderDirection = "ASC"
	// Specifies a descending order for a given `orderBy` argument.
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
